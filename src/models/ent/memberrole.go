// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"service-api/src/models/ent/memberrole"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MemberRole is the model entity for the MemberRole schema.
type MemberRole struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 规则名称
	RoleName string `json:"role_name,omitempty"`
	// 状态 on 开启 off 关闭
	State        string `json:"state,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memberrole.FieldRoleName, memberrole.FieldState:
			values[i] = new(sql.NullString)
		case memberrole.FieldCreateTime, memberrole.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case memberrole.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberRole fields.
func (mr *MemberRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memberrole.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mr.ID = *value
			}
		case memberrole.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mr.CreateTime = value.Time
			}
		case memberrole.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mr.UpdateTime = value.Time
			}
		case memberrole.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_name", values[i])
			} else if value.Valid {
				mr.RoleName = value.String
			}
		case memberrole.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				mr.State = value.String
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemberRole.
// This includes values selected through modifiers, order, etc.
func (mr *MemberRole) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// Update returns a builder for updating this MemberRole.
// Note that you need to call MemberRole.Unwrap() before calling this method if this MemberRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *MemberRole) Update() *MemberRoleUpdateOne {
	return NewMemberRoleClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the MemberRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *MemberRole) Unwrap() *MemberRole {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberRole is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *MemberRole) String() string {
	var builder strings.Builder
	builder.WriteString("MemberRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("create_time=")
	builder.WriteString(mr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(mr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("role_name=")
	builder.WriteString(mr.RoleName)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(mr.State)
	builder.WriteByte(')')
	return builder.String()
}

// MemberRoles is a parsable slice of MemberRole.
type MemberRoles []*MemberRole
