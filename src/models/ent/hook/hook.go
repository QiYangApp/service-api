// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"service-api/src/models/ent"
)

// The MemberFunc type is an adapter to allow the use of ordinary
// function as Member mutator.
type MemberFunc func(context.Context, *ent.MemberMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MemberFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MemberMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MemberMutation", m)
}

// The MemberAuthorizeLogFunc type is an adapter to allow the use of ordinary
// function as MemberAuthorizeLog mutator.
type MemberAuthorizeLogFunc func(context.Context, *ent.MemberAuthorizeLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MemberAuthorizeLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MemberAuthorizeLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MemberAuthorizeLogMutation", m)
}

// The MemberRelatedRoleFunc type is an adapter to allow the use of ordinary
// function as MemberRelatedRole mutator.
type MemberRelatedRoleFunc func(context.Context, *ent.MemberRelatedRoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MemberRelatedRoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MemberRelatedRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MemberRelatedRoleMutation", m)
}

// The MemberRoleFunc type is an adapter to allow the use of ordinary
// function as MemberRole mutator.
type MemberRoleFunc func(context.Context, *ent.MemberRoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MemberRoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MemberRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MemberRoleMutation", m)
}

// The MemberRoleRelatedPermissionFunc type is an adapter to allow the use of ordinary
// function as MemberRoleRelatedPermission mutator.
type MemberRoleRelatedPermissionFunc func(context.Context, *ent.MemberRoleRelatedPermissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MemberRoleRelatedPermissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MemberRoleRelatedPermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MemberRoleRelatedPermissionMutation", m)
}

// The PermissionGroupFunc type is an adapter to allow the use of ordinary
// function as PermissionGroup mutator.
type PermissionGroupFunc func(context.Context, *ent.PermissionGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PermissionGroupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PermissionGroupMutation", m)
}

// The PermissionRelatedRouterFunc type is an adapter to allow the use of ordinary
// function as PermissionRelatedRouter mutator.
type PermissionRelatedRouterFunc func(context.Context, *ent.PermissionRelatedRouterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionRelatedRouterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PermissionRelatedRouterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PermissionRelatedRouterMutation", m)
}

// The RouterFunc type is an adapter to allow the use of ordinary
// function as Router mutator.
type RouterFunc func(context.Context, *ent.RouterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RouterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RouterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RouterMutation", m)
}

// The SourceDataFunc type is an adapter to allow the use of ordinary
// function as SourceData mutator.
type SourceDataFunc func(context.Context, *ent.SourceDataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SourceDataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SourceDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SourceDataMutation", m)
}

// The WakatimeFunc type is an adapter to allow the use of ordinary
// function as Wakatime mutator.
type WakatimeFunc func(context.Context, *ent.WakatimeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeMutation", m)
}

// The WakatimeCategoryFunc type is an adapter to allow the use of ordinary
// function as WakatimeCategory mutator.
type WakatimeCategoryFunc func(context.Context, *ent.WakatimeCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeCategoryMutation", m)
}

// The WakatimeDependencyFunc type is an adapter to allow the use of ordinary
// function as WakatimeDependency mutator.
type WakatimeDependencyFunc func(context.Context, *ent.WakatimeDependencyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeDependencyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeDependencyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeDependencyMutation", m)
}

// The WakatimeDurationFunc type is an adapter to allow the use of ordinary
// function as WakatimeDuration mutator.
type WakatimeDurationFunc func(context.Context, *ent.WakatimeDurationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeDurationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeDurationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeDurationMutation", m)
}

// The WakatimeEditorFunc type is an adapter to allow the use of ordinary
// function as WakatimeEditor mutator.
type WakatimeEditorFunc func(context.Context, *ent.WakatimeEditorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeEditorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeEditorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeEditorMutation", m)
}

// The WakatimeEntityFunc type is an adapter to allow the use of ordinary
// function as WakatimeEntity mutator.
type WakatimeEntityFunc func(context.Context, *ent.WakatimeEntityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeEntityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeEntityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeEntityMutation", m)
}

// The WakatimeGrandTotalFunc type is an adapter to allow the use of ordinary
// function as WakatimeGrandTotal mutator.
type WakatimeGrandTotalFunc func(context.Context, *ent.WakatimeGrandTotalMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeGrandTotalFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeGrandTotalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeGrandTotalMutation", m)
}

// The WakatimeHeartBeatFunc type is an adapter to allow the use of ordinary
// function as WakatimeHeartBeat mutator.
type WakatimeHeartBeatFunc func(context.Context, *ent.WakatimeHeartBeatMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeHeartBeatFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeHeartBeatMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeHeartBeatMutation", m)
}

// The WakatimeLanguageFunc type is an adapter to allow the use of ordinary
// function as WakatimeLanguage mutator.
type WakatimeLanguageFunc func(context.Context, *ent.WakatimeLanguageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeLanguageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeLanguageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeLanguageMutation", m)
}

// The WakatimeProjectFunc type is an adapter to allow the use of ordinary
// function as WakatimeProject mutator.
type WakatimeProjectFunc func(context.Context, *ent.WakatimeProjectMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeProjectFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeProjectMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeProjectMutation", m)
}

// The WakatimeProjectDurationFunc type is an adapter to allow the use of ordinary
// function as WakatimeProjectDuration mutator.
type WakatimeProjectDurationFunc func(context.Context, *ent.WakatimeProjectDurationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeProjectDurationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeProjectDurationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeProjectDurationMutation", m)
}

// The WakatimeProjectInfoFunc type is an adapter to allow the use of ordinary
// function as WakatimeProjectInfo mutator.
type WakatimeProjectInfoFunc func(context.Context, *ent.WakatimeProjectInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeProjectInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeProjectInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeProjectInfoMutation", m)
}

// The WakatimeSystemFunc type is an adapter to allow the use of ordinary
// function as WakatimeSystem mutator.
type WakatimeSystemFunc func(context.Context, *ent.WakatimeSystemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeSystemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WakatimeSystemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WakatimeSystemMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
