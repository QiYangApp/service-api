// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"service-api/src/models/ent/memberrelatedrole"
	"service-api/src/models/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MemberRelatedRoleUpdate is the builder for updating MemberRelatedRole entities.
type MemberRelatedRoleUpdate struct {
	config
	hooks    []Hook
	mutation *MemberRelatedRoleMutation
}

// Where appends a list predicates to the MemberRelatedRoleUpdate builder.
func (mrru *MemberRelatedRoleUpdate) Where(ps ...predicate.MemberRelatedRole) *MemberRelatedRoleUpdate {
	mrru.mutation.Where(ps...)
	return mrru
}

// SetUpdateTime sets the "update_time" field.
func (mrru *MemberRelatedRoleUpdate) SetUpdateTime(t time.Time) *MemberRelatedRoleUpdate {
	mrru.mutation.SetUpdateTime(t)
	return mrru
}

// SetMemberID sets the "member_id" field.
func (mrru *MemberRelatedRoleUpdate) SetMemberID(u uuid.UUID) *MemberRelatedRoleUpdate {
	mrru.mutation.SetMemberID(u)
	return mrru
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mrru *MemberRelatedRoleUpdate) SetNillableMemberID(u *uuid.UUID) *MemberRelatedRoleUpdate {
	if u != nil {
		mrru.SetMemberID(*u)
	}
	return mrru
}

// SetRoleID sets the "role_id" field.
func (mrru *MemberRelatedRoleUpdate) SetRoleID(u uuid.UUID) *MemberRelatedRoleUpdate {
	mrru.mutation.SetRoleID(u)
	return mrru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (mrru *MemberRelatedRoleUpdate) SetNillableRoleID(u *uuid.UUID) *MemberRelatedRoleUpdate {
	if u != nil {
		mrru.SetRoleID(*u)
	}
	return mrru
}

// Mutation returns the MemberRelatedRoleMutation object of the builder.
func (mrru *MemberRelatedRoleUpdate) Mutation() *MemberRelatedRoleMutation {
	return mrru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mrru *MemberRelatedRoleUpdate) Save(ctx context.Context) (int, error) {
	mrru.defaults()
	return withHooks(ctx, mrru.sqlSave, mrru.mutation, mrru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mrru *MemberRelatedRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := mrru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mrru *MemberRelatedRoleUpdate) Exec(ctx context.Context) error {
	_, err := mrru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrru *MemberRelatedRoleUpdate) ExecX(ctx context.Context) {
	if err := mrru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrru *MemberRelatedRoleUpdate) defaults() {
	if _, ok := mrru.mutation.UpdateTime(); !ok {
		v := memberrelatedrole.UpdateDefaultUpdateTime()
		mrru.mutation.SetUpdateTime(v)
	}
}

func (mrru *MemberRelatedRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberrelatedrole.Table, memberrelatedrole.Columns, sqlgraph.NewFieldSpec(memberrelatedrole.FieldID, field.TypeUUID))
	if ps := mrru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mrru.mutation.UpdateTime(); ok {
		_spec.SetField(memberrelatedrole.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mrru.mutation.MemberID(); ok {
		_spec.SetField(memberrelatedrole.FieldMemberID, field.TypeUUID, value)
	}
	if value, ok := mrru.mutation.RoleID(); ok {
		_spec.SetField(memberrelatedrole.FieldRoleID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mrru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberrelatedrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mrru.mutation.done = true
	return n, nil
}

// MemberRelatedRoleUpdateOne is the builder for updating a single MemberRelatedRole entity.
type MemberRelatedRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberRelatedRoleMutation
}

// SetUpdateTime sets the "update_time" field.
func (mrruo *MemberRelatedRoleUpdateOne) SetUpdateTime(t time.Time) *MemberRelatedRoleUpdateOne {
	mrruo.mutation.SetUpdateTime(t)
	return mrruo
}

// SetMemberID sets the "member_id" field.
func (mrruo *MemberRelatedRoleUpdateOne) SetMemberID(u uuid.UUID) *MemberRelatedRoleUpdateOne {
	mrruo.mutation.SetMemberID(u)
	return mrruo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (mrruo *MemberRelatedRoleUpdateOne) SetNillableMemberID(u *uuid.UUID) *MemberRelatedRoleUpdateOne {
	if u != nil {
		mrruo.SetMemberID(*u)
	}
	return mrruo
}

// SetRoleID sets the "role_id" field.
func (mrruo *MemberRelatedRoleUpdateOne) SetRoleID(u uuid.UUID) *MemberRelatedRoleUpdateOne {
	mrruo.mutation.SetRoleID(u)
	return mrruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (mrruo *MemberRelatedRoleUpdateOne) SetNillableRoleID(u *uuid.UUID) *MemberRelatedRoleUpdateOne {
	if u != nil {
		mrruo.SetRoleID(*u)
	}
	return mrruo
}

// Mutation returns the MemberRelatedRoleMutation object of the builder.
func (mrruo *MemberRelatedRoleUpdateOne) Mutation() *MemberRelatedRoleMutation {
	return mrruo.mutation
}

// Where appends a list predicates to the MemberRelatedRoleUpdate builder.
func (mrruo *MemberRelatedRoleUpdateOne) Where(ps ...predicate.MemberRelatedRole) *MemberRelatedRoleUpdateOne {
	mrruo.mutation.Where(ps...)
	return mrruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mrruo *MemberRelatedRoleUpdateOne) Select(field string, fields ...string) *MemberRelatedRoleUpdateOne {
	mrruo.fields = append([]string{field}, fields...)
	return mrruo
}

// Save executes the query and returns the updated MemberRelatedRole entity.
func (mrruo *MemberRelatedRoleUpdateOne) Save(ctx context.Context) (*MemberRelatedRole, error) {
	mrruo.defaults()
	return withHooks(ctx, mrruo.sqlSave, mrruo.mutation, mrruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mrruo *MemberRelatedRoleUpdateOne) SaveX(ctx context.Context) *MemberRelatedRole {
	node, err := mrruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mrruo *MemberRelatedRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := mrruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrruo *MemberRelatedRoleUpdateOne) ExecX(ctx context.Context) {
	if err := mrruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrruo *MemberRelatedRoleUpdateOne) defaults() {
	if _, ok := mrruo.mutation.UpdateTime(); !ok {
		v := memberrelatedrole.UpdateDefaultUpdateTime()
		mrruo.mutation.SetUpdateTime(v)
	}
}

func (mrruo *MemberRelatedRoleUpdateOne) sqlSave(ctx context.Context) (_node *MemberRelatedRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberrelatedrole.Table, memberrelatedrole.Columns, sqlgraph.NewFieldSpec(memberrelatedrole.FieldID, field.TypeUUID))
	id, ok := mrruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemberRelatedRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mrruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberrelatedrole.FieldID)
		for _, f := range fields {
			if !memberrelatedrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memberrelatedrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mrruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mrruo.mutation.UpdateTime(); ok {
		_spec.SetField(memberrelatedrole.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mrruo.mutation.MemberID(); ok {
		_spec.SetField(memberrelatedrole.FieldMemberID, field.TypeUUID, value)
	}
	if value, ok := mrruo.mutation.RoleID(); ok {
		_spec.SetField(memberrelatedrole.FieldRoleID, field.TypeUUID, value)
	}
	_node = &MemberRelatedRole{config: mrruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mrruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberrelatedrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mrruo.mutation.done = true
	return _node, nil
}
