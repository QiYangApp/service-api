// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"service-api/src/models/ent/memberrelatedrole"
	"service-api/src/models/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberRelatedRoleDelete is the builder for deleting a MemberRelatedRole entity.
type MemberRelatedRoleDelete struct {
	config
	hooks    []Hook
	mutation *MemberRelatedRoleMutation
}

// Where appends a list predicates to the MemberRelatedRoleDelete builder.
func (mrrd *MemberRelatedRoleDelete) Where(ps ...predicate.MemberRelatedRole) *MemberRelatedRoleDelete {
	mrrd.mutation.Where(ps...)
	return mrrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mrrd *MemberRelatedRoleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mrrd.sqlExec, mrrd.mutation, mrrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mrrd *MemberRelatedRoleDelete) ExecX(ctx context.Context) int {
	n, err := mrrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mrrd *MemberRelatedRoleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(memberrelatedrole.Table, sqlgraph.NewFieldSpec(memberrelatedrole.FieldID, field.TypeUUID))
	if ps := mrrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mrrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mrrd.mutation.done = true
	return affected, err
}

// MemberRelatedRoleDeleteOne is the builder for deleting a single MemberRelatedRole entity.
type MemberRelatedRoleDeleteOne struct {
	mrrd *MemberRelatedRoleDelete
}

// Where appends a list predicates to the MemberRelatedRoleDelete builder.
func (mrrdo *MemberRelatedRoleDeleteOne) Where(ps ...predicate.MemberRelatedRole) *MemberRelatedRoleDeleteOne {
	mrrdo.mrrd.mutation.Where(ps...)
	return mrrdo
}

// Exec executes the deletion query.
func (mrrdo *MemberRelatedRoleDeleteOne) Exec(ctx context.Context) error {
	n, err := mrrdo.mrrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{memberrelatedrole.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mrrdo *MemberRelatedRoleDeleteOne) ExecX(ctx context.Context) {
	if err := mrrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
