// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"service-api/src/models/ent/memberauthorizelog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MemberAuthorizeLogCreate is the builder for creating a MemberAuthorizeLog entity.
type MemberAuthorizeLogCreate struct {
	config
	mutation *MemberAuthorizeLogMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (malc *MemberAuthorizeLogCreate) SetCreateTime(t time.Time) *MemberAuthorizeLogCreate {
	malc.mutation.SetCreateTime(t)
	return malc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (malc *MemberAuthorizeLogCreate) SetNillableCreateTime(t *time.Time) *MemberAuthorizeLogCreate {
	if t != nil {
		malc.SetCreateTime(*t)
	}
	return malc
}

// SetUpdateTime sets the "update_time" field.
func (malc *MemberAuthorizeLogCreate) SetUpdateTime(t time.Time) *MemberAuthorizeLogCreate {
	malc.mutation.SetUpdateTime(t)
	return malc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (malc *MemberAuthorizeLogCreate) SetNillableUpdateTime(t *time.Time) *MemberAuthorizeLogCreate {
	if t != nil {
		malc.SetUpdateTime(*t)
	}
	return malc
}

// SetMemberID sets the "member_id" field.
func (malc *MemberAuthorizeLogCreate) SetMemberID(u uuid.UUID) *MemberAuthorizeLogCreate {
	malc.mutation.SetMemberID(u)
	return malc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (malc *MemberAuthorizeLogCreate) SetNillableMemberID(u *uuid.UUID) *MemberAuthorizeLogCreate {
	if u != nil {
		malc.SetMemberID(*u)
	}
	return malc
}

// SetToken sets the "token" field.
func (malc *MemberAuthorizeLogCreate) SetToken(s string) *MemberAuthorizeLogCreate {
	malc.mutation.SetToken(s)
	return malc
}

// SetChannel sets the "channel" field.
func (malc *MemberAuthorizeLogCreate) SetChannel(s string) *MemberAuthorizeLogCreate {
	malc.mutation.SetChannel(s)
	return malc
}

// SetDevice sets the "device" field.
func (malc *MemberAuthorizeLogCreate) SetDevice(s string) *MemberAuthorizeLogCreate {
	malc.mutation.SetDevice(s)
	return malc
}

// SetDeviceDetail sets the "device_detail" field.
func (malc *MemberAuthorizeLogCreate) SetDeviceDetail(s string) *MemberAuthorizeLogCreate {
	malc.mutation.SetDeviceDetail(s)
	return malc
}

// SetClientIP sets the "client_ip" field.
func (malc *MemberAuthorizeLogCreate) SetClientIP(s string) *MemberAuthorizeLogCreate {
	malc.mutation.SetClientIP(s)
	return malc
}

// SetRemoteIP sets the "remote_ip" field.
func (malc *MemberAuthorizeLogCreate) SetRemoteIP(s string) *MemberAuthorizeLogCreate {
	malc.mutation.SetRemoteIP(s)
	return malc
}

// SetSnapshot sets the "snapshot" field.
func (malc *MemberAuthorizeLogCreate) SetSnapshot(s string) *MemberAuthorizeLogCreate {
	malc.mutation.SetSnapshot(s)
	return malc
}

// SetID sets the "id" field.
func (malc *MemberAuthorizeLogCreate) SetID(u uuid.UUID) *MemberAuthorizeLogCreate {
	malc.mutation.SetID(u)
	return malc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (malc *MemberAuthorizeLogCreate) SetNillableID(u *uuid.UUID) *MemberAuthorizeLogCreate {
	if u != nil {
		malc.SetID(*u)
	}
	return malc
}

// Mutation returns the MemberAuthorizeLogMutation object of the builder.
func (malc *MemberAuthorizeLogCreate) Mutation() *MemberAuthorizeLogMutation {
	return malc.mutation
}

// Save creates the MemberAuthorizeLog in the database.
func (malc *MemberAuthorizeLogCreate) Save(ctx context.Context) (*MemberAuthorizeLog, error) {
	malc.defaults()
	return withHooks(ctx, malc.sqlSave, malc.mutation, malc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (malc *MemberAuthorizeLogCreate) SaveX(ctx context.Context) *MemberAuthorizeLog {
	v, err := malc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (malc *MemberAuthorizeLogCreate) Exec(ctx context.Context) error {
	_, err := malc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (malc *MemberAuthorizeLogCreate) ExecX(ctx context.Context) {
	if err := malc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (malc *MemberAuthorizeLogCreate) defaults() {
	if _, ok := malc.mutation.CreateTime(); !ok {
		v := memberauthorizelog.DefaultCreateTime()
		malc.mutation.SetCreateTime(v)
	}
	if _, ok := malc.mutation.UpdateTime(); !ok {
		v := memberauthorizelog.DefaultUpdateTime()
		malc.mutation.SetUpdateTime(v)
	}
	if _, ok := malc.mutation.MemberID(); !ok {
		v := memberauthorizelog.DefaultMemberID()
		malc.mutation.SetMemberID(v)
	}
	if _, ok := malc.mutation.ID(); !ok {
		v := memberauthorizelog.DefaultID()
		malc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (malc *MemberAuthorizeLogCreate) check() error {
	if _, ok := malc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "MemberAuthorizeLog.create_time"`)}
	}
	if _, ok := malc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "MemberAuthorizeLog.update_time"`)}
	}
	if _, ok := malc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "MemberAuthorizeLog.member_id"`)}
	}
	if _, ok := malc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "MemberAuthorizeLog.token"`)}
	}
	if v, ok := malc.mutation.Token(); ok {
		if err := memberauthorizelog.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "MemberAuthorizeLog.token": %w`, err)}
		}
	}
	if _, ok := malc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required field "MemberAuthorizeLog.channel"`)}
	}
	if v, ok := malc.mutation.Channel(); ok {
		if err := memberauthorizelog.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "MemberAuthorizeLog.channel": %w`, err)}
		}
	}
	if _, ok := malc.mutation.Device(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required field "MemberAuthorizeLog.device"`)}
	}
	if v, ok := malc.mutation.Device(); ok {
		if err := memberauthorizelog.DeviceValidator(v); err != nil {
			return &ValidationError{Name: "device", err: fmt.Errorf(`ent: validator failed for field "MemberAuthorizeLog.device": %w`, err)}
		}
	}
	if _, ok := malc.mutation.DeviceDetail(); !ok {
		return &ValidationError{Name: "device_detail", err: errors.New(`ent: missing required field "MemberAuthorizeLog.device_detail"`)}
	}
	if v, ok := malc.mutation.DeviceDetail(); ok {
		if err := memberauthorizelog.DeviceDetailValidator(v); err != nil {
			return &ValidationError{Name: "device_detail", err: fmt.Errorf(`ent: validator failed for field "MemberAuthorizeLog.device_detail": %w`, err)}
		}
	}
	if _, ok := malc.mutation.ClientIP(); !ok {
		return &ValidationError{Name: "client_ip", err: errors.New(`ent: missing required field "MemberAuthorizeLog.client_ip"`)}
	}
	if v, ok := malc.mutation.ClientIP(); ok {
		if err := memberauthorizelog.ClientIPValidator(v); err != nil {
			return &ValidationError{Name: "client_ip", err: fmt.Errorf(`ent: validator failed for field "MemberAuthorizeLog.client_ip": %w`, err)}
		}
	}
	if _, ok := malc.mutation.RemoteIP(); !ok {
		return &ValidationError{Name: "remote_ip", err: errors.New(`ent: missing required field "MemberAuthorizeLog.remote_ip"`)}
	}
	if v, ok := malc.mutation.RemoteIP(); ok {
		if err := memberauthorizelog.RemoteIPValidator(v); err != nil {
			return &ValidationError{Name: "remote_ip", err: fmt.Errorf(`ent: validator failed for field "MemberAuthorizeLog.remote_ip": %w`, err)}
		}
	}
	if _, ok := malc.mutation.Snapshot(); !ok {
		return &ValidationError{Name: "snapshot", err: errors.New(`ent: missing required field "MemberAuthorizeLog.snapshot"`)}
	}
	if v, ok := malc.mutation.Snapshot(); ok {
		if err := memberauthorizelog.SnapshotValidator(v); err != nil {
			return &ValidationError{Name: "snapshot", err: fmt.Errorf(`ent: validator failed for field "MemberAuthorizeLog.snapshot": %w`, err)}
		}
	}
	return nil
}

func (malc *MemberAuthorizeLogCreate) sqlSave(ctx context.Context) (*MemberAuthorizeLog, error) {
	if err := malc.check(); err != nil {
		return nil, err
	}
	_node, _spec := malc.createSpec()
	if err := sqlgraph.CreateNode(ctx, malc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	malc.mutation.id = &_node.ID
	malc.mutation.done = true
	return _node, nil
}

func (malc *MemberAuthorizeLogCreate) createSpec() (*MemberAuthorizeLog, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberAuthorizeLog{config: malc.config}
		_spec = sqlgraph.NewCreateSpec(memberauthorizelog.Table, sqlgraph.NewFieldSpec(memberauthorizelog.FieldID, field.TypeUUID))
	)
	if id, ok := malc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := malc.mutation.CreateTime(); ok {
		_spec.SetField(memberauthorizelog.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := malc.mutation.UpdateTime(); ok {
		_spec.SetField(memberauthorizelog.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := malc.mutation.MemberID(); ok {
		_spec.SetField(memberauthorizelog.FieldMemberID, field.TypeUUID, value)
		_node.MemberID = value
	}
	if value, ok := malc.mutation.Token(); ok {
		_spec.SetField(memberauthorizelog.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := malc.mutation.Channel(); ok {
		_spec.SetField(memberauthorizelog.FieldChannel, field.TypeString, value)
		_node.Channel = value
	}
	if value, ok := malc.mutation.Device(); ok {
		_spec.SetField(memberauthorizelog.FieldDevice, field.TypeString, value)
		_node.Device = value
	}
	if value, ok := malc.mutation.DeviceDetail(); ok {
		_spec.SetField(memberauthorizelog.FieldDeviceDetail, field.TypeString, value)
		_node.DeviceDetail = value
	}
	if value, ok := malc.mutation.ClientIP(); ok {
		_spec.SetField(memberauthorizelog.FieldClientIP, field.TypeString, value)
		_node.ClientIP = value
	}
	if value, ok := malc.mutation.RemoteIP(); ok {
		_spec.SetField(memberauthorizelog.FieldRemoteIP, field.TypeString, value)
		_node.RemoteIP = value
	}
	if value, ok := malc.mutation.Snapshot(); ok {
		_spec.SetField(memberauthorizelog.FieldSnapshot, field.TypeString, value)
		_node.Snapshot = value
	}
	return _node, _spec
}

// MemberAuthorizeLogCreateBulk is the builder for creating many MemberAuthorizeLog entities in bulk.
type MemberAuthorizeLogCreateBulk struct {
	config
	err      error
	builders []*MemberAuthorizeLogCreate
}

// Save creates the MemberAuthorizeLog entities in the database.
func (malcb *MemberAuthorizeLogCreateBulk) Save(ctx context.Context) ([]*MemberAuthorizeLog, error) {
	if malcb.err != nil {
		return nil, malcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(malcb.builders))
	nodes := make([]*MemberAuthorizeLog, len(malcb.builders))
	mutators := make([]Mutator, len(malcb.builders))
	for i := range malcb.builders {
		func(i int, root context.Context) {
			builder := malcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberAuthorizeLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, malcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, malcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, malcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (malcb *MemberAuthorizeLogCreateBulk) SaveX(ctx context.Context) []*MemberAuthorizeLog {
	v, err := malcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (malcb *MemberAuthorizeLogCreateBulk) Exec(ctx context.Context) error {
	_, err := malcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (malcb *MemberAuthorizeLogCreateBulk) ExecX(ctx context.Context) {
	if err := malcb.Exec(ctx); err != nil {
		panic(err)
	}
}
