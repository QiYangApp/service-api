// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"service-api/src/models/ent/memberrelatedrole"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MemberRelatedRoleCreate is the builder for creating a MemberRelatedRole entity.
type MemberRelatedRoleCreate struct {
	config
	mutation *MemberRelatedRoleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mrrc *MemberRelatedRoleCreate) SetCreateTime(t time.Time) *MemberRelatedRoleCreate {
	mrrc.mutation.SetCreateTime(t)
	return mrrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mrrc *MemberRelatedRoleCreate) SetNillableCreateTime(t *time.Time) *MemberRelatedRoleCreate {
	if t != nil {
		mrrc.SetCreateTime(*t)
	}
	return mrrc
}

// SetUpdateTime sets the "update_time" field.
func (mrrc *MemberRelatedRoleCreate) SetUpdateTime(t time.Time) *MemberRelatedRoleCreate {
	mrrc.mutation.SetUpdateTime(t)
	return mrrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mrrc *MemberRelatedRoleCreate) SetNillableUpdateTime(t *time.Time) *MemberRelatedRoleCreate {
	if t != nil {
		mrrc.SetUpdateTime(*t)
	}
	return mrrc
}

// SetMemberID sets the "member_id" field.
func (mrrc *MemberRelatedRoleCreate) SetMemberID(u uuid.UUID) *MemberRelatedRoleCreate {
	mrrc.mutation.SetMemberID(u)
	return mrrc
}

// SetRoleID sets the "role_id" field.
func (mrrc *MemberRelatedRoleCreate) SetRoleID(u uuid.UUID) *MemberRelatedRoleCreate {
	mrrc.mutation.SetRoleID(u)
	return mrrc
}

// SetID sets the "id" field.
func (mrrc *MemberRelatedRoleCreate) SetID(u uuid.UUID) *MemberRelatedRoleCreate {
	mrrc.mutation.SetID(u)
	return mrrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mrrc *MemberRelatedRoleCreate) SetNillableID(u *uuid.UUID) *MemberRelatedRoleCreate {
	if u != nil {
		mrrc.SetID(*u)
	}
	return mrrc
}

// Mutation returns the MemberRelatedRoleMutation object of the builder.
func (mrrc *MemberRelatedRoleCreate) Mutation() *MemberRelatedRoleMutation {
	return mrrc.mutation
}

// Save creates the MemberRelatedRole in the database.
func (mrrc *MemberRelatedRoleCreate) Save(ctx context.Context) (*MemberRelatedRole, error) {
	mrrc.defaults()
	return withHooks(ctx, mrrc.sqlSave, mrrc.mutation, mrrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrrc *MemberRelatedRoleCreate) SaveX(ctx context.Context) *MemberRelatedRole {
	v, err := mrrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrrc *MemberRelatedRoleCreate) Exec(ctx context.Context) error {
	_, err := mrrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrrc *MemberRelatedRoleCreate) ExecX(ctx context.Context) {
	if err := mrrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrrc *MemberRelatedRoleCreate) defaults() {
	if _, ok := mrrc.mutation.CreateTime(); !ok {
		v := memberrelatedrole.DefaultCreateTime()
		mrrc.mutation.SetCreateTime(v)
	}
	if _, ok := mrrc.mutation.UpdateTime(); !ok {
		v := memberrelatedrole.DefaultUpdateTime()
		mrrc.mutation.SetUpdateTime(v)
	}
	if _, ok := mrrc.mutation.ID(); !ok {
		v := memberrelatedrole.DefaultID()
		mrrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrrc *MemberRelatedRoleCreate) check() error {
	if _, ok := mrrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "MemberRelatedRole.create_time"`)}
	}
	if _, ok := mrrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "MemberRelatedRole.update_time"`)}
	}
	if _, ok := mrrc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "MemberRelatedRole.member_id"`)}
	}
	if _, ok := mrrc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "MemberRelatedRole.role_id"`)}
	}
	return nil
}

func (mrrc *MemberRelatedRoleCreate) sqlSave(ctx context.Context) (*MemberRelatedRole, error) {
	if err := mrrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mrrc.mutation.id = &_node.ID
	mrrc.mutation.done = true
	return _node, nil
}

func (mrrc *MemberRelatedRoleCreate) createSpec() (*MemberRelatedRole, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberRelatedRole{config: mrrc.config}
		_spec = sqlgraph.NewCreateSpec(memberrelatedrole.Table, sqlgraph.NewFieldSpec(memberrelatedrole.FieldID, field.TypeUUID))
	)
	if id, ok := mrrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mrrc.mutation.CreateTime(); ok {
		_spec.SetField(memberrelatedrole.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mrrc.mutation.UpdateTime(); ok {
		_spec.SetField(memberrelatedrole.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mrrc.mutation.MemberID(); ok {
		_spec.SetField(memberrelatedrole.FieldMemberID, field.TypeUUID, value)
		_node.MemberID = value
	}
	if value, ok := mrrc.mutation.RoleID(); ok {
		_spec.SetField(memberrelatedrole.FieldRoleID, field.TypeUUID, value)
		_node.RoleID = value
	}
	return _node, _spec
}

// MemberRelatedRoleCreateBulk is the builder for creating many MemberRelatedRole entities in bulk.
type MemberRelatedRoleCreateBulk struct {
	config
	err      error
	builders []*MemberRelatedRoleCreate
}

// Save creates the MemberRelatedRole entities in the database.
func (mrrcb *MemberRelatedRoleCreateBulk) Save(ctx context.Context) ([]*MemberRelatedRole, error) {
	if mrrcb.err != nil {
		return nil, mrrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrrcb.builders))
	nodes := make([]*MemberRelatedRole, len(mrrcb.builders))
	mutators := make([]Mutator, len(mrrcb.builders))
	for i := range mrrcb.builders {
		func(i int, root context.Context) {
			builder := mrrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberRelatedRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrrcb *MemberRelatedRoleCreateBulk) SaveX(ctx context.Context) []*MemberRelatedRole {
	v, err := mrrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrrcb *MemberRelatedRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := mrrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrrcb *MemberRelatedRoleCreateBulk) ExecX(ctx context.Context) {
	if err := mrrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
