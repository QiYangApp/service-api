// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"service-api/src/models/ent/memberauthorizelog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MemberAuthorizeLog is the model entity for the MemberAuthorizeLog schema.
type MemberAuthorizeLog struct {
	config `json:"-"`
	// ID of the ent.
	// UUID of the
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// member UUID of the
	MemberID uuid.UUID `json:"member_id,omitempty"`
	// 授权token
	Token string `json:"token,omitempty"`
	// 登录渠道
	Channel string `json:"channel,omitempty"`
	// 登录设备
	Device string `json:"device,omitempty"`
	// 登录信息
	DeviceDetail string `json:"device_detail,omitempty"`
	// ClientIP holds the value of the "client_ip" field.
	ClientIP string `json:"client_ip,omitempty"`
	// RemoteIP holds the value of the "remote_ip" field.
	RemoteIP string `json:"remote_ip,omitempty"`
	// Snapshot holds the value of the "snapshot" field.
	Snapshot     string `json:"snapshot,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemberAuthorizeLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memberauthorizelog.FieldToken, memberauthorizelog.FieldChannel, memberauthorizelog.FieldDevice, memberauthorizelog.FieldDeviceDetail, memberauthorizelog.FieldClientIP, memberauthorizelog.FieldRemoteIP, memberauthorizelog.FieldSnapshot:
			values[i] = new(sql.NullString)
		case memberauthorizelog.FieldCreateTime, memberauthorizelog.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case memberauthorizelog.FieldID, memberauthorizelog.FieldMemberID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemberAuthorizeLog fields.
func (mal *MemberAuthorizeLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memberauthorizelog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mal.ID = *value
			}
		case memberauthorizelog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mal.CreateTime = value.Time
			}
		case memberauthorizelog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mal.UpdateTime = value.Time
			}
		case memberauthorizelog.FieldMemberID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value != nil {
				mal.MemberID = *value
			}
		case memberauthorizelog.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				mal.Token = value.String
			}
		case memberauthorizelog.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				mal.Channel = value.String
			}
		case memberauthorizelog.FieldDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device", values[i])
			} else if value.Valid {
				mal.Device = value.String
			}
		case memberauthorizelog.FieldDeviceDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_detail", values[i])
			} else if value.Valid {
				mal.DeviceDetail = value.String
			}
		case memberauthorizelog.FieldClientIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_ip", values[i])
			} else if value.Valid {
				mal.ClientIP = value.String
			}
		case memberauthorizelog.FieldRemoteIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remote_ip", values[i])
			} else if value.Valid {
				mal.RemoteIP = value.String
			}
		case memberauthorizelog.FieldSnapshot:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snapshot", values[i])
			} else if value.Valid {
				mal.Snapshot = value.String
			}
		default:
			mal.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemberAuthorizeLog.
// This includes values selected through modifiers, order, etc.
func (mal *MemberAuthorizeLog) Value(name string) (ent.Value, error) {
	return mal.selectValues.Get(name)
}

// Update returns a builder for updating this MemberAuthorizeLog.
// Note that you need to call MemberAuthorizeLog.Unwrap() before calling this method if this MemberAuthorizeLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (mal *MemberAuthorizeLog) Update() *MemberAuthorizeLogUpdateOne {
	return NewMemberAuthorizeLogClient(mal.config).UpdateOne(mal)
}

// Unwrap unwraps the MemberAuthorizeLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mal *MemberAuthorizeLog) Unwrap() *MemberAuthorizeLog {
	_tx, ok := mal.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemberAuthorizeLog is not a transactional entity")
	}
	mal.config.driver = _tx.drv
	return mal
}

// String implements the fmt.Stringer.
func (mal *MemberAuthorizeLog) String() string {
	var builder strings.Builder
	builder.WriteString("MemberAuthorizeLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mal.ID))
	builder.WriteString("create_time=")
	builder.WriteString(mal.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(mal.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", mal.MemberID))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(mal.Token)
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(mal.Channel)
	builder.WriteString(", ")
	builder.WriteString("device=")
	builder.WriteString(mal.Device)
	builder.WriteString(", ")
	builder.WriteString("device_detail=")
	builder.WriteString(mal.DeviceDetail)
	builder.WriteString(", ")
	builder.WriteString("client_ip=")
	builder.WriteString(mal.ClientIP)
	builder.WriteString(", ")
	builder.WriteString("remote_ip=")
	builder.WriteString(mal.RemoteIP)
	builder.WriteString(", ")
	builder.WriteString("snapshot=")
	builder.WriteString(mal.Snapshot)
	builder.WriteByte(')')
	return builder.String()
}

// MemberAuthorizeLogs is a parsable slice of MemberAuthorizeLog.
type MemberAuthorizeLogs []*MemberAuthorizeLog
