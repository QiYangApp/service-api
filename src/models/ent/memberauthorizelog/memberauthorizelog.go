// Code generated by ent, DO NOT EDIT.

package memberauthorizelog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the memberauthorizelog type in the database.
	Label = "member_authorize_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldDevice holds the string denoting the device field in the database.
	FieldDevice = "device"
	// FieldDeviceDetail holds the string denoting the device_detail field in the database.
	FieldDeviceDetail = "device_detail"
	// FieldClientIP holds the string denoting the client_ip field in the database.
	FieldClientIP = "client_ip"
	// FieldRemoteIP holds the string denoting the remote_ip field in the database.
	FieldRemoteIP = "remote_ip"
	// FieldSnapshot holds the string denoting the snapshot field in the database.
	FieldSnapshot = "snapshot"
	// Table holds the table name of the memberauthorizelog in the database.
	Table = "member_authorize_logs"
)

// Columns holds all SQL columns for memberauthorizelog fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldMemberID,
	FieldToken,
	FieldChannel,
	FieldDevice,
	FieldDeviceDetail,
	FieldClientIP,
	FieldRemoteIP,
	FieldSnapshot,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultMemberID holds the default value on creation for the "member_id" field.
	DefaultMemberID func() uuid.UUID
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// ChannelValidator is a validator for the "channel" field. It is called by the builders before save.
	ChannelValidator func(string) error
	// DeviceValidator is a validator for the "device" field. It is called by the builders before save.
	DeviceValidator func(string) error
	// DeviceDetailValidator is a validator for the "device_detail" field. It is called by the builders before save.
	DeviceDetailValidator func(string) error
	// ClientIPValidator is a validator for the "client_ip" field. It is called by the builders before save.
	ClientIPValidator func(string) error
	// RemoteIPValidator is a validator for the "remote_ip" field. It is called by the builders before save.
	RemoteIPValidator func(string) error
	// SnapshotValidator is a validator for the "snapshot" field. It is called by the builders before save.
	SnapshotValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the MemberAuthorizeLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByChannel orders the results by the channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}

// ByDevice orders the results by the device field.
func ByDevice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDevice, opts...).ToFunc()
}

// ByDeviceDetail orders the results by the device_detail field.
func ByDeviceDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceDetail, opts...).ToFunc()
}

// ByClientIP orders the results by the client_ip field.
func ByClientIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientIP, opts...).ToFunc()
}

// ByRemoteIP orders the results by the remote_ip field.
func ByRemoteIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemoteIP, opts...).ToFunc()
}

// BySnapshot orders the results by the snapshot field.
func BySnapshot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSnapshot, opts...).ToFunc()
}
