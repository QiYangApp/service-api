// Code generated by ent, DO NOT EDIT.

package memberrelatedrole

import (
	"service-api/src/models/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldUpdateTime, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldMemberID, v))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldRoleID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLTE(FieldUpdateTime, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGT(FieldMemberID, v))
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGTE(FieldMemberID, v))
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLT(FieldMemberID, v))
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLTE(FieldMemberID, v))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v uuid.UUID) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.FieldLTE(FieldRoleID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MemberRelatedRole) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MemberRelatedRole) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MemberRelatedRole) predicate.MemberRelatedRole {
	return predicate.MemberRelatedRole(sql.NotPredicates(p))
}
