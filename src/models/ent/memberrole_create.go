// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"service-api/src/models/ent/memberrole"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MemberRoleCreate is the builder for creating a MemberRole entity.
type MemberRoleCreate struct {
	config
	mutation *MemberRoleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mrc *MemberRoleCreate) SetCreateTime(t time.Time) *MemberRoleCreate {
	mrc.mutation.SetCreateTime(t)
	return mrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mrc *MemberRoleCreate) SetNillableCreateTime(t *time.Time) *MemberRoleCreate {
	if t != nil {
		mrc.SetCreateTime(*t)
	}
	return mrc
}

// SetUpdateTime sets the "update_time" field.
func (mrc *MemberRoleCreate) SetUpdateTime(t time.Time) *MemberRoleCreate {
	mrc.mutation.SetUpdateTime(t)
	return mrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mrc *MemberRoleCreate) SetNillableUpdateTime(t *time.Time) *MemberRoleCreate {
	if t != nil {
		mrc.SetUpdateTime(*t)
	}
	return mrc
}

// SetRoleName sets the "role_name" field.
func (mrc *MemberRoleCreate) SetRoleName(s string) *MemberRoleCreate {
	mrc.mutation.SetRoleName(s)
	return mrc
}

// SetState sets the "state" field.
func (mrc *MemberRoleCreate) SetState(s string) *MemberRoleCreate {
	mrc.mutation.SetState(s)
	return mrc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (mrc *MemberRoleCreate) SetNillableState(s *string) *MemberRoleCreate {
	if s != nil {
		mrc.SetState(*s)
	}
	return mrc
}

// SetID sets the "id" field.
func (mrc *MemberRoleCreate) SetID(u uuid.UUID) *MemberRoleCreate {
	mrc.mutation.SetID(u)
	return mrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mrc *MemberRoleCreate) SetNillableID(u *uuid.UUID) *MemberRoleCreate {
	if u != nil {
		mrc.SetID(*u)
	}
	return mrc
}

// Mutation returns the MemberRoleMutation object of the builder.
func (mrc *MemberRoleCreate) Mutation() *MemberRoleMutation {
	return mrc.mutation
}

// Save creates the MemberRole in the database.
func (mrc *MemberRoleCreate) Save(ctx context.Context) (*MemberRole, error) {
	mrc.defaults()
	return withHooks(ctx, mrc.sqlSave, mrc.mutation, mrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MemberRoleCreate) SaveX(ctx context.Context) *MemberRole {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *MemberRoleCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *MemberRoleCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrc *MemberRoleCreate) defaults() {
	if _, ok := mrc.mutation.CreateTime(); !ok {
		v := memberrole.DefaultCreateTime()
		mrc.mutation.SetCreateTime(v)
	}
	if _, ok := mrc.mutation.UpdateTime(); !ok {
		v := memberrole.DefaultUpdateTime()
		mrc.mutation.SetUpdateTime(v)
	}
	if _, ok := mrc.mutation.State(); !ok {
		v := memberrole.DefaultState
		mrc.mutation.SetState(v)
	}
	if _, ok := mrc.mutation.ID(); !ok {
		v := memberrole.DefaultID()
		mrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MemberRoleCreate) check() error {
	if _, ok := mrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "MemberRole.create_time"`)}
	}
	if _, ok := mrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "MemberRole.update_time"`)}
	}
	if _, ok := mrc.mutation.RoleName(); !ok {
		return &ValidationError{Name: "role_name", err: errors.New(`ent: missing required field "MemberRole.role_name"`)}
	}
	if v, ok := mrc.mutation.RoleName(); ok {
		if err := memberrole.RoleNameValidator(v); err != nil {
			return &ValidationError{Name: "role_name", err: fmt.Errorf(`ent: validator failed for field "MemberRole.role_name": %w`, err)}
		}
	}
	if _, ok := mrc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "MemberRole.state"`)}
	}
	if v, ok := mrc.mutation.State(); ok {
		if err := memberrole.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "MemberRole.state": %w`, err)}
		}
	}
	return nil
}

func (mrc *MemberRoleCreate) sqlSave(ctx context.Context) (*MemberRole, error) {
	if err := mrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mrc.mutation.id = &_node.ID
	mrc.mutation.done = true
	return _node, nil
}

func (mrc *MemberRoleCreate) createSpec() (*MemberRole, *sqlgraph.CreateSpec) {
	var (
		_node = &MemberRole{config: mrc.config}
		_spec = sqlgraph.NewCreateSpec(memberrole.Table, sqlgraph.NewFieldSpec(memberrole.FieldID, field.TypeUUID))
	)
	if id, ok := mrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mrc.mutation.CreateTime(); ok {
		_spec.SetField(memberrole.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mrc.mutation.UpdateTime(); ok {
		_spec.SetField(memberrole.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mrc.mutation.RoleName(); ok {
		_spec.SetField(memberrole.FieldRoleName, field.TypeString, value)
		_node.RoleName = value
	}
	if value, ok := mrc.mutation.State(); ok {
		_spec.SetField(memberrole.FieldState, field.TypeString, value)
		_node.State = value
	}
	return _node, _spec
}

// MemberRoleCreateBulk is the builder for creating many MemberRole entities in bulk.
type MemberRoleCreateBulk struct {
	config
	err      error
	builders []*MemberRoleCreate
}

// Save creates the MemberRole entities in the database.
func (mrcb *MemberRoleCreateBulk) Save(ctx context.Context) ([]*MemberRole, error) {
	if mrcb.err != nil {
		return nil, mrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MemberRole, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MemberRoleCreateBulk) SaveX(ctx context.Context) []*MemberRole {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *MemberRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *MemberRoleCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
