// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/sourcedata"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SourceDataUpdate is the builder for updating SourceData entities.
type SourceDataUpdate struct {
	config
	hooks    []Hook
	mutation *SourceDataMutation
}

// Where appends a list predicates to the SourceDataUpdate builder.
func (sdu *SourceDataUpdate) Where(ps ...predicate.SourceData) *SourceDataUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetUserID sets the "user_id" field.
func (sdu *SourceDataUpdate) SetUserID(i int64) *SourceDataUpdate {
	sdu.mutation.ResetUserID()
	sdu.mutation.SetUserID(i)
	return sdu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sdu *SourceDataUpdate) SetNillableUserID(i *int64) *SourceDataUpdate {
	if i != nil {
		sdu.SetUserID(*i)
	}
	return sdu
}

// AddUserID adds i to the "user_id" field.
func (sdu *SourceDataUpdate) AddUserID(i int64) *SourceDataUpdate {
	sdu.mutation.AddUserID(i)
	return sdu
}

// SetType sets the "type" field.
func (sdu *SourceDataUpdate) SetType(s string) *SourceDataUpdate {
	sdu.mutation.SetType(s)
	return sdu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sdu *SourceDataUpdate) SetNillableType(s *string) *SourceDataUpdate {
	if s != nil {
		sdu.SetType(*s)
	}
	return sdu
}

// SetSubType sets the "sub_type" field.
func (sdu *SourceDataUpdate) SetSubType(s string) *SourceDataUpdate {
	sdu.mutation.SetSubType(s)
	return sdu
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (sdu *SourceDataUpdate) SetNillableSubType(s *string) *SourceDataUpdate {
	if s != nil {
		sdu.SetSubType(*s)
	}
	return sdu
}

// SetInfo sets the "info" field.
func (sdu *SourceDataUpdate) SetInfo(s string) *SourceDataUpdate {
	sdu.mutation.SetInfo(s)
	return sdu
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (sdu *SourceDataUpdate) SetNillableInfo(s *string) *SourceDataUpdate {
	if s != nil {
		sdu.SetInfo(*s)
	}
	return sdu
}

// SetSnapshot sets the "snapshot" field.
func (sdu *SourceDataUpdate) SetSnapshot(s string) *SourceDataUpdate {
	sdu.mutation.SetSnapshot(s)
	return sdu
}

// SetNillableSnapshot sets the "snapshot" field if the given value is not nil.
func (sdu *SourceDataUpdate) SetNillableSnapshot(s *string) *SourceDataUpdate {
	if s != nil {
		sdu.SetSnapshot(*s)
	}
	return sdu
}

// SetUpdateTime sets the "update_time" field.
func (sdu *SourceDataUpdate) SetUpdateTime(t time.Time) *SourceDataUpdate {
	sdu.mutation.SetUpdateTime(t)
	return sdu
}

// Mutation returns the SourceDataMutation object of the builder.
func (sdu *SourceDataUpdate) Mutation() *SourceDataMutation {
	return sdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SourceDataUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SourceDataUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SourceDataUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SourceDataUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SourceDataUpdate) defaults() {
	if _, ok := sdu.mutation.UpdateTime(); !ok {
		v := sourcedata.UpdateDefaultUpdateTime()
		sdu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *SourceDataUpdate) check() error {
	if v, ok := sdu.mutation.GetType(); ok {
		if err := sourcedata.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`models: validator failed for field "SourceData.type": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.SubType(); ok {
		if err := sourcedata.SubTypeValidator(v); err != nil {
			return &ValidationError{Name: "sub_type", err: fmt.Errorf(`models: validator failed for field "SourceData.sub_type": %w`, err)}
		}
	}
	return nil
}

func (sdu *SourceDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sourcedata.Table, sourcedata.Columns, sqlgraph.NewFieldSpec(sourcedata.FieldID, field.TypeInt64))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.UserID(); ok {
		_spec.SetField(sourcedata.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedUserID(); ok {
		_spec.AddField(sourcedata.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.GetType(); ok {
		_spec.SetField(sourcedata.FieldType, field.TypeString, value)
	}
	if value, ok := sdu.mutation.SubType(); ok {
		_spec.SetField(sourcedata.FieldSubType, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Info(); ok {
		_spec.SetField(sourcedata.FieldInfo, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Snapshot(); ok {
		_spec.SetField(sourcedata.FieldSnapshot, field.TypeString, value)
	}
	if value, ok := sdu.mutation.UpdateTime(); ok {
		_spec.SetField(sourcedata.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SourceDataUpdateOne is the builder for updating a single SourceData entity.
type SourceDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceDataMutation
}

// SetUserID sets the "user_id" field.
func (sduo *SourceDataUpdateOne) SetUserID(i int64) *SourceDataUpdateOne {
	sduo.mutation.ResetUserID()
	sduo.mutation.SetUserID(i)
	return sduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sduo *SourceDataUpdateOne) SetNillableUserID(i *int64) *SourceDataUpdateOne {
	if i != nil {
		sduo.SetUserID(*i)
	}
	return sduo
}

// AddUserID adds i to the "user_id" field.
func (sduo *SourceDataUpdateOne) AddUserID(i int64) *SourceDataUpdateOne {
	sduo.mutation.AddUserID(i)
	return sduo
}

// SetType sets the "type" field.
func (sduo *SourceDataUpdateOne) SetType(s string) *SourceDataUpdateOne {
	sduo.mutation.SetType(s)
	return sduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sduo *SourceDataUpdateOne) SetNillableType(s *string) *SourceDataUpdateOne {
	if s != nil {
		sduo.SetType(*s)
	}
	return sduo
}

// SetSubType sets the "sub_type" field.
func (sduo *SourceDataUpdateOne) SetSubType(s string) *SourceDataUpdateOne {
	sduo.mutation.SetSubType(s)
	return sduo
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (sduo *SourceDataUpdateOne) SetNillableSubType(s *string) *SourceDataUpdateOne {
	if s != nil {
		sduo.SetSubType(*s)
	}
	return sduo
}

// SetInfo sets the "info" field.
func (sduo *SourceDataUpdateOne) SetInfo(s string) *SourceDataUpdateOne {
	sduo.mutation.SetInfo(s)
	return sduo
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (sduo *SourceDataUpdateOne) SetNillableInfo(s *string) *SourceDataUpdateOne {
	if s != nil {
		sduo.SetInfo(*s)
	}
	return sduo
}

// SetSnapshot sets the "snapshot" field.
func (sduo *SourceDataUpdateOne) SetSnapshot(s string) *SourceDataUpdateOne {
	sduo.mutation.SetSnapshot(s)
	return sduo
}

// SetNillableSnapshot sets the "snapshot" field if the given value is not nil.
func (sduo *SourceDataUpdateOne) SetNillableSnapshot(s *string) *SourceDataUpdateOne {
	if s != nil {
		sduo.SetSnapshot(*s)
	}
	return sduo
}

// SetUpdateTime sets the "update_time" field.
func (sduo *SourceDataUpdateOne) SetUpdateTime(t time.Time) *SourceDataUpdateOne {
	sduo.mutation.SetUpdateTime(t)
	return sduo
}

// Mutation returns the SourceDataMutation object of the builder.
func (sduo *SourceDataUpdateOne) Mutation() *SourceDataMutation {
	return sduo.mutation
}

// Where appends a list predicates to the SourceDataUpdate builder.
func (sduo *SourceDataUpdateOne) Where(ps ...predicate.SourceData) *SourceDataUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SourceDataUpdateOne) Select(field string, fields ...string) *SourceDataUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SourceData entity.
func (sduo *SourceDataUpdateOne) Save(ctx context.Context) (*SourceData, error) {
	sduo.defaults()
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SourceDataUpdateOne) SaveX(ctx context.Context) *SourceData {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SourceDataUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SourceDataUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SourceDataUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdateTime(); !ok {
		v := sourcedata.UpdateDefaultUpdateTime()
		sduo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *SourceDataUpdateOne) check() error {
	if v, ok := sduo.mutation.GetType(); ok {
		if err := sourcedata.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`models: validator failed for field "SourceData.type": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.SubType(); ok {
		if err := sourcedata.SubTypeValidator(v); err != nil {
			return &ValidationError{Name: "sub_type", err: fmt.Errorf(`models: validator failed for field "SourceData.sub_type": %w`, err)}
		}
	}
	return nil
}

func (sduo *SourceDataUpdateOne) sqlSave(ctx context.Context) (_node *SourceData, err error) {
	if err := sduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sourcedata.Table, sourcedata.Columns, sqlgraph.NewFieldSpec(sourcedata.FieldID, field.TypeInt64))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "SourceData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sourcedata.FieldID)
		for _, f := range fields {
			if !sourcedata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != sourcedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.UserID(); ok {
		_spec.SetField(sourcedata.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedUserID(); ok {
		_spec.AddField(sourcedata.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.GetType(); ok {
		_spec.SetField(sourcedata.FieldType, field.TypeString, value)
	}
	if value, ok := sduo.mutation.SubType(); ok {
		_spec.SetField(sourcedata.FieldSubType, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Info(); ok {
		_spec.SetField(sourcedata.FieldInfo, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Snapshot(); ok {
		_spec.SetField(sourcedata.FieldSnapshot, field.TypeString, value)
	}
	if value, ok := sduo.mutation.UpdateTime(); ok {
		_spec.SetField(sourcedata.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &SourceData{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
