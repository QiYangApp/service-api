// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/accesstoken"
	"ent/utils/timeutil"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccessTokenCreate is the builder for creating a AccessToken entity.
type AccessTokenCreate struct {
	config
	mutation *AccessTokenMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (atc *AccessTokenCreate) SetUserID(i int) *AccessTokenCreate {
	atc.mutation.SetUserID(i)
	return atc
}

// SetName sets the "name" field.
func (atc *AccessTokenCreate) SetName(s string) *AccessTokenCreate {
	atc.mutation.SetName(s)
	return atc
}

// SetToken sets the "token" field.
func (atc *AccessTokenCreate) SetToken(s string) *AccessTokenCreate {
	atc.mutation.SetToken(s)
	return atc
}

// SetTokenHash sets the "token_hash" field.
func (atc *AccessTokenCreate) SetTokenHash(s string) *AccessTokenCreate {
	atc.mutation.SetTokenHash(s)
	return atc
}

// SetTokenSalt sets the "token_salt" field.
func (atc *AccessTokenCreate) SetTokenSalt(s string) *AccessTokenCreate {
	atc.mutation.SetTokenSalt(s)
	return atc
}

// SetTokenLastEight sets the "token_last_eight" field.
func (atc *AccessTokenCreate) SetTokenLastEight(s string) *AccessTokenCreate {
	atc.mutation.SetTokenLastEight(s)
	return atc
}

// SetScope sets the "scope" field.
func (atc *AccessTokenCreate) SetScope(s string) *AccessTokenCreate {
	atc.mutation.SetScope(s)
	return atc
}

// SetHasRecentActivity sets the "has_recent_activity" field.
func (atc *AccessTokenCreate) SetHasRecentActivity(s string) *AccessTokenCreate {
	atc.mutation.SetHasRecentActivity(s)
	return atc
}

// SetHasUsed sets the "has_used" field.
func (atc *AccessTokenCreate) SetHasUsed(s string) *AccessTokenCreate {
	atc.mutation.SetHasUsed(s)
	return atc
}

// SetCreateTime sets the "create_time" field.
func (atc *AccessTokenCreate) SetCreateTime(ts timeutil.TimeStamp) *AccessTokenCreate {
	atc.mutation.SetCreateTime(ts)
	return atc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableCreateTime(ts *timeutil.TimeStamp) *AccessTokenCreate {
	if ts != nil {
		atc.SetCreateTime(*ts)
	}
	return atc
}

// SetUpdateTime sets the "update_time" field.
func (atc *AccessTokenCreate) SetUpdateTime(ts timeutil.TimeStamp) *AccessTokenCreate {
	atc.mutation.SetUpdateTime(ts)
	return atc
}

// SetID sets the "id" field.
func (atc *AccessTokenCreate) SetID(i int64) *AccessTokenCreate {
	atc.mutation.SetID(i)
	return atc
}

// Mutation returns the AccessTokenMutation object of the builder.
func (atc *AccessTokenCreate) Mutation() *AccessTokenMutation {
	return atc.mutation
}

// Save creates the AccessToken in the database.
func (atc *AccessTokenCreate) Save(ctx context.Context) (*AccessToken, error) {
	atc.defaults()
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AccessTokenCreate) SaveX(ctx context.Context) *AccessToken {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AccessTokenCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AccessTokenCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AccessTokenCreate) defaults() {
	if _, ok := atc.mutation.CreateTime(); !ok {
		v := accesstoken.DefaultCreateTime
		atc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AccessTokenCreate) check() error {
	if _, ok := atc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`models: missing required field "AccessToken.user_id"`)}
	}
	if _, ok := atc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`models: missing required field "AccessToken.name"`)}
	}
	if _, ok := atc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`models: missing required field "AccessToken.token"`)}
	}
	if _, ok := atc.mutation.TokenHash(); !ok {
		return &ValidationError{Name: "token_hash", err: errors.New(`models: missing required field "AccessToken.token_hash"`)}
	}
	if _, ok := atc.mutation.TokenSalt(); !ok {
		return &ValidationError{Name: "token_salt", err: errors.New(`models: missing required field "AccessToken.token_salt"`)}
	}
	if _, ok := atc.mutation.TokenLastEight(); !ok {
		return &ValidationError{Name: "token_last_eight", err: errors.New(`models: missing required field "AccessToken.token_last_eight"`)}
	}
	if _, ok := atc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`models: missing required field "AccessToken.scope"`)}
	}
	if _, ok := atc.mutation.HasRecentActivity(); !ok {
		return &ValidationError{Name: "has_recent_activity", err: errors.New(`models: missing required field "AccessToken.has_recent_activity"`)}
	}
	if _, ok := atc.mutation.HasUsed(); !ok {
		return &ValidationError{Name: "has_used", err: errors.New(`models: missing required field "AccessToken.has_used"`)}
	}
	if _, ok := atc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`models: missing required field "AccessToken.create_time"`)}
	}
	if _, ok := atc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`models: missing required field "AccessToken.update_time"`)}
	}
	return nil
}

func (atc *AccessTokenCreate) sqlSave(ctx context.Context) (*AccessToken, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *AccessTokenCreate) createSpec() (*AccessToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessToken{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(accesstoken.Table, sqlgraph.NewFieldSpec(accesstoken.FieldID, field.TypeInt64))
	)
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := atc.mutation.UserID(); ok {
		_spec.SetField(accesstoken.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := atc.mutation.Name(); ok {
		_spec.SetField(accesstoken.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := atc.mutation.Token(); ok {
		_spec.SetField(accesstoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := atc.mutation.TokenHash(); ok {
		_spec.SetField(accesstoken.FieldTokenHash, field.TypeString, value)
		_node.TokenHash = value
	}
	if value, ok := atc.mutation.TokenSalt(); ok {
		_spec.SetField(accesstoken.FieldTokenSalt, field.TypeString, value)
		_node.TokenSalt = value
	}
	if value, ok := atc.mutation.TokenLastEight(); ok {
		_spec.SetField(accesstoken.FieldTokenLastEight, field.TypeString, value)
		_node.TokenLastEight = value
	}
	if value, ok := atc.mutation.Scope(); ok {
		_spec.SetField(accesstoken.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := atc.mutation.HasRecentActivity(); ok {
		_spec.SetField(accesstoken.FieldHasRecentActivity, field.TypeString, value)
		_node.HasRecentActivity = value
	}
	if value, ok := atc.mutation.HasUsed(); ok {
		_spec.SetField(accesstoken.FieldHasUsed, field.TypeString, value)
		_node.HasUsed = value
	}
	if value, ok := atc.mutation.CreateTime(); ok {
		_spec.SetField(accesstoken.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = value
	}
	if value, ok := atc.mutation.UpdateTime(); ok {
		_spec.SetField(accesstoken.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AccessTokenCreateBulk is the builder for creating many AccessToken entities in bulk.
type AccessTokenCreateBulk struct {
	config
	err      error
	builders []*AccessTokenCreate
}

// Save creates the AccessToken entities in the database.
func (atcb *AccessTokenCreateBulk) Save(ctx context.Context) ([]*AccessToken, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AccessToken, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AccessTokenCreateBulk) SaveX(ctx context.Context) []*AccessToken {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AccessTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AccessTokenCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
