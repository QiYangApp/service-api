// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/models/twofactor"
	"ent/utils/timeutil"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TwoFactor is the model entity for the TwoFactor schema.
type TwoFactor struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// ScratchSalt holds the value of the "scratch_salt" field.
	ScratchSalt string `json:"scratch_salt,omitempty"`
	// ScratchHash holds the value of the "scratch_hash" field.
	ScratchHash string `json:"scratch_hash,omitempty"`
	// LastUsedPasscode holds the value of the "last_used_passcode" field.
	LastUsedPasscode string `json:"last_used_passcode,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime timeutil.TimeStamp `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   timeutil.TimeStamp `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TwoFactor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case twofactor.FieldID, twofactor.FieldUserID, twofactor.FieldCreateTime, twofactor.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case twofactor.FieldSecret, twofactor.FieldScratchSalt, twofactor.FieldScratchHash, twofactor.FieldLastUsedPasscode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TwoFactor fields.
func (tf *TwoFactor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case twofactor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tf.ID = int64(value.Int64)
		case twofactor.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tf.UserID = value.Int64
			}
		case twofactor.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				tf.Secret = value.String
			}
		case twofactor.FieldScratchSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scratch_salt", values[i])
			} else if value.Valid {
				tf.ScratchSalt = value.String
			}
		case twofactor.FieldScratchHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scratch_hash", values[i])
			} else if value.Valid {
				tf.ScratchHash = value.String
			}
		case twofactor.FieldLastUsedPasscode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_passcode", values[i])
			} else if value.Valid {
				tf.LastUsedPasscode = value.String
			}
		case twofactor.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				tf.CreateTime = timeutil.TimeStamp(value.Int64)
			}
		case twofactor.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				tf.UpdateTime = timeutil.TimeStamp(value.Int64)
			}
		default:
			tf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TwoFactor.
// This includes values selected through modifiers, order, etc.
func (tf *TwoFactor) Value(name string) (ent.Value, error) {
	return tf.selectValues.Get(name)
}

// Update returns a builder for updating this TwoFactor.
// Note that you need to call TwoFactor.Unwrap() before calling this method if this TwoFactor
// was returned from a transaction, and the transaction was committed or rolled back.
func (tf *TwoFactor) Update() *TwoFactorUpdateOne {
	return NewTwoFactorClient(tf.config).UpdateOne(tf)
}

// Unwrap unwraps the TwoFactor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tf *TwoFactor) Unwrap() *TwoFactor {
	_tx, ok := tf.config.driver.(*txDriver)
	if !ok {
		panic("models: TwoFactor is not a transactional entity")
	}
	tf.config.driver = _tx.drv
	return tf
}

// String implements the fmt.Stringer.
func (tf *TwoFactor) String() string {
	var builder strings.Builder
	builder.WriteString("TwoFactor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tf.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", tf.UserID))
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(tf.Secret)
	builder.WriteString(", ")
	builder.WriteString("scratch_salt=")
	builder.WriteString(tf.ScratchSalt)
	builder.WriteString(", ")
	builder.WriteString("scratch_hash=")
	builder.WriteString(tf.ScratchHash)
	builder.WriteString(", ")
	builder.WriteString("last_used_passcode=")
	builder.WriteString(tf.LastUsedPasscode)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", tf.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", tf.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// TwoFactors is a parsable slice of TwoFactor.
type TwoFactors []*TwoFactor
