// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/accesstoken"
	"ent/models/accounts"
	"ent/models/memberrolerelatedpermission"
	"ent/models/permissiongroup"
	"ent/models/permissionrelatedrouter"
	"ent/models/router"
	"ent/models/source"
	"ent/models/sourcedata"
	"ent/models/user"
	"ent/models/userauthsource"
	"ent/models/userrelatedrole"
	"ent/models/userrole"
	"ent/models/wakatime"
	"ent/models/wakatimecategory"
	"ent/models/wakatimedependency"
	"ent/models/wakatimeduration"
	"ent/models/wakatimeeditor"
	"ent/models/wakatimeentity"
	"ent/models/wakatimegrandtotal"
	"ent/models/wakatimeheartbeat"
	"ent/models/wakatimelanguage"
	"ent/models/wakatimeproject"
	"ent/models/wakatimeprojectduration"
	"ent/models/wakatimeprojectinfo"
	"ent/models/wakatimesystem"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	IsNode()
}

// IsNode implements the Node interface check for GQLGen.
func (n *AccessToken) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Accounts) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *MemberRoleRelatedPermission) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PermissionGroup) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *PermissionRelatedRouter) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Router) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Source) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *SourceData) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *User) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *UserAuthSource) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *UserRelatedRole) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *UserRole) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *Wakatime) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeCategory) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeDependency) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeDuration) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeEditor) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeEntity) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeGrandTotal) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeHeartBeat) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeLanguage) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeProject) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeProjectDuration) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeProjectInfo) IsNode() {}

// IsNode implements the Node interface check for GQLGen.
func (n *WakatimeSystem) IsNode() {}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int64) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int64) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int64) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int64) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id int64, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int64) (Noder, error) {
	switch table {
	case accesstoken.Table:
		query := c.AccessToken.Query().
			Where(accesstoken.ID(id))
		query, err := query.CollectFields(ctx, "AccessToken")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case accounts.Table:
		query := c.Accounts.Query().
			Where(accounts.ID(id))
		query, err := query.CollectFields(ctx, "Accounts")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case memberrolerelatedpermission.Table:
		query := c.MemberRoleRelatedPermission.Query().
			Where(memberrolerelatedpermission.ID(id))
		query, err := query.CollectFields(ctx, "MemberRoleRelatedPermission")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case permissiongroup.Table:
		query := c.PermissionGroup.Query().
			Where(permissiongroup.ID(id))
		query, err := query.CollectFields(ctx, "PermissionGroup")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case permissionrelatedrouter.Table:
		query := c.PermissionRelatedRouter.Query().
			Where(permissionrelatedrouter.ID(id))
		query, err := query.CollectFields(ctx, "PermissionRelatedRouter")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case router.Table:
		query := c.Router.Query().
			Where(router.ID(id))
		query, err := query.CollectFields(ctx, "Router")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case source.Table:
		query := c.Source.Query().
			Where(source.ID(id))
		query, err := query.CollectFields(ctx, "Source")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case sourcedata.Table:
		query := c.SourceData.Query().
			Where(sourcedata.ID(id))
		query, err := query.CollectFields(ctx, "SourceData")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		query := c.User.Query().
			Where(user.ID(id))
		query, err := query.CollectFields(ctx, "User")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case userauthsource.Table:
		query := c.UserAuthSource.Query().
			Where(userauthsource.ID(id))
		query, err := query.CollectFields(ctx, "UserAuthSource")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case userrelatedrole.Table:
		query := c.UserRelatedRole.Query().
			Where(userrelatedrole.ID(id))
		query, err := query.CollectFields(ctx, "UserRelatedRole")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case userrole.Table:
		query := c.UserRole.Query().
			Where(userrole.ID(id))
		query, err := query.CollectFields(ctx, "UserRole")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatime.Table:
		query := c.Wakatime.Query().
			Where(wakatime.ID(id))
		query, err := query.CollectFields(ctx, "Wakatime")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimecategory.Table:
		query := c.WakatimeCategory.Query().
			Where(wakatimecategory.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeCategory")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimedependency.Table:
		query := c.WakatimeDependency.Query().
			Where(wakatimedependency.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeDependency")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimeduration.Table:
		query := c.WakatimeDuration.Query().
			Where(wakatimeduration.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeDuration")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimeeditor.Table:
		query := c.WakatimeEditor.Query().
			Where(wakatimeeditor.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeEditor")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimeentity.Table:
		query := c.WakatimeEntity.Query().
			Where(wakatimeentity.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeEntity")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimegrandtotal.Table:
		query := c.WakatimeGrandTotal.Query().
			Where(wakatimegrandtotal.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeGrandTotal")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimeheartbeat.Table:
		query := c.WakatimeHeartBeat.Query().
			Where(wakatimeheartbeat.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeHeartBeat")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimelanguage.Table:
		query := c.WakatimeLanguage.Query().
			Where(wakatimelanguage.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeLanguage")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimeproject.Table:
		query := c.WakatimeProject.Query().
			Where(wakatimeproject.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeProject")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimeprojectduration.Table:
		query := c.WakatimeProjectDuration.Query().
			Where(wakatimeprojectduration.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeProjectDuration")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimeprojectinfo.Table:
		query := c.WakatimeProjectInfo.Query().
			Where(wakatimeprojectinfo.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeProjectInfo")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case wakatimesystem.Table:
		query := c.WakatimeSystem.Query().
			Where(wakatimesystem.ID(id))
		query, err := query.CollectFields(ctx, "WakatimeSystem")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int64, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int64)
	id2idx := make(map[int64][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int64) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int64][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case accesstoken.Table:
		query := c.AccessToken.Query().
			Where(accesstoken.IDIn(ids...))
		query, err := query.CollectFields(ctx, "AccessToken")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case accounts.Table:
		query := c.Accounts.Query().
			Where(accounts.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Accounts")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case memberrolerelatedpermission.Table:
		query := c.MemberRoleRelatedPermission.Query().
			Where(memberrolerelatedpermission.IDIn(ids...))
		query, err := query.CollectFields(ctx, "MemberRoleRelatedPermission")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case permissiongroup.Table:
		query := c.PermissionGroup.Query().
			Where(permissiongroup.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PermissionGroup")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case permissionrelatedrouter.Table:
		query := c.PermissionRelatedRouter.Query().
			Where(permissionrelatedrouter.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PermissionRelatedRouter")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case router.Table:
		query := c.Router.Query().
			Where(router.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Router")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case source.Table:
		query := c.Source.Query().
			Where(source.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Source")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case sourcedata.Table:
		query := c.SourceData.Query().
			Where(sourcedata.IDIn(ids...))
		query, err := query.CollectFields(ctx, "SourceData")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		query := c.User.Query().
			Where(user.IDIn(ids...))
		query, err := query.CollectFields(ctx, "User")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case userauthsource.Table:
		query := c.UserAuthSource.Query().
			Where(userauthsource.IDIn(ids...))
		query, err := query.CollectFields(ctx, "UserAuthSource")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case userrelatedrole.Table:
		query := c.UserRelatedRole.Query().
			Where(userrelatedrole.IDIn(ids...))
		query, err := query.CollectFields(ctx, "UserRelatedRole")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case userrole.Table:
		query := c.UserRole.Query().
			Where(userrole.IDIn(ids...))
		query, err := query.CollectFields(ctx, "UserRole")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatime.Table:
		query := c.Wakatime.Query().
			Where(wakatime.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Wakatime")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimecategory.Table:
		query := c.WakatimeCategory.Query().
			Where(wakatimecategory.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeCategory")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimedependency.Table:
		query := c.WakatimeDependency.Query().
			Where(wakatimedependency.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeDependency")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimeduration.Table:
		query := c.WakatimeDuration.Query().
			Where(wakatimeduration.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeDuration")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimeeditor.Table:
		query := c.WakatimeEditor.Query().
			Where(wakatimeeditor.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeEditor")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimeentity.Table:
		query := c.WakatimeEntity.Query().
			Where(wakatimeentity.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeEntity")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimegrandtotal.Table:
		query := c.WakatimeGrandTotal.Query().
			Where(wakatimegrandtotal.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeGrandTotal")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimeheartbeat.Table:
		query := c.WakatimeHeartBeat.Query().
			Where(wakatimeheartbeat.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeHeartBeat")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimelanguage.Table:
		query := c.WakatimeLanguage.Query().
			Where(wakatimelanguage.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeLanguage")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimeproject.Table:
		query := c.WakatimeProject.Query().
			Where(wakatimeproject.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeProject")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimeprojectduration.Table:
		query := c.WakatimeProjectDuration.Query().
			Where(wakatimeprojectduration.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeProjectDuration")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimeprojectinfo.Table:
		query := c.WakatimeProjectInfo.Query().
			Where(wakatimeprojectinfo.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeProjectInfo")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case wakatimesystem.Table:
		query := c.WakatimeSystem.Query().
			Where(wakatimesystem.IDIn(ids...))
		query, err := query.CollectFields(ctx, "WakatimeSystem")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int64) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
