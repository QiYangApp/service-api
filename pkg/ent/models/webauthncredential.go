// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/models/webauthncredential"
	"ent/utils/timeutil"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WebAuthnCredential is the model entity for the WebAuthnCredential schema.
type WebAuthnCredential struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LowerName holds the value of the "lower_name" field.
	LowerName string `json:"lower_name,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// CredentialID holds the value of the "credential_id" field.
	CredentialID []byte `json:"credential_id,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey []byte `json:"public_key,omitempty"`
	// AttestationType holds the value of the "attestation_type" field.
	AttestationType string `json:"attestation_type,omitempty"`
	// AAGUID holds the value of the "AAGUID" field.
	AAGUID []byte `json:"AAGUID,omitempty"`
	// SignCount holds the value of the "sign_count" field.
	SignCount uint32 `json:"sign_count,omitempty"`
	// CloneWarning holds the value of the "clone_warning" field.
	CloneWarning bool `json:"clone_warning,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime timeutil.TimeStamp `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   timeutil.TimeStamp `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebAuthnCredential) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webauthncredential.FieldCredentialID, webauthncredential.FieldPublicKey, webauthncredential.FieldAAGUID:
			values[i] = new([]byte)
		case webauthncredential.FieldCloneWarning:
			values[i] = new(sql.NullBool)
		case webauthncredential.FieldID, webauthncredential.FieldUserID, webauthncredential.FieldSignCount, webauthncredential.FieldCreateTime, webauthncredential.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case webauthncredential.FieldName, webauthncredential.FieldLowerName, webauthncredential.FieldAttestationType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebAuthnCredential fields.
func (wac *WebAuthnCredential) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webauthncredential.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wac.ID = int64(value.Int64)
		case webauthncredential.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wac.Name = value.String
			}
		case webauthncredential.FieldLowerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lower_name", values[i])
			} else if value.Valid {
				wac.LowerName = value.String
			}
		case webauthncredential.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				wac.UserID = value.Int64
			}
		case webauthncredential.FieldCredentialID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field credential_id", values[i])
			} else if value != nil {
				wac.CredentialID = *value
			}
		case webauthncredential.FieldPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value != nil {
				wac.PublicKey = *value
			}
		case webauthncredential.FieldAttestationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attestation_type", values[i])
			} else if value.Valid {
				wac.AttestationType = value.String
			}
		case webauthncredential.FieldAAGUID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field AAGUID", values[i])
			} else if value != nil {
				wac.AAGUID = *value
			}
		case webauthncredential.FieldSignCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sign_count", values[i])
			} else if value.Valid {
				wac.SignCount = uint32(value.Int64)
			}
		case webauthncredential.FieldCloneWarning:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field clone_warning", values[i])
			} else if value.Valid {
				wac.CloneWarning = value.Bool
			}
		case webauthncredential.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				wac.CreateTime = timeutil.TimeStamp(value.Int64)
			}
		case webauthncredential.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				wac.UpdateTime = timeutil.TimeStamp(value.Int64)
			}
		default:
			wac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WebAuthnCredential.
// This includes values selected through modifiers, order, etc.
func (wac *WebAuthnCredential) Value(name string) (ent.Value, error) {
	return wac.selectValues.Get(name)
}

// Update returns a builder for updating this WebAuthnCredential.
// Note that you need to call WebAuthnCredential.Unwrap() before calling this method if this WebAuthnCredential
// was returned from a transaction, and the transaction was committed or rolled back.
func (wac *WebAuthnCredential) Update() *WebAuthnCredentialUpdateOne {
	return NewWebAuthnCredentialClient(wac.config).UpdateOne(wac)
}

// Unwrap unwraps the WebAuthnCredential entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wac *WebAuthnCredential) Unwrap() *WebAuthnCredential {
	_tx, ok := wac.config.driver.(*txDriver)
	if !ok {
		panic("models: WebAuthnCredential is not a transactional entity")
	}
	wac.config.driver = _tx.drv
	return wac
}

// String implements the fmt.Stringer.
func (wac *WebAuthnCredential) String() string {
	var builder strings.Builder
	builder.WriteString("WebAuthnCredential(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wac.ID))
	builder.WriteString("name=")
	builder.WriteString(wac.Name)
	builder.WriteString(", ")
	builder.WriteString("lower_name=")
	builder.WriteString(wac.LowerName)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", wac.UserID))
	builder.WriteString(", ")
	builder.WriteString("credential_id=")
	builder.WriteString(fmt.Sprintf("%v", wac.CredentialID))
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(fmt.Sprintf("%v", wac.PublicKey))
	builder.WriteString(", ")
	builder.WriteString("attestation_type=")
	builder.WriteString(wac.AttestationType)
	builder.WriteString(", ")
	builder.WriteString("AAGUID=")
	builder.WriteString(fmt.Sprintf("%v", wac.AAGUID))
	builder.WriteString(", ")
	builder.WriteString("sign_count=")
	builder.WriteString(fmt.Sprintf("%v", wac.SignCount))
	builder.WriteString(", ")
	builder.WriteString("clone_warning=")
	builder.WriteString(fmt.Sprintf("%v", wac.CloneWarning))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", wac.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", wac.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// WebAuthnCredentials is a parsable slice of WebAuthnCredential.
type WebAuthnCredentials []*WebAuthnCredential
