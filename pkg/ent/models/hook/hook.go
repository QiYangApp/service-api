// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"ent/models"
	"fmt"
)

// The AccessTokenFunc type is an adapter to allow the use of ordinary
// function as AccessToken mutator.
type AccessTokenFunc func(context.Context, *models.AccessTokenMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f AccessTokenFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.AccessTokenMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.AccessTokenMutation", m)
}

// The AccountsFunc type is an adapter to allow the use of ordinary
// function as Accounts mutator.
type AccountsFunc func(context.Context, *models.AccountsMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f AccountsFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.AccountsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.AccountsMutation", m)
}

// The MemberRoleRelatedPermissionFunc type is an adapter to allow the use of ordinary
// function as MemberRoleRelatedPermission mutator.
type MemberRoleRelatedPermissionFunc func(context.Context, *models.MemberRoleRelatedPermissionMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f MemberRoleRelatedPermissionFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.MemberRoleRelatedPermissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.MemberRoleRelatedPermissionMutation", m)
}

// The PermissionGroupFunc type is an adapter to allow the use of ordinary
// function as PermissionGroup mutator.
type PermissionGroupFunc func(context.Context, *models.PermissionGroupMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionGroupFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.PermissionGroupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.PermissionGroupMutation", m)
}

// The PermissionRelatedRouterFunc type is an adapter to allow the use of ordinary
// function as PermissionRelatedRouter mutator.
type PermissionRelatedRouterFunc func(context.Context, *models.PermissionRelatedRouterMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionRelatedRouterFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.PermissionRelatedRouterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.PermissionRelatedRouterMutation", m)
}

// The RouterFunc type is an adapter to allow the use of ordinary
// function as Router mutator.
type RouterFunc func(context.Context, *models.RouterMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f RouterFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.RouterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.RouterMutation", m)
}

// The SourceFunc type is an adapter to allow the use of ordinary
// function as Source mutator.
type SourceFunc func(context.Context, *models.SourceMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f SourceFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.SourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.SourceMutation", m)
}

// The SourceDataFunc type is an adapter to allow the use of ordinary
// function as SourceData mutator.
type SourceDataFunc func(context.Context, *models.SourceDataMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f SourceDataFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.SourceDataMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.SourceDataMutation", m)
}

// The TwoFactorFunc type is an adapter to allow the use of ordinary
// function as TwoFactor mutator.
type TwoFactorFunc func(context.Context, *models.TwoFactorMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f TwoFactorFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.TwoFactorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.TwoFactorMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *models.UserMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.UserMutation", m)
}

// The UserAuthSourceFunc type is an adapter to allow the use of ordinary
// function as UserAuthSource mutator.
type UserAuthSourceFunc func(context.Context, *models.UserAuthSourceMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f UserAuthSourceFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.UserAuthSourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.UserAuthSourceMutation", m)
}

// The UserRelatedRoleFunc type is an adapter to allow the use of ordinary
// function as UserRelatedRole mutator.
type UserRelatedRoleFunc func(context.Context, *models.UserRelatedRoleMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f UserRelatedRoleFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.UserRelatedRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.UserRelatedRoleMutation", m)
}

// The UserRoleFunc type is an adapter to allow the use of ordinary
// function as UserRole mutator.
type UserRoleFunc func(context.Context, *models.UserRoleMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f UserRoleFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.UserRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.UserRoleMutation", m)
}

// The WakatimeFunc type is an adapter to allow the use of ordinary
// function as Wakatime mutator.
type WakatimeFunc func(context.Context, *models.WakatimeMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeMutation", m)
}

// The WakatimeCategoryFunc type is an adapter to allow the use of ordinary
// function as WakatimeCategory mutator.
type WakatimeCategoryFunc func(context.Context, *models.WakatimeCategoryMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeCategoryFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeCategoryMutation", m)
}

// The WakatimeDependencyFunc type is an adapter to allow the use of ordinary
// function as WakatimeDependency mutator.
type WakatimeDependencyFunc func(context.Context, *models.WakatimeDependencyMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeDependencyFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeDependencyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeDependencyMutation", m)
}

// The WakatimeDurationFunc type is an adapter to allow the use of ordinary
// function as WakatimeDuration mutator.
type WakatimeDurationFunc func(context.Context, *models.WakatimeDurationMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeDurationFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeDurationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeDurationMutation", m)
}

// The WakatimeEditorFunc type is an adapter to allow the use of ordinary
// function as WakatimeEditor mutator.
type WakatimeEditorFunc func(context.Context, *models.WakatimeEditorMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeEditorFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeEditorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeEditorMutation", m)
}

// The WakatimeEntityFunc type is an adapter to allow the use of ordinary
// function as WakatimeEntity mutator.
type WakatimeEntityFunc func(context.Context, *models.WakatimeEntityMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeEntityFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeEntityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeEntityMutation", m)
}

// The WakatimeGrandTotalFunc type is an adapter to allow the use of ordinary
// function as WakatimeGrandTotal mutator.
type WakatimeGrandTotalFunc func(context.Context, *models.WakatimeGrandTotalMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeGrandTotalFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeGrandTotalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeGrandTotalMutation", m)
}

// The WakatimeHeartBeatFunc type is an adapter to allow the use of ordinary
// function as WakatimeHeartBeat mutator.
type WakatimeHeartBeatFunc func(context.Context, *models.WakatimeHeartBeatMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeHeartBeatFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeHeartBeatMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeHeartBeatMutation", m)
}

// The WakatimeLanguageFunc type is an adapter to allow the use of ordinary
// function as WakatimeLanguage mutator.
type WakatimeLanguageFunc func(context.Context, *models.WakatimeLanguageMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeLanguageFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeLanguageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeLanguageMutation", m)
}

// The WakatimeProjectFunc type is an adapter to allow the use of ordinary
// function as WakatimeProject mutator.
type WakatimeProjectFunc func(context.Context, *models.WakatimeProjectMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeProjectFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeProjectMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeProjectMutation", m)
}

// The WakatimeProjectDurationFunc type is an adapter to allow the use of ordinary
// function as WakatimeProjectDuration mutator.
type WakatimeProjectDurationFunc func(context.Context, *models.WakatimeProjectDurationMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeProjectDurationFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeProjectDurationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeProjectDurationMutation", m)
}

// The WakatimeProjectInfoFunc type is an adapter to allow the use of ordinary
// function as WakatimeProjectInfo mutator.
type WakatimeProjectInfoFunc func(context.Context, *models.WakatimeProjectInfoMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeProjectInfoFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeProjectInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeProjectInfoMutation", m)
}

// The WakatimeSystemFunc type is an adapter to allow the use of ordinary
// function as WakatimeSystem mutator.
type WakatimeSystemFunc func(context.Context, *models.WakatimeSystemMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WakatimeSystemFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WakatimeSystemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WakatimeSystemMutation", m)
}

// The WebAuthnCredentialFunc type is an adapter to allow the use of ordinary
// function as WebAuthnCredential mutator.
type WebAuthnCredentialFunc func(context.Context, *models.WebAuthnCredentialMutation) (models.Value, error)

// Mutate calls f(ctx, m).
func (f WebAuthnCredentialFunc) Mutate(ctx context.Context, m models.Mutation) (models.Value, error) {
	if mv, ok := m.(*models.WebAuthnCredentialMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *models.WebAuthnCredentialMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, models.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m models.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m models.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m models.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op models.Op) Condition {
	return func(_ context.Context, m models.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m models.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m models.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m models.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk models.Hook, cond Condition) models.Hook {
	return func(next models.Mutator) models.Mutator {
		return models.MutateFunc(func(ctx context.Context, m models.Mutation) (models.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, models.Delete|models.Create)
func On(hk models.Hook, op models.Op) models.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, models.Update|models.UpdateOne)
func Unless(hk models.Hook, op models.Op) models.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) models.Hook {
	return func(models.Mutator) models.Mutator {
		return models.MutateFunc(func(context.Context, models.Mutation) (models.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []models.Hook {
//		return []models.Hook{
//			Reject(models.Delete|models.Update),
//		}
//	}
func Reject(op models.Op) models.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []models.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...models.Hook) Chain {
	return Chain{append([]models.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() models.Hook {
	return func(mutator models.Mutator) models.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...models.Hook) Chain {
	newHooks := make([]models.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
