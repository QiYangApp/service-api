// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/models/userrelatedrole"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserRelatedRole is the model entity for the UserRelatedRole schema.
type UserRelatedRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 会员id
	UserID uuid.UUID `json:"user_id,omitempty"`
	// 角色
	RoleID uuid.UUID `json:"role_id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserRelatedRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userrelatedrole.FieldID:
			values[i] = new(sql.NullInt64)
		case userrelatedrole.FieldCreateTime, userrelatedrole.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case userrelatedrole.FieldUserID, userrelatedrole.FieldRoleID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserRelatedRole fields.
func (urr *UserRelatedRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userrelatedrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			urr.ID = int64(value.Int64)
		case userrelatedrole.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				urr.UserID = *value
			}
		case userrelatedrole.FieldRoleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value != nil {
				urr.RoleID = *value
			}
		case userrelatedrole.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				urr.CreateTime = value.Time
			}
		case userrelatedrole.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				urr.UpdateTime = value.Time
			}
		default:
			urr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserRelatedRole.
// This includes values selected through modifiers, order, etc.
func (urr *UserRelatedRole) Value(name string) (ent.Value, error) {
	return urr.selectValues.Get(name)
}

// Update returns a builder for updating this UserRelatedRole.
// Note that you need to call UserRelatedRole.Unwrap() before calling this method if this UserRelatedRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (urr *UserRelatedRole) Update() *UserRelatedRoleUpdateOne {
	return NewUserRelatedRoleClient(urr.config).UpdateOne(urr)
}

// Unwrap unwraps the UserRelatedRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (urr *UserRelatedRole) Unwrap() *UserRelatedRole {
	_tx, ok := urr.config.driver.(*txDriver)
	if !ok {
		panic("models: UserRelatedRole is not a transactional entity")
	}
	urr.config.driver = _tx.drv
	return urr
}

// String implements the fmt.Stringer.
func (urr *UserRelatedRole) String() string {
	var builder strings.Builder
	builder.WriteString("UserRelatedRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", urr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", urr.UserID))
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", urr.RoleID))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(urr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(urr.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserRelatedRoles is a parsable slice of UserRelatedRole.
type UserRelatedRoles []*UserRelatedRole
