// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/permissionrelatedrouter"
	"ent/models/predicate"
	"ent/utils/timeutil"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PermissionRelatedRouterUpdate is the builder for updating PermissionRelatedRouter entities.
type PermissionRelatedRouterUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionRelatedRouterMutation
}

// Where appends a list predicates to the PermissionRelatedRouterUpdate builder.
func (prru *PermissionRelatedRouterUpdate) Where(ps ...predicate.PermissionRelatedRouter) *PermissionRelatedRouterUpdate {
	prru.mutation.Where(ps...)
	return prru
}

// SetRouterID sets the "router_id" field.
func (prru *PermissionRelatedRouterUpdate) SetRouterID(u uuid.UUID) *PermissionRelatedRouterUpdate {
	prru.mutation.SetRouterID(u)
	return prru
}

// SetNillableRouterID sets the "router_id" field if the given value is not nil.
func (prru *PermissionRelatedRouterUpdate) SetNillableRouterID(u *uuid.UUID) *PermissionRelatedRouterUpdate {
	if u != nil {
		prru.SetRouterID(*u)
	}
	return prru
}

// SetPermissionGroupID sets the "permission_group_id" field.
func (prru *PermissionRelatedRouterUpdate) SetPermissionGroupID(u uuid.UUID) *PermissionRelatedRouterUpdate {
	prru.mutation.SetPermissionGroupID(u)
	return prru
}

// SetNillablePermissionGroupID sets the "permission_group_id" field if the given value is not nil.
func (prru *PermissionRelatedRouterUpdate) SetNillablePermissionGroupID(u *uuid.UUID) *PermissionRelatedRouterUpdate {
	if u != nil {
		prru.SetPermissionGroupID(*u)
	}
	return prru
}

// SetUpdateTime sets the "update_time" field.
func (prru *PermissionRelatedRouterUpdate) SetUpdateTime(ts timeutil.TimeStamp) *PermissionRelatedRouterUpdate {
	prru.mutation.ResetUpdateTime()
	prru.mutation.SetUpdateTime(ts)
	return prru
}

// AddUpdateTime adds ts to the "update_time" field.
func (prru *PermissionRelatedRouterUpdate) AddUpdateTime(ts timeutil.TimeStamp) *PermissionRelatedRouterUpdate {
	prru.mutation.AddUpdateTime(ts)
	return prru
}

// Mutation returns the PermissionRelatedRouterMutation object of the builder.
func (prru *PermissionRelatedRouterUpdate) Mutation() *PermissionRelatedRouterMutation {
	return prru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prru *PermissionRelatedRouterUpdate) Save(ctx context.Context) (int, error) {
	prru.defaults()
	return withHooks(ctx, prru.sqlSave, prru.mutation, prru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prru *PermissionRelatedRouterUpdate) SaveX(ctx context.Context) int {
	affected, err := prru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prru *PermissionRelatedRouterUpdate) Exec(ctx context.Context) error {
	_, err := prru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prru *PermissionRelatedRouterUpdate) ExecX(ctx context.Context) {
	if err := prru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prru *PermissionRelatedRouterUpdate) defaults() {
	if _, ok := prru.mutation.UpdateTime(); !ok {
		v := permissionrelatedrouter.UpdateDefaultUpdateTime()
		prru.mutation.SetUpdateTime(v)
	}
}

func (prru *PermissionRelatedRouterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(permissionrelatedrouter.Table, permissionrelatedrouter.Columns, sqlgraph.NewFieldSpec(permissionrelatedrouter.FieldID, field.TypeInt64))
	if ps := prru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prru.mutation.RouterID(); ok {
		_spec.SetField(permissionrelatedrouter.FieldRouterID, field.TypeUUID, value)
	}
	if value, ok := prru.mutation.PermissionGroupID(); ok {
		_spec.SetField(permissionrelatedrouter.FieldPermissionGroupID, field.TypeUUID, value)
	}
	if value, ok := prru.mutation.UpdateTime(); ok {
		_spec.SetField(permissionrelatedrouter.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := prru.mutation.AddedUpdateTime(); ok {
		_spec.AddField(permissionrelatedrouter.FieldUpdateTime, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, prru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionrelatedrouter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	prru.mutation.done = true
	return n, nil
}

// PermissionRelatedRouterUpdateOne is the builder for updating a single PermissionRelatedRouter entity.
type PermissionRelatedRouterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionRelatedRouterMutation
}

// SetRouterID sets the "router_id" field.
func (prruo *PermissionRelatedRouterUpdateOne) SetRouterID(u uuid.UUID) *PermissionRelatedRouterUpdateOne {
	prruo.mutation.SetRouterID(u)
	return prruo
}

// SetNillableRouterID sets the "router_id" field if the given value is not nil.
func (prruo *PermissionRelatedRouterUpdateOne) SetNillableRouterID(u *uuid.UUID) *PermissionRelatedRouterUpdateOne {
	if u != nil {
		prruo.SetRouterID(*u)
	}
	return prruo
}

// SetPermissionGroupID sets the "permission_group_id" field.
func (prruo *PermissionRelatedRouterUpdateOne) SetPermissionGroupID(u uuid.UUID) *PermissionRelatedRouterUpdateOne {
	prruo.mutation.SetPermissionGroupID(u)
	return prruo
}

// SetNillablePermissionGroupID sets the "permission_group_id" field if the given value is not nil.
func (prruo *PermissionRelatedRouterUpdateOne) SetNillablePermissionGroupID(u *uuid.UUID) *PermissionRelatedRouterUpdateOne {
	if u != nil {
		prruo.SetPermissionGroupID(*u)
	}
	return prruo
}

// SetUpdateTime sets the "update_time" field.
func (prruo *PermissionRelatedRouterUpdateOne) SetUpdateTime(ts timeutil.TimeStamp) *PermissionRelatedRouterUpdateOne {
	prruo.mutation.ResetUpdateTime()
	prruo.mutation.SetUpdateTime(ts)
	return prruo
}

// AddUpdateTime adds ts to the "update_time" field.
func (prruo *PermissionRelatedRouterUpdateOne) AddUpdateTime(ts timeutil.TimeStamp) *PermissionRelatedRouterUpdateOne {
	prruo.mutation.AddUpdateTime(ts)
	return prruo
}

// Mutation returns the PermissionRelatedRouterMutation object of the builder.
func (prruo *PermissionRelatedRouterUpdateOne) Mutation() *PermissionRelatedRouterMutation {
	return prruo.mutation
}

// Where appends a list predicates to the PermissionRelatedRouterUpdate builder.
func (prruo *PermissionRelatedRouterUpdateOne) Where(ps ...predicate.PermissionRelatedRouter) *PermissionRelatedRouterUpdateOne {
	prruo.mutation.Where(ps...)
	return prruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prruo *PermissionRelatedRouterUpdateOne) Select(field string, fields ...string) *PermissionRelatedRouterUpdateOne {
	prruo.fields = append([]string{field}, fields...)
	return prruo
}

// Save executes the query and returns the updated PermissionRelatedRouter entity.
func (prruo *PermissionRelatedRouterUpdateOne) Save(ctx context.Context) (*PermissionRelatedRouter, error) {
	prruo.defaults()
	return withHooks(ctx, prruo.sqlSave, prruo.mutation, prruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prruo *PermissionRelatedRouterUpdateOne) SaveX(ctx context.Context) *PermissionRelatedRouter {
	node, err := prruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prruo *PermissionRelatedRouterUpdateOne) Exec(ctx context.Context) error {
	_, err := prruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prruo *PermissionRelatedRouterUpdateOne) ExecX(ctx context.Context) {
	if err := prruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prruo *PermissionRelatedRouterUpdateOne) defaults() {
	if _, ok := prruo.mutation.UpdateTime(); !ok {
		v := permissionrelatedrouter.UpdateDefaultUpdateTime()
		prruo.mutation.SetUpdateTime(v)
	}
}

func (prruo *PermissionRelatedRouterUpdateOne) sqlSave(ctx context.Context) (_node *PermissionRelatedRouter, err error) {
	_spec := sqlgraph.NewUpdateSpec(permissionrelatedrouter.Table, permissionrelatedrouter.Columns, sqlgraph.NewFieldSpec(permissionrelatedrouter.FieldID, field.TypeInt64))
	id, ok := prruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "PermissionRelatedRouter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := prruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissionrelatedrouter.FieldID)
		for _, f := range fields {
			if !permissionrelatedrouter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != permissionrelatedrouter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prruo.mutation.RouterID(); ok {
		_spec.SetField(permissionrelatedrouter.FieldRouterID, field.TypeUUID, value)
	}
	if value, ok := prruo.mutation.PermissionGroupID(); ok {
		_spec.SetField(permissionrelatedrouter.FieldPermissionGroupID, field.TypeUUID, value)
	}
	if value, ok := prruo.mutation.UpdateTime(); ok {
		_spec.SetField(permissionrelatedrouter.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := prruo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(permissionrelatedrouter.FieldUpdateTime, field.TypeInt64, value)
	}
	_node = &PermissionRelatedRouter{config: prruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionrelatedrouter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	prruo.mutation.done = true
	return _node, nil
}
