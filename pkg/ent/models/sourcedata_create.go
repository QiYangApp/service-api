// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/sourcedata"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SourceDataCreate is the builder for creating a SourceData entity.
type SourceDataCreate struct {
	config
	mutation *SourceDataMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sdc *SourceDataCreate) SetUserID(u uuid.UUID) *SourceDataCreate {
	sdc.mutation.SetUserID(u)
	return sdc
}

// SetType sets the "type" field.
func (sdc *SourceDataCreate) SetType(s string) *SourceDataCreate {
	sdc.mutation.SetType(s)
	return sdc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sdc *SourceDataCreate) SetNillableType(s *string) *SourceDataCreate {
	if s != nil {
		sdc.SetType(*s)
	}
	return sdc
}

// SetSubType sets the "sub_type" field.
func (sdc *SourceDataCreate) SetSubType(s string) *SourceDataCreate {
	sdc.mutation.SetSubType(s)
	return sdc
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (sdc *SourceDataCreate) SetNillableSubType(s *string) *SourceDataCreate {
	if s != nil {
		sdc.SetSubType(*s)
	}
	return sdc
}

// SetInfo sets the "info" field.
func (sdc *SourceDataCreate) SetInfo(s string) *SourceDataCreate {
	sdc.mutation.SetInfo(s)
	return sdc
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (sdc *SourceDataCreate) SetNillableInfo(s *string) *SourceDataCreate {
	if s != nil {
		sdc.SetInfo(*s)
	}
	return sdc
}

// SetSnapshot sets the "snapshot" field.
func (sdc *SourceDataCreate) SetSnapshot(s string) *SourceDataCreate {
	sdc.mutation.SetSnapshot(s)
	return sdc
}

// SetNillableSnapshot sets the "snapshot" field if the given value is not nil.
func (sdc *SourceDataCreate) SetNillableSnapshot(s *string) *SourceDataCreate {
	if s != nil {
		sdc.SetSnapshot(*s)
	}
	return sdc
}

// SetCreateTime sets the "create_time" field.
func (sdc *SourceDataCreate) SetCreateTime(t time.Time) *SourceDataCreate {
	sdc.mutation.SetCreateTime(t)
	return sdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sdc *SourceDataCreate) SetNillableCreateTime(t *time.Time) *SourceDataCreate {
	if t != nil {
		sdc.SetCreateTime(*t)
	}
	return sdc
}

// SetUpdateTime sets the "update_time" field.
func (sdc *SourceDataCreate) SetUpdateTime(t time.Time) *SourceDataCreate {
	sdc.mutation.SetUpdateTime(t)
	return sdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sdc *SourceDataCreate) SetNillableUpdateTime(t *time.Time) *SourceDataCreate {
	if t != nil {
		sdc.SetUpdateTime(*t)
	}
	return sdc
}

// SetID sets the "id" field.
func (sdc *SourceDataCreate) SetID(i int) *SourceDataCreate {
	sdc.mutation.SetID(i)
	return sdc
}

// Mutation returns the SourceDataMutation object of the builder.
func (sdc *SourceDataCreate) Mutation() *SourceDataMutation {
	return sdc.mutation
}

// Save creates the SourceData in the database.
func (sdc *SourceDataCreate) Save(ctx context.Context) (*SourceData, error) {
	sdc.defaults()
	return withHooks(ctx, sdc.sqlSave, sdc.mutation, sdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *SourceDataCreate) SaveX(ctx context.Context) *SourceData {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *SourceDataCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *SourceDataCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *SourceDataCreate) defaults() {
	if _, ok := sdc.mutation.GetType(); !ok {
		v := sourcedata.DefaultType
		sdc.mutation.SetType(v)
	}
	if _, ok := sdc.mutation.SubType(); !ok {
		v := sourcedata.DefaultSubType
		sdc.mutation.SetSubType(v)
	}
	if _, ok := sdc.mutation.Info(); !ok {
		v := sourcedata.DefaultInfo
		sdc.mutation.SetInfo(v)
	}
	if _, ok := sdc.mutation.Snapshot(); !ok {
		v := sourcedata.DefaultSnapshot
		sdc.mutation.SetSnapshot(v)
	}
	if _, ok := sdc.mutation.CreateTime(); !ok {
		v := sourcedata.DefaultCreateTime()
		sdc.mutation.SetCreateTime(v)
	}
	if _, ok := sdc.mutation.UpdateTime(); !ok {
		v := sourcedata.DefaultUpdateTime()
		sdc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *SourceDataCreate) check() error {
	if _, ok := sdc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`models: missing required field "SourceData.user_id"`)}
	}
	if _, ok := sdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`models: missing required field "SourceData.type"`)}
	}
	if v, ok := sdc.mutation.GetType(); ok {
		if err := sourcedata.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`models: validator failed for field "SourceData.type": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.SubType(); !ok {
		return &ValidationError{Name: "sub_type", err: errors.New(`models: missing required field "SourceData.sub_type"`)}
	}
	if v, ok := sdc.mutation.SubType(); ok {
		if err := sourcedata.SubTypeValidator(v); err != nil {
			return &ValidationError{Name: "sub_type", err: fmt.Errorf(`models: validator failed for field "SourceData.sub_type": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`models: missing required field "SourceData.info"`)}
	}
	if _, ok := sdc.mutation.Snapshot(); !ok {
		return &ValidationError{Name: "snapshot", err: errors.New(`models: missing required field "SourceData.snapshot"`)}
	}
	if _, ok := sdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`models: missing required field "SourceData.create_time"`)}
	}
	if _, ok := sdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`models: missing required field "SourceData.update_time"`)}
	}
	return nil
}

func (sdc *SourceDataCreate) sqlSave(ctx context.Context) (*SourceData, error) {
	if err := sdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sdc.mutation.id = &_node.ID
	sdc.mutation.done = true
	return _node, nil
}

func (sdc *SourceDataCreate) createSpec() (*SourceData, *sqlgraph.CreateSpec) {
	var (
		_node = &SourceData{config: sdc.config}
		_spec = sqlgraph.NewCreateSpec(sourcedata.Table, sqlgraph.NewFieldSpec(sourcedata.FieldID, field.TypeInt))
	)
	if id, ok := sdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sdc.mutation.UserID(); ok {
		_spec.SetField(sourcedata.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := sdc.mutation.GetType(); ok {
		_spec.SetField(sourcedata.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := sdc.mutation.SubType(); ok {
		_spec.SetField(sourcedata.FieldSubType, field.TypeString, value)
		_node.SubType = value
	}
	if value, ok := sdc.mutation.Info(); ok {
		_spec.SetField(sourcedata.FieldInfo, field.TypeString, value)
		_node.Info = value
	}
	if value, ok := sdc.mutation.Snapshot(); ok {
		_spec.SetField(sourcedata.FieldSnapshot, field.TypeString, value)
		_node.Snapshot = value
	}
	if value, ok := sdc.mutation.CreateTime(); ok {
		_spec.SetField(sourcedata.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sdc.mutation.UpdateTime(); ok {
		_spec.SetField(sourcedata.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SourceDataCreateBulk is the builder for creating many SourceData entities in bulk.
type SourceDataCreateBulk struct {
	config
	err      error
	builders []*SourceDataCreate
}

// Save creates the SourceData entities in the database.
func (sdcb *SourceDataCreateBulk) Save(ctx context.Context) ([]*SourceData, error) {
	if sdcb.err != nil {
		return nil, sdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*SourceData, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SourceDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *SourceDataCreateBulk) SaveX(ctx context.Context) []*SourceData {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *SourceDataCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *SourceDataCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
