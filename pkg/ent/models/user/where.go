// Code generated by ent, DO NOT EDIT.

package user

import (
	"ent/models/predicate"
	"ent/types/auth"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// PasswdSalt applies equality check predicate on the "passwd_salt" field. It's identical to PasswdSaltEQ.
func PasswdSalt(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswdSalt, v))
}

// PasswdHashAlgo applies equality check predicate on the "passwd_hash_algo" field. It's identical to PasswdHashAlgoEQ.
func PasswdHashAlgo(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswdHashAlgo, v))
}

// Passwd applies equality check predicate on the "passwd" field. It's identical to PasswdEQ.
func Passwd(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswd, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLanguage, v))
}

// LoginName applies equality check predicate on the "login_name" field. It's identical to LoginNameEQ.
func LoginName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginName, v))
}

// LoginSource applies equality check predicate on the "login_source" field. It's identical to LoginSourceEQ.
func LoginSource(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginSource, v))
}

// LoginType applies equality check predicate on the "login_type" field. It's identical to LoginTypeEQ.
func LoginType(v auth.Type) predicate.User {
	vc := int(v)
	return predicate.User(sql.FieldEQ(FieldLoginType, vc))
}

// IsRestricted applies equality check predicate on the "is_restricted" field. It's identical to IsRestrictedEQ.
func IsRestricted(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsRestricted, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// ProhibitLogin applies equality check predicate on the "prohibit_login" field. It's identical to ProhibitLoginEQ.
func ProhibitLogin(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProhibitLogin, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatar, v))
}

// PasswdSaltEQ applies the EQ predicate on the "passwd_salt" field.
func PasswdSaltEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswdSalt, v))
}

// PasswdSaltNEQ applies the NEQ predicate on the "passwd_salt" field.
func PasswdSaltNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswdSalt, v))
}

// PasswdSaltIn applies the In predicate on the "passwd_salt" field.
func PasswdSaltIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswdSalt, vs...))
}

// PasswdSaltNotIn applies the NotIn predicate on the "passwd_salt" field.
func PasswdSaltNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswdSalt, vs...))
}

// PasswdSaltGT applies the GT predicate on the "passwd_salt" field.
func PasswdSaltGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswdSalt, v))
}

// PasswdSaltGTE applies the GTE predicate on the "passwd_salt" field.
func PasswdSaltGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswdSalt, v))
}

// PasswdSaltLT applies the LT predicate on the "passwd_salt" field.
func PasswdSaltLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswdSalt, v))
}

// PasswdSaltLTE applies the LTE predicate on the "passwd_salt" field.
func PasswdSaltLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswdSalt, v))
}

// PasswdSaltContains applies the Contains predicate on the "passwd_salt" field.
func PasswdSaltContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswdSalt, v))
}

// PasswdSaltHasPrefix applies the HasPrefix predicate on the "passwd_salt" field.
func PasswdSaltHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswdSalt, v))
}

// PasswdSaltHasSuffix applies the HasSuffix predicate on the "passwd_salt" field.
func PasswdSaltHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswdSalt, v))
}

// PasswdSaltEqualFold applies the EqualFold predicate on the "passwd_salt" field.
func PasswdSaltEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswdSalt, v))
}

// PasswdSaltContainsFold applies the ContainsFold predicate on the "passwd_salt" field.
func PasswdSaltContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswdSalt, v))
}

// PasswdHashAlgoEQ applies the EQ predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoNEQ applies the NEQ predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoIn applies the In predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswdHashAlgo, vs...))
}

// PasswdHashAlgoNotIn applies the NotIn predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswdHashAlgo, vs...))
}

// PasswdHashAlgoGT applies the GT predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoGTE applies the GTE predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoLT applies the LT predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoLTE applies the LTE predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoContains applies the Contains predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoHasPrefix applies the HasPrefix predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoHasSuffix applies the HasSuffix predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoEqualFold applies the EqualFold predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswdHashAlgo, v))
}

// PasswdHashAlgoContainsFold applies the ContainsFold predicate on the "passwd_hash_algo" field.
func PasswdHashAlgoContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswdHashAlgo, v))
}

// PasswdEQ applies the EQ predicate on the "passwd" field.
func PasswdEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswd, v))
}

// PasswdNEQ applies the NEQ predicate on the "passwd" field.
func PasswdNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswd, v))
}

// PasswdIn applies the In predicate on the "passwd" field.
func PasswdIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswd, vs...))
}

// PasswdNotIn applies the NotIn predicate on the "passwd" field.
func PasswdNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswd, vs...))
}

// PasswdGT applies the GT predicate on the "passwd" field.
func PasswdGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswd, v))
}

// PasswdGTE applies the GTE predicate on the "passwd" field.
func PasswdGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswd, v))
}

// PasswdLT applies the LT predicate on the "passwd" field.
func PasswdLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswd, v))
}

// PasswdLTE applies the LTE predicate on the "passwd" field.
func PasswdLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswd, v))
}

// PasswdContains applies the Contains predicate on the "passwd" field.
func PasswdContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswd, v))
}

// PasswdHasPrefix applies the HasPrefix predicate on the "passwd" field.
func PasswdHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswd, v))
}

// PasswdHasSuffix applies the HasSuffix predicate on the "passwd" field.
func PasswdHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswd, v))
}

// PasswdEqualFold applies the EqualFold predicate on the "passwd" field.
func PasswdEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswd, v))
}

// PasswdContainsFold applies the ContainsFold predicate on the "passwd" field.
func PasswdContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswd, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickname, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLanguage, v))
}

// LoginNameEQ applies the EQ predicate on the "login_name" field.
func LoginNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginName, v))
}

// LoginNameNEQ applies the NEQ predicate on the "login_name" field.
func LoginNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLoginName, v))
}

// LoginNameIn applies the In predicate on the "login_name" field.
func LoginNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLoginName, vs...))
}

// LoginNameNotIn applies the NotIn predicate on the "login_name" field.
func LoginNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLoginName, vs...))
}

// LoginNameGT applies the GT predicate on the "login_name" field.
func LoginNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLoginName, v))
}

// LoginNameGTE applies the GTE predicate on the "login_name" field.
func LoginNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLoginName, v))
}

// LoginNameLT applies the LT predicate on the "login_name" field.
func LoginNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLoginName, v))
}

// LoginNameLTE applies the LTE predicate on the "login_name" field.
func LoginNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLoginName, v))
}

// LoginNameContains applies the Contains predicate on the "login_name" field.
func LoginNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLoginName, v))
}

// LoginNameHasPrefix applies the HasPrefix predicate on the "login_name" field.
func LoginNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLoginName, v))
}

// LoginNameHasSuffix applies the HasSuffix predicate on the "login_name" field.
func LoginNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLoginName, v))
}

// LoginNameEqualFold applies the EqualFold predicate on the "login_name" field.
func LoginNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLoginName, v))
}

// LoginNameContainsFold applies the ContainsFold predicate on the "login_name" field.
func LoginNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLoginName, v))
}

// LoginSourceEQ applies the EQ predicate on the "login_source" field.
func LoginSourceEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginSource, v))
}

// LoginSourceNEQ applies the NEQ predicate on the "login_source" field.
func LoginSourceNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLoginSource, v))
}

// LoginSourceIn applies the In predicate on the "login_source" field.
func LoginSourceIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldLoginSource, vs...))
}

// LoginSourceNotIn applies the NotIn predicate on the "login_source" field.
func LoginSourceNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLoginSource, vs...))
}

// LoginSourceGT applies the GT predicate on the "login_source" field.
func LoginSourceGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldLoginSource, v))
}

// LoginSourceGTE applies the GTE predicate on the "login_source" field.
func LoginSourceGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLoginSource, v))
}

// LoginSourceLT applies the LT predicate on the "login_source" field.
func LoginSourceLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldLoginSource, v))
}

// LoginSourceLTE applies the LTE predicate on the "login_source" field.
func LoginSourceLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLoginSource, v))
}

// LoginTypeEQ applies the EQ predicate on the "login_type" field.
func LoginTypeEQ(v auth.Type) predicate.User {
	vc := int(v)
	return predicate.User(sql.FieldEQ(FieldLoginType, vc))
}

// LoginTypeNEQ applies the NEQ predicate on the "login_type" field.
func LoginTypeNEQ(v auth.Type) predicate.User {
	vc := int(v)
	return predicate.User(sql.FieldNEQ(FieldLoginType, vc))
}

// LoginTypeIn applies the In predicate on the "login_type" field.
func LoginTypeIn(vs ...auth.Type) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.User(sql.FieldIn(FieldLoginType, v...))
}

// LoginTypeNotIn applies the NotIn predicate on the "login_type" field.
func LoginTypeNotIn(vs ...auth.Type) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int(vs[i])
	}
	return predicate.User(sql.FieldNotIn(FieldLoginType, v...))
}

// LoginTypeGT applies the GT predicate on the "login_type" field.
func LoginTypeGT(v auth.Type) predicate.User {
	vc := int(v)
	return predicate.User(sql.FieldGT(FieldLoginType, vc))
}

// LoginTypeGTE applies the GTE predicate on the "login_type" field.
func LoginTypeGTE(v auth.Type) predicate.User {
	vc := int(v)
	return predicate.User(sql.FieldGTE(FieldLoginType, vc))
}

// LoginTypeLT applies the LT predicate on the "login_type" field.
func LoginTypeLT(v auth.Type) predicate.User {
	vc := int(v)
	return predicate.User(sql.FieldLT(FieldLoginType, vc))
}

// LoginTypeLTE applies the LTE predicate on the "login_type" field.
func LoginTypeLTE(v auth.Type) predicate.User {
	vc := int(v)
	return predicate.User(sql.FieldLTE(FieldLoginType, vc))
}

// IsRestrictedEQ applies the EQ predicate on the "is_restricted" field.
func IsRestrictedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsRestricted, v))
}

// IsRestrictedNEQ applies the NEQ predicate on the "is_restricted" field.
func IsRestrictedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsRestricted, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsActive, v))
}

// ProhibitLoginEQ applies the EQ predicate on the "prohibit_login" field.
func ProhibitLoginEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProhibitLogin, v))
}

// ProhibitLoginNEQ applies the NEQ predicate on the "prohibit_login" field.
func ProhibitLoginNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProhibitLogin, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
