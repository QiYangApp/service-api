// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/memberrolerelatedpermission"
	"ent/models/predicate"
	"errors"
	"fmt"
	"frame/util/timeutil"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MemberRoleRelatedPermissionUpdate is the builder for updating MemberRoleRelatedPermission entities.
type MemberRoleRelatedPermissionUpdate struct {
	config
	hooks    []Hook
	mutation *MemberRoleRelatedPermissionMutation
}

// Where appends a list predicates to the MemberRoleRelatedPermissionUpdate builder.
func (mrrpu *MemberRoleRelatedPermissionUpdate) Where(ps ...predicate.MemberRoleRelatedPermission) *MemberRoleRelatedPermissionUpdate {
	mrrpu.mutation.Where(ps...)
	return mrrpu
}

// SetRoleID sets the "role_id" field.
func (mrrpu *MemberRoleRelatedPermissionUpdate) SetRoleID(u uuid.UUID) *MemberRoleRelatedPermissionUpdate {
	mrrpu.mutation.SetRoleID(u)
	return mrrpu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (mrrpu *MemberRoleRelatedPermissionUpdate) SetNillableRoleID(u *uuid.UUID) *MemberRoleRelatedPermissionUpdate {
	if u != nil {
		mrrpu.SetRoleID(*u)
	}
	return mrrpu
}

// SetPermissionGroupID sets the "permission_group_id" field.
func (mrrpu *MemberRoleRelatedPermissionUpdate) SetPermissionGroupID(u uuid.UUID) *MemberRoleRelatedPermissionUpdate {
	mrrpu.mutation.SetPermissionGroupID(u)
	return mrrpu
}

// SetNillablePermissionGroupID sets the "permission_group_id" field if the given value is not nil.
func (mrrpu *MemberRoleRelatedPermissionUpdate) SetNillablePermissionGroupID(u *uuid.UUID) *MemberRoleRelatedPermissionUpdate {
	if u != nil {
		mrrpu.SetPermissionGroupID(*u)
	}
	return mrrpu
}

// SetUpdateTime sets the "update_time" field.
func (mrrpu *MemberRoleRelatedPermissionUpdate) SetUpdateTime(ts timeutil.TimeStamp) *MemberRoleRelatedPermissionUpdate {
	mrrpu.mutation.ResetUpdateTime()
	mrrpu.mutation.SetUpdateTime(ts)
	return mrrpu
}

// AddUpdateTime adds ts to the "update_time" field.
func (mrrpu *MemberRoleRelatedPermissionUpdate) AddUpdateTime(ts timeutil.TimeStamp) *MemberRoleRelatedPermissionUpdate {
	mrrpu.mutation.AddUpdateTime(ts)
	return mrrpu
}

// Mutation returns the MemberRoleRelatedPermissionMutation object of the builder.
func (mrrpu *MemberRoleRelatedPermissionUpdate) Mutation() *MemberRoleRelatedPermissionMutation {
	return mrrpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mrrpu *MemberRoleRelatedPermissionUpdate) Save(ctx context.Context) (int, error) {
	mrrpu.defaults()
	return withHooks(ctx, mrrpu.sqlSave, mrrpu.mutation, mrrpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mrrpu *MemberRoleRelatedPermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := mrrpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mrrpu *MemberRoleRelatedPermissionUpdate) Exec(ctx context.Context) error {
	_, err := mrrpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrrpu *MemberRoleRelatedPermissionUpdate) ExecX(ctx context.Context) {
	if err := mrrpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrrpu *MemberRoleRelatedPermissionUpdate) defaults() {
	if _, ok := mrrpu.mutation.UpdateTime(); !ok {
		v := memberrolerelatedpermission.UpdateDefaultUpdateTime()
		mrrpu.mutation.SetUpdateTime(v)
	}
}

func (mrrpu *MemberRoleRelatedPermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberrolerelatedpermission.Table, memberrolerelatedpermission.Columns, sqlgraph.NewFieldSpec(memberrolerelatedpermission.FieldID, field.TypeInt64))
	if ps := mrrpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mrrpu.mutation.RoleID(); ok {
		_spec.SetField(memberrolerelatedpermission.FieldRoleID, field.TypeUUID, value)
	}
	if value, ok := mrrpu.mutation.PermissionGroupID(); ok {
		_spec.SetField(memberrolerelatedpermission.FieldPermissionGroupID, field.TypeUUID, value)
	}
	if value, ok := mrrpu.mutation.UpdateTime(); ok {
		_spec.SetField(memberrolerelatedpermission.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := mrrpu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(memberrolerelatedpermission.FieldUpdateTime, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mrrpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberrolerelatedpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mrrpu.mutation.done = true
	return n, nil
}

// MemberRoleRelatedPermissionUpdateOne is the builder for updating a single MemberRoleRelatedPermission entity.
type MemberRoleRelatedPermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberRoleRelatedPermissionMutation
}

// SetRoleID sets the "role_id" field.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) SetRoleID(u uuid.UUID) *MemberRoleRelatedPermissionUpdateOne {
	mrrpuo.mutation.SetRoleID(u)
	return mrrpuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) SetNillableRoleID(u *uuid.UUID) *MemberRoleRelatedPermissionUpdateOne {
	if u != nil {
		mrrpuo.SetRoleID(*u)
	}
	return mrrpuo
}

// SetPermissionGroupID sets the "permission_group_id" field.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) SetPermissionGroupID(u uuid.UUID) *MemberRoleRelatedPermissionUpdateOne {
	mrrpuo.mutation.SetPermissionGroupID(u)
	return mrrpuo
}

// SetNillablePermissionGroupID sets the "permission_group_id" field if the given value is not nil.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) SetNillablePermissionGroupID(u *uuid.UUID) *MemberRoleRelatedPermissionUpdateOne {
	if u != nil {
		mrrpuo.SetPermissionGroupID(*u)
	}
	return mrrpuo
}

// SetUpdateTime sets the "update_time" field.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) SetUpdateTime(ts timeutil.TimeStamp) *MemberRoleRelatedPermissionUpdateOne {
	mrrpuo.mutation.ResetUpdateTime()
	mrrpuo.mutation.SetUpdateTime(ts)
	return mrrpuo
}

// AddUpdateTime adds ts to the "update_time" field.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) AddUpdateTime(ts timeutil.TimeStamp) *MemberRoleRelatedPermissionUpdateOne {
	mrrpuo.mutation.AddUpdateTime(ts)
	return mrrpuo
}

// Mutation returns the MemberRoleRelatedPermissionMutation object of the builder.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) Mutation() *MemberRoleRelatedPermissionMutation {
	return mrrpuo.mutation
}

// Where appends a list predicates to the MemberRoleRelatedPermissionUpdate builder.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) Where(ps ...predicate.MemberRoleRelatedPermission) *MemberRoleRelatedPermissionUpdateOne {
	mrrpuo.mutation.Where(ps...)
	return mrrpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) Select(field string, fields ...string) *MemberRoleRelatedPermissionUpdateOne {
	mrrpuo.fields = append([]string{field}, fields...)
	return mrrpuo
}

// Save executes the query and returns the updated MemberRoleRelatedPermission entity.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) Save(ctx context.Context) (*MemberRoleRelatedPermission, error) {
	mrrpuo.defaults()
	return withHooks(ctx, mrrpuo.sqlSave, mrrpuo.mutation, mrrpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) SaveX(ctx context.Context) *MemberRoleRelatedPermission {
	node, err := mrrpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := mrrpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) ExecX(ctx context.Context) {
	if err := mrrpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) defaults() {
	if _, ok := mrrpuo.mutation.UpdateTime(); !ok {
		v := memberrolerelatedpermission.UpdateDefaultUpdateTime()
		mrrpuo.mutation.SetUpdateTime(v)
	}
}

func (mrrpuo *MemberRoleRelatedPermissionUpdateOne) sqlSave(ctx context.Context) (_node *MemberRoleRelatedPermission, err error) {
	_spec := sqlgraph.NewUpdateSpec(memberrolerelatedpermission.Table, memberrolerelatedpermission.Columns, sqlgraph.NewFieldSpec(memberrolerelatedpermission.FieldID, field.TypeInt64))
	id, ok := mrrpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "MemberRoleRelatedPermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mrrpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memberrolerelatedpermission.FieldID)
		for _, f := range fields {
			if !memberrolerelatedpermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != memberrolerelatedpermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mrrpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mrrpuo.mutation.RoleID(); ok {
		_spec.SetField(memberrolerelatedpermission.FieldRoleID, field.TypeUUID, value)
	}
	if value, ok := mrrpuo.mutation.PermissionGroupID(); ok {
		_spec.SetField(memberrolerelatedpermission.FieldPermissionGroupID, field.TypeUUID, value)
	}
	if value, ok := mrrpuo.mutation.UpdateTime(); ok {
		_spec.SetField(memberrolerelatedpermission.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := mrrpuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(memberrolerelatedpermission.FieldUpdateTime, field.TypeInt64, value)
	}
	_node = &MemberRoleRelatedPermission{config: mrrpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mrrpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memberrolerelatedpermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mrrpuo.mutation.done = true
	return _node, nil
}
