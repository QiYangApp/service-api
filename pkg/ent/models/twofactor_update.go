// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/twofactor"
	"ent/utils/timeutil"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TwoFactorUpdate is the builder for updating TwoFactor entities.
type TwoFactorUpdate struct {
	config
	hooks    []Hook
	mutation *TwoFactorMutation
}

// Where appends a list predicates to the TwoFactorUpdate builder.
func (tfu *TwoFactorUpdate) Where(ps ...predicate.TwoFactor) *TwoFactorUpdate {
	tfu.mutation.Where(ps...)
	return tfu
}

// SetUserID sets the "user_id" field.
func (tfu *TwoFactorUpdate) SetUserID(i int64) *TwoFactorUpdate {
	tfu.mutation.ResetUserID()
	tfu.mutation.SetUserID(i)
	return tfu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tfu *TwoFactorUpdate) SetNillableUserID(i *int64) *TwoFactorUpdate {
	if i != nil {
		tfu.SetUserID(*i)
	}
	return tfu
}

// AddUserID adds i to the "user_id" field.
func (tfu *TwoFactorUpdate) AddUserID(i int64) *TwoFactorUpdate {
	tfu.mutation.AddUserID(i)
	return tfu
}

// SetSecret sets the "secret" field.
func (tfu *TwoFactorUpdate) SetSecret(s string) *TwoFactorUpdate {
	tfu.mutation.SetSecret(s)
	return tfu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (tfu *TwoFactorUpdate) SetNillableSecret(s *string) *TwoFactorUpdate {
	if s != nil {
		tfu.SetSecret(*s)
	}
	return tfu
}

// SetScratchSalt sets the "scratch_salt" field.
func (tfu *TwoFactorUpdate) SetScratchSalt(s string) *TwoFactorUpdate {
	tfu.mutation.SetScratchSalt(s)
	return tfu
}

// SetNillableScratchSalt sets the "scratch_salt" field if the given value is not nil.
func (tfu *TwoFactorUpdate) SetNillableScratchSalt(s *string) *TwoFactorUpdate {
	if s != nil {
		tfu.SetScratchSalt(*s)
	}
	return tfu
}

// SetScratchHash sets the "scratch_hash" field.
func (tfu *TwoFactorUpdate) SetScratchHash(s string) *TwoFactorUpdate {
	tfu.mutation.SetScratchHash(s)
	return tfu
}

// SetNillableScratchHash sets the "scratch_hash" field if the given value is not nil.
func (tfu *TwoFactorUpdate) SetNillableScratchHash(s *string) *TwoFactorUpdate {
	if s != nil {
		tfu.SetScratchHash(*s)
	}
	return tfu
}

// SetLastUsedPasscode sets the "last_used_passcode" field.
func (tfu *TwoFactorUpdate) SetLastUsedPasscode(s string) *TwoFactorUpdate {
	tfu.mutation.SetLastUsedPasscode(s)
	return tfu
}

// SetNillableLastUsedPasscode sets the "last_used_passcode" field if the given value is not nil.
func (tfu *TwoFactorUpdate) SetNillableLastUsedPasscode(s *string) *TwoFactorUpdate {
	if s != nil {
		tfu.SetLastUsedPasscode(*s)
	}
	return tfu
}

// SetUpdateTime sets the "update_time" field.
func (tfu *TwoFactorUpdate) SetUpdateTime(ts timeutil.TimeStamp) *TwoFactorUpdate {
	tfu.mutation.ResetUpdateTime()
	tfu.mutation.SetUpdateTime(ts)
	return tfu
}

// AddUpdateTime adds ts to the "update_time" field.
func (tfu *TwoFactorUpdate) AddUpdateTime(ts timeutil.TimeStamp) *TwoFactorUpdate {
	tfu.mutation.AddUpdateTime(ts)
	return tfu
}

// Mutation returns the TwoFactorMutation object of the builder.
func (tfu *TwoFactorUpdate) Mutation() *TwoFactorMutation {
	return tfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfu *TwoFactorUpdate) Save(ctx context.Context) (int, error) {
	tfu.defaults()
	return withHooks(ctx, tfu.sqlSave, tfu.mutation, tfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfu *TwoFactorUpdate) SaveX(ctx context.Context) int {
	affected, err := tfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfu *TwoFactorUpdate) Exec(ctx context.Context) error {
	_, err := tfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfu *TwoFactorUpdate) ExecX(ctx context.Context) {
	if err := tfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfu *TwoFactorUpdate) defaults() {
	if _, ok := tfu.mutation.UpdateTime(); !ok {
		v := twofactor.UpdateDefaultUpdateTime()
		tfu.mutation.SetUpdateTime(v)
	}
}

func (tfu *TwoFactorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(twofactor.Table, twofactor.Columns, sqlgraph.NewFieldSpec(twofactor.FieldID, field.TypeInt64))
	if ps := tfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfu.mutation.UserID(); ok {
		_spec.SetField(twofactor.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tfu.mutation.AddedUserID(); ok {
		_spec.AddField(twofactor.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tfu.mutation.Secret(); ok {
		_spec.SetField(twofactor.FieldSecret, field.TypeString, value)
	}
	if value, ok := tfu.mutation.ScratchSalt(); ok {
		_spec.SetField(twofactor.FieldScratchSalt, field.TypeString, value)
	}
	if value, ok := tfu.mutation.ScratchHash(); ok {
		_spec.SetField(twofactor.FieldScratchHash, field.TypeString, value)
	}
	if value, ok := tfu.mutation.LastUsedPasscode(); ok {
		_spec.SetField(twofactor.FieldLastUsedPasscode, field.TypeString, value)
	}
	if value, ok := tfu.mutation.UpdateTime(); ok {
		_spec.SetField(twofactor.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := tfu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(twofactor.FieldUpdateTime, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twofactor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfu.mutation.done = true
	return n, nil
}

// TwoFactorUpdateOne is the builder for updating a single TwoFactor entity.
type TwoFactorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TwoFactorMutation
}

// SetUserID sets the "user_id" field.
func (tfuo *TwoFactorUpdateOne) SetUserID(i int64) *TwoFactorUpdateOne {
	tfuo.mutation.ResetUserID()
	tfuo.mutation.SetUserID(i)
	return tfuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tfuo *TwoFactorUpdateOne) SetNillableUserID(i *int64) *TwoFactorUpdateOne {
	if i != nil {
		tfuo.SetUserID(*i)
	}
	return tfuo
}

// AddUserID adds i to the "user_id" field.
func (tfuo *TwoFactorUpdateOne) AddUserID(i int64) *TwoFactorUpdateOne {
	tfuo.mutation.AddUserID(i)
	return tfuo
}

// SetSecret sets the "secret" field.
func (tfuo *TwoFactorUpdateOne) SetSecret(s string) *TwoFactorUpdateOne {
	tfuo.mutation.SetSecret(s)
	return tfuo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (tfuo *TwoFactorUpdateOne) SetNillableSecret(s *string) *TwoFactorUpdateOne {
	if s != nil {
		tfuo.SetSecret(*s)
	}
	return tfuo
}

// SetScratchSalt sets the "scratch_salt" field.
func (tfuo *TwoFactorUpdateOne) SetScratchSalt(s string) *TwoFactorUpdateOne {
	tfuo.mutation.SetScratchSalt(s)
	return tfuo
}

// SetNillableScratchSalt sets the "scratch_salt" field if the given value is not nil.
func (tfuo *TwoFactorUpdateOne) SetNillableScratchSalt(s *string) *TwoFactorUpdateOne {
	if s != nil {
		tfuo.SetScratchSalt(*s)
	}
	return tfuo
}

// SetScratchHash sets the "scratch_hash" field.
func (tfuo *TwoFactorUpdateOne) SetScratchHash(s string) *TwoFactorUpdateOne {
	tfuo.mutation.SetScratchHash(s)
	return tfuo
}

// SetNillableScratchHash sets the "scratch_hash" field if the given value is not nil.
func (tfuo *TwoFactorUpdateOne) SetNillableScratchHash(s *string) *TwoFactorUpdateOne {
	if s != nil {
		tfuo.SetScratchHash(*s)
	}
	return tfuo
}

// SetLastUsedPasscode sets the "last_used_passcode" field.
func (tfuo *TwoFactorUpdateOne) SetLastUsedPasscode(s string) *TwoFactorUpdateOne {
	tfuo.mutation.SetLastUsedPasscode(s)
	return tfuo
}

// SetNillableLastUsedPasscode sets the "last_used_passcode" field if the given value is not nil.
func (tfuo *TwoFactorUpdateOne) SetNillableLastUsedPasscode(s *string) *TwoFactorUpdateOne {
	if s != nil {
		tfuo.SetLastUsedPasscode(*s)
	}
	return tfuo
}

// SetUpdateTime sets the "update_time" field.
func (tfuo *TwoFactorUpdateOne) SetUpdateTime(ts timeutil.TimeStamp) *TwoFactorUpdateOne {
	tfuo.mutation.ResetUpdateTime()
	tfuo.mutation.SetUpdateTime(ts)
	return tfuo
}

// AddUpdateTime adds ts to the "update_time" field.
func (tfuo *TwoFactorUpdateOne) AddUpdateTime(ts timeutil.TimeStamp) *TwoFactorUpdateOne {
	tfuo.mutation.AddUpdateTime(ts)
	return tfuo
}

// Mutation returns the TwoFactorMutation object of the builder.
func (tfuo *TwoFactorUpdateOne) Mutation() *TwoFactorMutation {
	return tfuo.mutation
}

// Where appends a list predicates to the TwoFactorUpdate builder.
func (tfuo *TwoFactorUpdateOne) Where(ps ...predicate.TwoFactor) *TwoFactorUpdateOne {
	tfuo.mutation.Where(ps...)
	return tfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfuo *TwoFactorUpdateOne) Select(field string, fields ...string) *TwoFactorUpdateOne {
	tfuo.fields = append([]string{field}, fields...)
	return tfuo
}

// Save executes the query and returns the updated TwoFactor entity.
func (tfuo *TwoFactorUpdateOne) Save(ctx context.Context) (*TwoFactor, error) {
	tfuo.defaults()
	return withHooks(ctx, tfuo.sqlSave, tfuo.mutation, tfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfuo *TwoFactorUpdateOne) SaveX(ctx context.Context) *TwoFactor {
	node, err := tfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfuo *TwoFactorUpdateOne) Exec(ctx context.Context) error {
	_, err := tfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfuo *TwoFactorUpdateOne) ExecX(ctx context.Context) {
	if err := tfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfuo *TwoFactorUpdateOne) defaults() {
	if _, ok := tfuo.mutation.UpdateTime(); !ok {
		v := twofactor.UpdateDefaultUpdateTime()
		tfuo.mutation.SetUpdateTime(v)
	}
}

func (tfuo *TwoFactorUpdateOne) sqlSave(ctx context.Context) (_node *TwoFactor, err error) {
	_spec := sqlgraph.NewUpdateSpec(twofactor.Table, twofactor.Columns, sqlgraph.NewFieldSpec(twofactor.FieldID, field.TypeInt64))
	id, ok := tfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "TwoFactor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twofactor.FieldID)
		for _, f := range fields {
			if !twofactor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != twofactor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfuo.mutation.UserID(); ok {
		_spec.SetField(twofactor.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tfuo.mutation.AddedUserID(); ok {
		_spec.AddField(twofactor.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tfuo.mutation.Secret(); ok {
		_spec.SetField(twofactor.FieldSecret, field.TypeString, value)
	}
	if value, ok := tfuo.mutation.ScratchSalt(); ok {
		_spec.SetField(twofactor.FieldScratchSalt, field.TypeString, value)
	}
	if value, ok := tfuo.mutation.ScratchHash(); ok {
		_spec.SetField(twofactor.FieldScratchHash, field.TypeString, value)
	}
	if value, ok := tfuo.mutation.LastUsedPasscode(); ok {
		_spec.SetField(twofactor.FieldLastUsedPasscode, field.TypeString, value)
	}
	if value, ok := tfuo.mutation.UpdateTime(); ok {
		_spec.SetField(twofactor.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := tfuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(twofactor.FieldUpdateTime, field.TypeInt64, value)
	}
	_node = &TwoFactor{config: tfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twofactor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfuo.mutation.done = true
	return _node, nil
}
