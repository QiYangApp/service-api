// Code generated by ent, DO NOT EDIT.

package models

import "entgo.io/ent/dialect"

func (c *AccessTokenClient) Debug() *AccessTokenClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &AccessTokenClient{config: cfg}
}

func (c *AccountsClient) Debug() *AccountsClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &AccountsClient{config: cfg}
}

func (c *MemberRoleRelatedPermissionClient) Debug() *MemberRoleRelatedPermissionClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &MemberRoleRelatedPermissionClient{config: cfg}
}

func (c *PermissionGroupClient) Debug() *PermissionGroupClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &PermissionGroupClient{config: cfg}
}

func (c *PermissionRelatedRouterClient) Debug() *PermissionRelatedRouterClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &PermissionRelatedRouterClient{config: cfg}
}

func (c *RouterClient) Debug() *RouterClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &RouterClient{config: cfg}
}

func (c *SourceClient) Debug() *SourceClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &SourceClient{config: cfg}
}

func (c *SourceDataClient) Debug() *SourceDataClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &SourceDataClient{config: cfg}
}

func (c *UserClient) Debug() *UserClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &UserClient{config: cfg}
}

func (c *UserAuthSourceClient) Debug() *UserAuthSourceClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &UserAuthSourceClient{config: cfg}
}

func (c *UserRelatedRoleClient) Debug() *UserRelatedRoleClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &UserRelatedRoleClient{config: cfg}
}

func (c *UserRoleClient) Debug() *UserRoleClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &UserRoleClient{config: cfg}
}

func (c *WakatimeClient) Debug() *WakatimeClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeClient{config: cfg}
}

func (c *WakatimeCategoryClient) Debug() *WakatimeCategoryClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeCategoryClient{config: cfg}
}

func (c *WakatimeDependencyClient) Debug() *WakatimeDependencyClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeDependencyClient{config: cfg}
}

func (c *WakatimeDurationClient) Debug() *WakatimeDurationClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeDurationClient{config: cfg}
}

func (c *WakatimeEditorClient) Debug() *WakatimeEditorClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeEditorClient{config: cfg}
}

func (c *WakatimeEntityClient) Debug() *WakatimeEntityClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeEntityClient{config: cfg}
}

func (c *WakatimeGrandTotalClient) Debug() *WakatimeGrandTotalClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeGrandTotalClient{config: cfg}
}

func (c *WakatimeHeartBeatClient) Debug() *WakatimeHeartBeatClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeHeartBeatClient{config: cfg}
}

func (c *WakatimeLanguageClient) Debug() *WakatimeLanguageClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeLanguageClient{config: cfg}
}

func (c *WakatimeProjectClient) Debug() *WakatimeProjectClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeProjectClient{config: cfg}
}

func (c *WakatimeProjectDurationClient) Debug() *WakatimeProjectDurationClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeProjectDurationClient{config: cfg}
}

func (c *WakatimeProjectInfoClient) Debug() *WakatimeProjectInfoClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeProjectInfoClient{config: cfg}
}

func (c *WakatimeSystemClient) Debug() *WakatimeSystemClient {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	return &WakatimeSystemClient{config: cfg}
}
