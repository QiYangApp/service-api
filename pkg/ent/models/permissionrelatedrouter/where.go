// Code generated by ent, DO NOT EDIT.

package permissionrelatedrouter

import (
	"ent/models/predicate"
	"ent/utils/timeutil"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldLTE(FieldID, id))
}

// RouterID applies equality check predicate on the "router_id" field. It's identical to RouterIDEQ.
func RouterID(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldRouterID, v))
}

// PermissionGroupID applies equality check predicate on the "permission_group_id" field. It's identical to PermissionGroupIDEQ.
func PermissionGroupID(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldPermissionGroupID, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldCreateTime, vc))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldUpdateTime, vc))
}

// RouterIDEQ applies the EQ predicate on the "router_id" field.
func RouterIDEQ(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldRouterID, v))
}

// RouterIDNEQ applies the NEQ predicate on the "router_id" field.
func RouterIDNEQ(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldNEQ(FieldRouterID, v))
}

// RouterIDIn applies the In predicate on the "router_id" field.
func RouterIDIn(vs ...uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldIn(FieldRouterID, vs...))
}

// RouterIDNotIn applies the NotIn predicate on the "router_id" field.
func RouterIDNotIn(vs ...uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldNotIn(FieldRouterID, vs...))
}

// RouterIDGT applies the GT predicate on the "router_id" field.
func RouterIDGT(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldGT(FieldRouterID, v))
}

// RouterIDGTE applies the GTE predicate on the "router_id" field.
func RouterIDGTE(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldGTE(FieldRouterID, v))
}

// RouterIDLT applies the LT predicate on the "router_id" field.
func RouterIDLT(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldLT(FieldRouterID, v))
}

// RouterIDLTE applies the LTE predicate on the "router_id" field.
func RouterIDLTE(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldLTE(FieldRouterID, v))
}

// PermissionGroupIDEQ applies the EQ predicate on the "permission_group_id" field.
func PermissionGroupIDEQ(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldPermissionGroupID, v))
}

// PermissionGroupIDNEQ applies the NEQ predicate on the "permission_group_id" field.
func PermissionGroupIDNEQ(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldNEQ(FieldPermissionGroupID, v))
}

// PermissionGroupIDIn applies the In predicate on the "permission_group_id" field.
func PermissionGroupIDIn(vs ...uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldIn(FieldPermissionGroupID, vs...))
}

// PermissionGroupIDNotIn applies the NotIn predicate on the "permission_group_id" field.
func PermissionGroupIDNotIn(vs ...uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldNotIn(FieldPermissionGroupID, vs...))
}

// PermissionGroupIDGT applies the GT predicate on the "permission_group_id" field.
func PermissionGroupIDGT(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldGT(FieldPermissionGroupID, v))
}

// PermissionGroupIDGTE applies the GTE predicate on the "permission_group_id" field.
func PermissionGroupIDGTE(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldGTE(FieldPermissionGroupID, v))
}

// PermissionGroupIDLT applies the LT predicate on the "permission_group_id" field.
func PermissionGroupIDLT(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldLT(FieldPermissionGroupID, v))
}

// PermissionGroupIDLTE applies the LTE predicate on the "permission_group_id" field.
func PermissionGroupIDLTE(v uuid.UUID) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.FieldLTE(FieldPermissionGroupID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldCreateTime, vc))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldNEQ(FieldCreateTime, vc))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.PermissionRelatedRouter(sql.FieldIn(FieldCreateTime, v...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.PermissionRelatedRouter(sql.FieldNotIn(FieldCreateTime, v...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldGT(FieldCreateTime, vc))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldGTE(FieldCreateTime, vc))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldLT(FieldCreateTime, vc))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldLTE(FieldCreateTime, vc))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldEQ(FieldUpdateTime, vc))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldNEQ(FieldUpdateTime, vc))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.PermissionRelatedRouter(sql.FieldIn(FieldUpdateTime, v...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.PermissionRelatedRouter(sql.FieldNotIn(FieldUpdateTime, v...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldGT(FieldUpdateTime, vc))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldGTE(FieldUpdateTime, vc))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldLT(FieldUpdateTime, vc))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v timeutil.TimeStamp) predicate.PermissionRelatedRouter {
	vc := int64(v)
	return predicate.PermissionRelatedRouter(sql.FieldLTE(FieldUpdateTime, vc))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PermissionRelatedRouter) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PermissionRelatedRouter) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PermissionRelatedRouter) predicate.PermissionRelatedRouter {
	return predicate.PermissionRelatedRouter(sql.NotPredicates(p))
}
