// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/permissionrelatedrouter"
	"ent/models/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionRelatedRouterDelete is the builder for deleting a PermissionRelatedRouter entity.
type PermissionRelatedRouterDelete struct {
	config
	hooks    []Hook
	mutation *PermissionRelatedRouterMutation
}

// Where appends a list predicates to the PermissionRelatedRouterDelete builder.
func (prrd *PermissionRelatedRouterDelete) Where(ps ...predicate.PermissionRelatedRouter) *PermissionRelatedRouterDelete {
	prrd.mutation.Where(ps...)
	return prrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (prrd *PermissionRelatedRouterDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, prrd.sqlExec, prrd.mutation, prrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (prrd *PermissionRelatedRouterDelete) ExecX(ctx context.Context) int {
	n, err := prrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (prrd *PermissionRelatedRouterDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(permissionrelatedrouter.Table, sqlgraph.NewFieldSpec(permissionrelatedrouter.FieldID, field.TypeInt64))
	if ps := prrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, prrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	prrd.mutation.done = true
	return affected, err
}

// PermissionRelatedRouterDeleteOne is the builder for deleting a single PermissionRelatedRouter entity.
type PermissionRelatedRouterDeleteOne struct {
	prrd *PermissionRelatedRouterDelete
}

// Where appends a list predicates to the PermissionRelatedRouterDelete builder.
func (prrdo *PermissionRelatedRouterDeleteOne) Where(ps ...predicate.PermissionRelatedRouter) *PermissionRelatedRouterDeleteOne {
	prrdo.prrd.mutation.Where(ps...)
	return prrdo
}

// Exec executes the deletion query.
func (prrdo *PermissionRelatedRouterDeleteOne) Exec(ctx context.Context) error {
	n, err := prrdo.prrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{permissionrelatedrouter.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (prrdo *PermissionRelatedRouterDeleteOne) ExecX(ctx context.Context) {
	if err := prrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
