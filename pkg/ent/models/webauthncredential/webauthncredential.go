// Code generated by ent, DO NOT EDIT.

package webauthncredential

import (
	"ent/utils/timeutil"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the webauthncredential type in the database.
	Label = "web_authn_credential"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLowerName holds the string denoting the lower_name field in the database.
	FieldLowerName = "lower_name"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCredentialID holds the string denoting the credential_id field in the database.
	FieldCredentialID = "credential_id"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldAttestationType holds the string denoting the attestation_type field in the database.
	FieldAttestationType = "attestation_type"
	// FieldAAGUID holds the string denoting the aaguid field in the database.
	FieldAAGUID = "aaguid"
	// FieldSignCount holds the string denoting the sign_count field in the database.
	FieldSignCount = "sign_count"
	// FieldCloneWarning holds the string denoting the clone_warning field in the database.
	FieldCloneWarning = "clone_warning"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the webauthncredential in the database.
	Table = "web_authn_credentials"
)

// Columns holds all SQL columns for webauthncredential fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLowerName,
	FieldUserID,
	FieldCredentialID,
	FieldPublicKey,
	FieldAttestationType,
	FieldAAGUID,
	FieldSignCount,
	FieldCloneWarning,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CredentialIDValidator is a validator for the "credential_id" field. It is called by the builders before save.
	CredentialIDValidator func([]byte) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime timeutil.TimeStamp
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() timeutil.TimeStamp
)

// OrderOption defines the ordering options for the WebAuthnCredential queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLowerName orders the results by the lower_name field.
func ByLowerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowerName, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAttestationType orders the results by the attestation_type field.
func ByAttestationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttestationType, opts...).ToFunc()
}

// BySignCount orders the results by the sign_count field.
func BySignCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignCount, opts...).ToFunc()
}

// ByCloneWarning orders the results by the clone_warning field.
func ByCloneWarning(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloneWarning, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
