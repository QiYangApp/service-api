// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/models/user"
	"ent/types/auth"
	"fmt"
	"frame/util/timeutil"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// member
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LowerName holds the value of the "lower_name" field.
	LowerName string `json:"lower_name,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// PasswdSalt holds the value of the "passwd_salt" field.
	PasswdSalt string `json:"passwd_salt,omitempty"`
	// PasswdHashAlgo holds the value of the "passwd_hash_algo" field.
	PasswdHashAlgo string `json:"passwd_hash_algo,omitempty"`
	// Passwd holds the value of the "passwd" field.
	Passwd string `json:"passwd,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Theme holds the value of the "theme" field.
	Theme string `json:"theme,omitempty"`
	// LoginName holds the value of the "login_name" field.
	LoginName string `json:"login_name,omitempty"`
	// LoginSource holds the value of the "login_source" field.
	LoginSource int64 `json:"login_source,omitempty"`
	// LoginType holds the value of the "login_type" field.
	LoginType auth.Type `json:"login_type,omitempty"`
	// IsRestricted holds the value of the "is_restricted" field.
	IsRestricted bool `json:"is_restricted,omitempty"`
	// true is activated
	IsActive bool `json:"is_active,omitempty"`
	// is web login
	ProhibitLogin bool `json:"prohibit_login,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime timeutil.TimeStamp `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   timeutil.TimeStamp `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsRestricted, user.FieldIsActive, user.FieldProhibitLogin:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldLoginSource, user.FieldLoginType, user.FieldCreateTime, user.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case user.FieldAvatar, user.FieldEmail, user.FieldName, user.FieldLowerName, user.FieldFullName, user.FieldPasswdSalt, user.FieldPasswdHashAlgo, user.FieldPasswd, user.FieldLanguage, user.FieldTheme, user.FieldLoginName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int64(value.Int64)
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldLowerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lower_name", values[i])
			} else if value.Valid {
				u.LowerName = value.String
			}
		case user.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				u.FullName = value.String
			}
		case user.FieldPasswdSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passwd_salt", values[i])
			} else if value.Valid {
				u.PasswdSalt = value.String
			}
		case user.FieldPasswdHashAlgo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passwd_hash_algo", values[i])
			} else if value.Valid {
				u.PasswdHashAlgo = value.String
			}
		case user.FieldPasswd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passwd", values[i])
			} else if value.Valid {
				u.Passwd = value.String
			}
		case user.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				u.Language = value.String
			}
		case user.FieldTheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field theme", values[i])
			} else if value.Valid {
				u.Theme = value.String
			}
		case user.FieldLoginName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login_name", values[i])
			} else if value.Valid {
				u.LoginName = value.String
			}
		case user.FieldLoginSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_source", values[i])
			} else if value.Valid {
				u.LoginSource = value.Int64
			}
		case user.FieldLoginType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field login_type", values[i])
			} else if value.Valid {
				u.LoginType = auth.Type(value.Int64)
			}
		case user.FieldIsRestricted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_restricted", values[i])
			} else if value.Valid {
				u.IsRestricted = value.Bool
			}
		case user.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				u.IsActive = value.Bool
			}
		case user.FieldProhibitLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field prohibit_login", values[i])
			} else if value.Valid {
				u.ProhibitLogin = value.Bool
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = timeutil.TimeStamp(value.Int64)
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = timeutil.TimeStamp(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("models: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("lower_name=")
	builder.WriteString(u.LowerName)
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(u.FullName)
	builder.WriteString(", ")
	builder.WriteString("passwd_salt=")
	builder.WriteString(u.PasswdSalt)
	builder.WriteString(", ")
	builder.WriteString("passwd_hash_algo=")
	builder.WriteString(u.PasswdHashAlgo)
	builder.WriteString(", ")
	builder.WriteString("passwd=")
	builder.WriteString(u.Passwd)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(u.Language)
	builder.WriteString(", ")
	builder.WriteString("theme=")
	builder.WriteString(u.Theme)
	builder.WriteString(", ")
	builder.WriteString("login_name=")
	builder.WriteString(u.LoginName)
	builder.WriteString(", ")
	builder.WriteString("login_source=")
	builder.WriteString(fmt.Sprintf("%v", u.LoginSource))
	builder.WriteString(", ")
	builder.WriteString("login_type=")
	builder.WriteString(fmt.Sprintf("%v", u.LoginType))
	builder.WriteString(", ")
	builder.WriteString("is_restricted=")
	builder.WriteString(fmt.Sprintf("%v", u.IsRestricted))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", u.IsActive))
	builder.WriteString(", ")
	builder.WriteString("prohibit_login=")
	builder.WriteString(fmt.Sprintf("%v", u.ProhibitLogin))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", u.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
