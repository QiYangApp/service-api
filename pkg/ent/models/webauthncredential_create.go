// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/webauthncredential"
	"errors"
	"fmt"
	"frame/util/timeutil"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebAuthnCredentialCreate is the builder for creating a WebAuthnCredential entity.
type WebAuthnCredentialCreate struct {
	config
	mutation *WebAuthnCredentialMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (wacc *WebAuthnCredentialCreate) SetName(s string) *WebAuthnCredentialCreate {
	wacc.mutation.SetName(s)
	return wacc
}

// SetLowerName sets the "lower_name" field.
func (wacc *WebAuthnCredentialCreate) SetLowerName(s string) *WebAuthnCredentialCreate {
	wacc.mutation.SetLowerName(s)
	return wacc
}

// SetUserID sets the "user_id" field.
func (wacc *WebAuthnCredentialCreate) SetUserID(i int64) *WebAuthnCredentialCreate {
	wacc.mutation.SetUserID(i)
	return wacc
}

// SetCredentialID sets the "credential_id" field.
func (wacc *WebAuthnCredentialCreate) SetCredentialID(b []byte) *WebAuthnCredentialCreate {
	wacc.mutation.SetCredentialID(b)
	return wacc
}

// SetPublicKey sets the "public_key" field.
func (wacc *WebAuthnCredentialCreate) SetPublicKey(b []byte) *WebAuthnCredentialCreate {
	wacc.mutation.SetPublicKey(b)
	return wacc
}

// SetAttestationType sets the "attestation_type" field.
func (wacc *WebAuthnCredentialCreate) SetAttestationType(s string) *WebAuthnCredentialCreate {
	wacc.mutation.SetAttestationType(s)
	return wacc
}

// SetAAGUID sets the "AAGUID" field.
func (wacc *WebAuthnCredentialCreate) SetAAGUID(b []byte) *WebAuthnCredentialCreate {
	wacc.mutation.SetAAGUID(b)
	return wacc
}

// SetSignCount sets the "sign_count" field.
func (wacc *WebAuthnCredentialCreate) SetSignCount(u uint32) *WebAuthnCredentialCreate {
	wacc.mutation.SetSignCount(u)
	return wacc
}

// SetCloneWarning sets the "clone_warning" field.
func (wacc *WebAuthnCredentialCreate) SetCloneWarning(b bool) *WebAuthnCredentialCreate {
	wacc.mutation.SetCloneWarning(b)
	return wacc
}

// SetCreateTime sets the "create_time" field.
func (wacc *WebAuthnCredentialCreate) SetCreateTime(ts timeutil.TimeStamp) *WebAuthnCredentialCreate {
	wacc.mutation.SetCreateTime(ts)
	return wacc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wacc *WebAuthnCredentialCreate) SetNillableCreateTime(ts *timeutil.TimeStamp) *WebAuthnCredentialCreate {
	if ts != nil {
		wacc.SetCreateTime(*ts)
	}
	return wacc
}

// SetUpdateTime sets the "update_time" field.
func (wacc *WebAuthnCredentialCreate) SetUpdateTime(ts timeutil.TimeStamp) *WebAuthnCredentialCreate {
	wacc.mutation.SetUpdateTime(ts)
	return wacc
}

// SetID sets the "id" field.
func (wacc *WebAuthnCredentialCreate) SetID(i int64) *WebAuthnCredentialCreate {
	wacc.mutation.SetID(i)
	return wacc
}

// Mutation returns the WebAuthnCredentialMutation object of the builder.
func (wacc *WebAuthnCredentialCreate) Mutation() *WebAuthnCredentialMutation {
	return wacc.mutation
}

// Save creates the WebAuthnCredential in the database.
func (wacc *WebAuthnCredentialCreate) Save(ctx context.Context) (*WebAuthnCredential, error) {
	wacc.defaults()
	return withHooks(ctx, wacc.sqlSave, wacc.mutation, wacc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wacc *WebAuthnCredentialCreate) SaveX(ctx context.Context) *WebAuthnCredential {
	v, err := wacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wacc *WebAuthnCredentialCreate) Exec(ctx context.Context) error {
	_, err := wacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wacc *WebAuthnCredentialCreate) ExecX(ctx context.Context) {
	if err := wacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wacc *WebAuthnCredentialCreate) defaults() {
	if _, ok := wacc.mutation.CreateTime(); !ok {
		v := webauthncredential.DefaultCreateTime
		wacc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wacc *WebAuthnCredentialCreate) check() error {
	if _, ok := wacc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`models: missing required field "WebAuthnCredential.name"`)}
	}
	if _, ok := wacc.mutation.LowerName(); !ok {
		return &ValidationError{Name: "lower_name", err: errors.New(`models: missing required field "WebAuthnCredential.lower_name"`)}
	}
	if _, ok := wacc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`models: missing required field "WebAuthnCredential.user_id"`)}
	}
	if _, ok := wacc.mutation.CredentialID(); !ok {
		return &ValidationError{Name: "credential_id", err: errors.New(`models: missing required field "WebAuthnCredential.credential_id"`)}
	}
	if v, ok := wacc.mutation.CredentialID(); ok {
		if err := webauthncredential.CredentialIDValidator(v); err != nil {
			return &ValidationError{Name: "credential_id", err: fmt.Errorf(`models: validator failed for field "WebAuthnCredential.credential_id": %w`, err)}
		}
	}
	if _, ok := wacc.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`models: missing required field "WebAuthnCredential.public_key"`)}
	}
	if _, ok := wacc.mutation.AttestationType(); !ok {
		return &ValidationError{Name: "attestation_type", err: errors.New(`models: missing required field "WebAuthnCredential.attestation_type"`)}
	}
	if _, ok := wacc.mutation.AAGUID(); !ok {
		return &ValidationError{Name: "AAGUID", err: errors.New(`models: missing required field "WebAuthnCredential.AAGUID"`)}
	}
	if _, ok := wacc.mutation.SignCount(); !ok {
		return &ValidationError{Name: "sign_count", err: errors.New(`models: missing required field "WebAuthnCredential.sign_count"`)}
	}
	if _, ok := wacc.mutation.CloneWarning(); !ok {
		return &ValidationError{Name: "clone_warning", err: errors.New(`models: missing required field "WebAuthnCredential.clone_warning"`)}
	}
	if _, ok := wacc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`models: missing required field "WebAuthnCredential.create_time"`)}
	}
	if _, ok := wacc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`models: missing required field "WebAuthnCredential.update_time"`)}
	}
	return nil
}

func (wacc *WebAuthnCredentialCreate) sqlSave(ctx context.Context) (*WebAuthnCredential, error) {
	if err := wacc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	wacc.mutation.id = &_node.ID
	wacc.mutation.done = true
	return _node, nil
}

func (wacc *WebAuthnCredentialCreate) createSpec() (*WebAuthnCredential, *sqlgraph.CreateSpec) {
	var (
		_node = &WebAuthnCredential{config: wacc.config}
		_spec = sqlgraph.NewCreateSpec(webauthncredential.Table, sqlgraph.NewFieldSpec(webauthncredential.FieldID, field.TypeInt64))
	)
	if id, ok := wacc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wacc.mutation.Name(); ok {
		_spec.SetField(webauthncredential.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wacc.mutation.LowerName(); ok {
		_spec.SetField(webauthncredential.FieldLowerName, field.TypeString, value)
		_node.LowerName = value
	}
	if value, ok := wacc.mutation.UserID(); ok {
		_spec.SetField(webauthncredential.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := wacc.mutation.CredentialID(); ok {
		_spec.SetField(webauthncredential.FieldCredentialID, field.TypeBytes, value)
		_node.CredentialID = value
	}
	if value, ok := wacc.mutation.PublicKey(); ok {
		_spec.SetField(webauthncredential.FieldPublicKey, field.TypeBytes, value)
		_node.PublicKey = value
	}
	if value, ok := wacc.mutation.AttestationType(); ok {
		_spec.SetField(webauthncredential.FieldAttestationType, field.TypeString, value)
		_node.AttestationType = value
	}
	if value, ok := wacc.mutation.AAGUID(); ok {
		_spec.SetField(webauthncredential.FieldAAGUID, field.TypeBytes, value)
		_node.AAGUID = value
	}
	if value, ok := wacc.mutation.SignCount(); ok {
		_spec.SetField(webauthncredential.FieldSignCount, field.TypeUint32, value)
		_node.SignCount = value
	}
	if value, ok := wacc.mutation.CloneWarning(); ok {
		_spec.SetField(webauthncredential.FieldCloneWarning, field.TypeBool, value)
		_node.CloneWarning = value
	}
	if value, ok := wacc.mutation.CreateTime(); ok {
		_spec.SetField(webauthncredential.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = value
	}
	if value, ok := wacc.mutation.UpdateTime(); ok {
		_spec.SetField(webauthncredential.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// WebAuthnCredentialCreateBulk is the builder for creating many WebAuthnCredential entities in bulk.
type WebAuthnCredentialCreateBulk struct {
	config
	err      error
	builders []*WebAuthnCredentialCreate
}

// Save creates the WebAuthnCredential entities in the database.
func (waccb *WebAuthnCredentialCreateBulk) Save(ctx context.Context) ([]*WebAuthnCredential, error) {
	if waccb.err != nil {
		return nil, waccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(waccb.builders))
	nodes := make([]*WebAuthnCredential, len(waccb.builders))
	mutators := make([]Mutator, len(waccb.builders))
	for i := range waccb.builders {
		func(i int, root context.Context) {
			builder := waccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebAuthnCredentialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, waccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, waccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, waccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (waccb *WebAuthnCredentialCreateBulk) SaveX(ctx context.Context) []*WebAuthnCredential {
	v, err := waccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (waccb *WebAuthnCredentialCreateBulk) Exec(ctx context.Context) error {
	_, err := waccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (waccb *WebAuthnCredentialCreateBulk) ExecX(ctx context.Context) {
	if err := waccb.Exec(ctx); err != nil {
		panic(err)
	}
}
