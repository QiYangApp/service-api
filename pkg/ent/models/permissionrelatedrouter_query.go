// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/permissionrelatedrouter"
	"ent/models/predicate"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionRelatedRouterQuery is the builder for querying PermissionRelatedRouter entities.
type PermissionRelatedRouterQuery struct {
	config
	ctx        *QueryContext
	order      []permissionrelatedrouter.OrderOption
	inters     []Interceptor
	predicates []predicate.PermissionRelatedRouter
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*PermissionRelatedRouter) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PermissionRelatedRouterQuery builder.
func (prrq *PermissionRelatedRouterQuery) Where(ps ...predicate.PermissionRelatedRouter) *PermissionRelatedRouterQuery {
	prrq.predicates = append(prrq.predicates, ps...)
	return prrq
}

// Limit the number of records to be returned by this query.
func (prrq *PermissionRelatedRouterQuery) Limit(limit int) *PermissionRelatedRouterQuery {
	prrq.ctx.Limit = &limit
	return prrq
}

// Offset to start from.
func (prrq *PermissionRelatedRouterQuery) Offset(offset int) *PermissionRelatedRouterQuery {
	prrq.ctx.Offset = &offset
	return prrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (prrq *PermissionRelatedRouterQuery) Unique(unique bool) *PermissionRelatedRouterQuery {
	prrq.ctx.Unique = &unique
	return prrq
}

// Order specifies how the records should be ordered.
func (prrq *PermissionRelatedRouterQuery) Order(o ...permissionrelatedrouter.OrderOption) *PermissionRelatedRouterQuery {
	prrq.order = append(prrq.order, o...)
	return prrq
}

// First returns the first PermissionRelatedRouter entity from the query.
// Returns a *NotFoundError when no PermissionRelatedRouter was found.
func (prrq *PermissionRelatedRouterQuery) First(ctx context.Context) (*PermissionRelatedRouter, error) {
	nodes, err := prrq.Limit(1).All(setContextOp(ctx, prrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{permissionrelatedrouter.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (prrq *PermissionRelatedRouterQuery) FirstX(ctx context.Context) *PermissionRelatedRouter {
	node, err := prrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PermissionRelatedRouter ID from the query.
// Returns a *NotFoundError when no PermissionRelatedRouter ID was found.
func (prrq *PermissionRelatedRouterQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = prrq.Limit(1).IDs(setContextOp(ctx, prrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{permissionrelatedrouter.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (prrq *PermissionRelatedRouterQuery) FirstIDX(ctx context.Context) int64 {
	id, err := prrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PermissionRelatedRouter entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PermissionRelatedRouter entity is found.
// Returns a *NotFoundError when no PermissionRelatedRouter entities are found.
func (prrq *PermissionRelatedRouterQuery) Only(ctx context.Context) (*PermissionRelatedRouter, error) {
	nodes, err := prrq.Limit(2).All(setContextOp(ctx, prrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{permissionrelatedrouter.Label}
	default:
		return nil, &NotSingularError{permissionrelatedrouter.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (prrq *PermissionRelatedRouterQuery) OnlyX(ctx context.Context) *PermissionRelatedRouter {
	node, err := prrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PermissionRelatedRouter ID in the query.
// Returns a *NotSingularError when more than one PermissionRelatedRouter ID is found.
// Returns a *NotFoundError when no entities are found.
func (prrq *PermissionRelatedRouterQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = prrq.Limit(2).IDs(setContextOp(ctx, prrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{permissionrelatedrouter.Label}
	default:
		err = &NotSingularError{permissionrelatedrouter.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (prrq *PermissionRelatedRouterQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := prrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PermissionRelatedRouters.
func (prrq *PermissionRelatedRouterQuery) All(ctx context.Context) ([]*PermissionRelatedRouter, error) {
	ctx = setContextOp(ctx, prrq.ctx, "All")
	if err := prrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PermissionRelatedRouter, *PermissionRelatedRouterQuery]()
	return withInterceptors[[]*PermissionRelatedRouter](ctx, prrq, qr, prrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (prrq *PermissionRelatedRouterQuery) AllX(ctx context.Context) []*PermissionRelatedRouter {
	nodes, err := prrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PermissionRelatedRouter IDs.
func (prrq *PermissionRelatedRouterQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if prrq.ctx.Unique == nil && prrq.path != nil {
		prrq.Unique(true)
	}
	ctx = setContextOp(ctx, prrq.ctx, "IDs")
	if err = prrq.Select(permissionrelatedrouter.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (prrq *PermissionRelatedRouterQuery) IDsX(ctx context.Context) []int64 {
	ids, err := prrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (prrq *PermissionRelatedRouterQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, prrq.ctx, "Count")
	if err := prrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, prrq, querierCount[*PermissionRelatedRouterQuery](), prrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (prrq *PermissionRelatedRouterQuery) CountX(ctx context.Context) int {
	count, err := prrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (prrq *PermissionRelatedRouterQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, prrq.ctx, "Exist")
	switch _, err := prrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("models: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (prrq *PermissionRelatedRouterQuery) ExistX(ctx context.Context) bool {
	exist, err := prrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PermissionRelatedRouterQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (prrq *PermissionRelatedRouterQuery) Clone() *PermissionRelatedRouterQuery {
	if prrq == nil {
		return nil
	}
	return &PermissionRelatedRouterQuery{
		config:     prrq.config,
		ctx:        prrq.ctx.Clone(),
		order:      append([]permissionrelatedrouter.OrderOption{}, prrq.order...),
		inters:     append([]Interceptor{}, prrq.inters...),
		predicates: append([]predicate.PermissionRelatedRouter{}, prrq.predicates...),
		// clone intermediate query.
		sql:  prrq.sql.Clone(),
		path: prrq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RouterID uuid.UUID `json:"router_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PermissionRelatedRouter.Query().
//		GroupBy(permissionrelatedrouter.FieldRouterID).
//		Aggregate(models.Count()).
//		Scan(ctx, &v)
func (prrq *PermissionRelatedRouterQuery) GroupBy(field string, fields ...string) *PermissionRelatedRouterGroupBy {
	prrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PermissionRelatedRouterGroupBy{build: prrq}
	grbuild.flds = &prrq.ctx.Fields
	grbuild.label = permissionrelatedrouter.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RouterID uuid.UUID `json:"router_id,omitempty"`
//	}
//
//	client.PermissionRelatedRouter.Query().
//		Select(permissionrelatedrouter.FieldRouterID).
//		Scan(ctx, &v)
func (prrq *PermissionRelatedRouterQuery) Select(fields ...string) *PermissionRelatedRouterSelect {
	prrq.ctx.Fields = append(prrq.ctx.Fields, fields...)
	sbuild := &PermissionRelatedRouterSelect{PermissionRelatedRouterQuery: prrq}
	sbuild.label = permissionrelatedrouter.Label
	sbuild.flds, sbuild.scan = &prrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PermissionRelatedRouterSelect configured with the given aggregations.
func (prrq *PermissionRelatedRouterQuery) Aggregate(fns ...AggregateFunc) *PermissionRelatedRouterSelect {
	return prrq.Select().Aggregate(fns...)
}

func (prrq *PermissionRelatedRouterQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range prrq.inters {
		if inter == nil {
			return fmt.Errorf("models: uninitialized interceptor (forgotten import models/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, prrq); err != nil {
				return err
			}
		}
	}
	for _, f := range prrq.ctx.Fields {
		if !permissionrelatedrouter.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
		}
	}
	if prrq.path != nil {
		prev, err := prrq.path(ctx)
		if err != nil {
			return err
		}
		prrq.sql = prev
	}
	return nil
}

func (prrq *PermissionRelatedRouterQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PermissionRelatedRouter, error) {
	var (
		nodes = []*PermissionRelatedRouter{}
		_spec = prrq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PermissionRelatedRouter).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PermissionRelatedRouter{config: prrq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(prrq.modifiers) > 0 {
		_spec.Modifiers = prrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, prrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range prrq.loadTotal {
		if err := prrq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (prrq *PermissionRelatedRouterQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := prrq.querySpec()
	if len(prrq.modifiers) > 0 {
		_spec.Modifiers = prrq.modifiers
	}
	_spec.Node.Columns = prrq.ctx.Fields
	if len(prrq.ctx.Fields) > 0 {
		_spec.Unique = prrq.ctx.Unique != nil && *prrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, prrq.driver, _spec)
}

func (prrq *PermissionRelatedRouterQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(permissionrelatedrouter.Table, permissionrelatedrouter.Columns, sqlgraph.NewFieldSpec(permissionrelatedrouter.FieldID, field.TypeInt64))
	_spec.From = prrq.sql
	if unique := prrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if prrq.path != nil {
		_spec.Unique = true
	}
	if fields := prrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissionrelatedrouter.FieldID)
		for i := range fields {
			if fields[i] != permissionrelatedrouter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := prrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := prrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := prrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := prrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (prrq *PermissionRelatedRouterQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(prrq.driver.Dialect())
	t1 := builder.Table(permissionrelatedrouter.Table)
	columns := prrq.ctx.Fields
	if len(columns) == 0 {
		columns = permissionrelatedrouter.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if prrq.sql != nil {
		selector = prrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if prrq.ctx.Unique != nil && *prrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range prrq.predicates {
		p(selector)
	}
	for _, p := range prrq.order {
		p(selector)
	}
	if offset := prrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := prrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PermissionRelatedRouterGroupBy is the group-by builder for PermissionRelatedRouter entities.
type PermissionRelatedRouterGroupBy struct {
	selector
	build *PermissionRelatedRouterQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (prrgb *PermissionRelatedRouterGroupBy) Aggregate(fns ...AggregateFunc) *PermissionRelatedRouterGroupBy {
	prrgb.fns = append(prrgb.fns, fns...)
	return prrgb
}

// Scan applies the selector query and scans the result into the given value.
func (prrgb *PermissionRelatedRouterGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prrgb.build.ctx, "GroupBy")
	if err := prrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PermissionRelatedRouterQuery, *PermissionRelatedRouterGroupBy](ctx, prrgb.build, prrgb, prrgb.build.inters, v)
}

func (prrgb *PermissionRelatedRouterGroupBy) sqlScan(ctx context.Context, root *PermissionRelatedRouterQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(prrgb.fns))
	for _, fn := range prrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*prrgb.flds)+len(prrgb.fns))
		for _, f := range *prrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*prrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PermissionRelatedRouterSelect is the builder for selecting fields of PermissionRelatedRouter entities.
type PermissionRelatedRouterSelect struct {
	*PermissionRelatedRouterQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (prrs *PermissionRelatedRouterSelect) Aggregate(fns ...AggregateFunc) *PermissionRelatedRouterSelect {
	prrs.fns = append(prrs.fns, fns...)
	return prrs
}

// Scan applies the selector query and scans the result into the given value.
func (prrs *PermissionRelatedRouterSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prrs.ctx, "Select")
	if err := prrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PermissionRelatedRouterQuery, *PermissionRelatedRouterSelect](ctx, prrs.PermissionRelatedRouterQuery, prrs, prrs.inters, v)
}

func (prrs *PermissionRelatedRouterSelect) sqlScan(ctx context.Context, root *PermissionRelatedRouterQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(prrs.fns))
	for _, fn := range prrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*prrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
