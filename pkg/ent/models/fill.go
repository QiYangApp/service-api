// Code generated by ent, DO NOT EDIT.

package models

func (atc *AccessTokenCreate) SetAccessToken(input *AccessToken) *AccessTokenCreate {
	atc.SetUserID(input.UserID)
	atc.SetName(input.Name)
	atc.SetToken(input.Token)
	atc.SetTokenHash(input.TokenHash)
	atc.SetTokenSalt(input.TokenSalt)
	atc.SetTokenLastEight(input.TokenLastEight)
	atc.SetScope(input.Scope)
	atc.SetHasRecentActivity(input.HasRecentActivity)
	atc.SetHasUsed(input.HasUsed)
	atc.SetCreateTime(input.CreateTime)
	return atc
}

func (ac *AccountsCreate) SetAccounts(input *Accounts) *AccountsCreate {
	ac.SetUserID(input.UserID)
	ac.SetAccount(input.Account)
	ac.SetType(input.Type)
	ac.SetDesc(input.Desc)
	ac.SetIsPrivate(input.IsPrivate)
	ac.SetIsActivated(input.IsActivated)
	ac.SetIsPrimary(input.IsPrimary)
	ac.SetCreateTime(input.CreateTime)
	ac.SetUpdateTime(input.UpdateTime)
	return ac
}

func (mrrpc *MemberRoleRelatedPermissionCreate) SetMemberRoleRelatedPermission(input *MemberRoleRelatedPermission) *MemberRoleRelatedPermissionCreate {
	mrrpc.SetRoleID(input.RoleID)
	mrrpc.SetPermissionGroupID(input.PermissionGroupID)
	mrrpc.SetCreateTime(input.CreateTime)
	mrrpc.SetUpdateTime(input.UpdateTime)
	return mrrpc
}

func (pgc *PermissionGroupCreate) SetPermissionGroup(input *PermissionGroup) *PermissionGroupCreate {
	pgc.SetPermissionName(input.PermissionName)
	pgc.SetIoc(input.Ioc)
	pgc.SetSort(input.Sort)
	pgc.SetLeft(input.Left)
	pgc.SetRight(input.Right)
	pgc.SetState(input.State)
	pgc.SetCreateTime(input.CreateTime)
	pgc.SetUpdateTime(input.UpdateTime)
	return pgc
}

func (prrc *PermissionRelatedRouterCreate) SetPermissionRelatedRouter(input *PermissionRelatedRouter) *PermissionRelatedRouterCreate {
	prrc.SetRouterID(input.RouterID)
	prrc.SetPermissionGroupID(input.PermissionGroupID)
	prrc.SetCreateTime(input.CreateTime)
	prrc.SetUpdateTime(input.UpdateTime)
	return prrc
}

func (rc *RouterCreate) SetRouter(input *Router) *RouterCreate {
	rc.SetRouteName(input.RouteName)
	rc.SetRoute(input.Route)
	rc.SetDescription(input.Description)
	rc.SetState(input.State)
	rc.SetCreateTime(input.CreateTime)
	rc.SetUpdateTime(input.UpdateTime)
	return rc
}

func (sc *SourceCreate) SetSource(input *Source) *SourceCreate {
	sc.SetType(input.Type)
	sc.SetName(input.Name)
	sc.SetIsActive(input.IsActive)
	sc.SetIsSyncEnabled(input.IsSyncEnabled)
	sc.SetCfg(input.Cfg)
	sc.SetCreateTime(input.CreateTime)
	sc.SetUpdateTime(input.UpdateTime)
	return sc
}

func (sdc *SourceDataCreate) SetSourceData(input *SourceData) *SourceDataCreate {
	sdc.SetUserID(input.UserID)
	sdc.SetType(input.Type)
	sdc.SetSubType(input.SubType)
	sdc.SetInfo(input.Info)
	sdc.SetSnapshot(input.Snapshot)
	sdc.SetCreateTime(input.CreateTime)
	sdc.SetUpdateTime(input.UpdateTime)
	return sdc
}

func (tfc *TwoFactorCreate) SetTwoFactor(input *TwoFactor) *TwoFactorCreate {
	tfc.SetUserID(input.UserID)
	tfc.SetSecret(input.Secret)
	tfc.SetScratchSalt(input.ScratchSalt)
	tfc.SetScratchHash(input.ScratchHash)
	tfc.SetLastUsedPasscode(input.LastUsedPasscode)
	tfc.SetCreateTime(input.CreateTime)
	tfc.SetUpdateTime(input.UpdateTime)
	return tfc
}

func (uc *UserCreate) SetUser(input *User) *UserCreate {
	uc.SetAvatar(input.Avatar)
	uc.SetEmail(input.Email)
	uc.SetName(input.Name)
	uc.SetLowerName(input.LowerName)
	uc.SetFullName(input.FullName)
	uc.SetPasswdSalt(input.PasswdSalt)
	uc.SetPasswdHashAlgo(input.PasswdHashAlgo)
	uc.SetPasswd(input.Passwd)
	uc.SetLanguage(input.Language)
	uc.SetTheme(input.Theme)
	uc.SetLoginName(input.LoginName)
	uc.SetLoginSource(input.LoginSource)
	uc.SetLoginType(input.LoginType)
	uc.SetIsRestricted(input.IsRestricted)
	uc.SetIsActive(input.IsActive)
	uc.SetProhibitLogin(input.ProhibitLogin)
	uc.SetCreateTime(input.CreateTime)
	uc.SetUpdateTime(input.UpdateTime)
	return uc
}

func (uasc *UserAuthSourceCreate) SetUserAuthSource(input *UserAuthSource) *UserAuthSourceCreate {
	uasc.SetUserID(input.UserID)
	uasc.SetToken(input.Token)
	uasc.SetTokenSalt(input.TokenSalt)
	uasc.SetTokenLastEight(input.TokenLastEight)
	uasc.SetChannel(input.Channel)
	uasc.SetDevice(input.Device)
	uasc.SetDeviceDetail(input.DeviceDetail)
	uasc.SetClientIP(input.ClientIP)
	uasc.SetRemoteIP(input.RemoteIP)
	uasc.SetSnapshot(input.Snapshot)
	uasc.SetLoginName(input.LoginName)
	uasc.SetLoginSource(input.LoginSource)
	uasc.SetLoginType(input.LoginType)
	uasc.SetCreateTime(input.CreateTime)
	uasc.SetUpdateTime(input.UpdateTime)
	return uasc
}

func (urrc *UserRelatedRoleCreate) SetUserRelatedRole(input *UserRelatedRole) *UserRelatedRoleCreate {
	urrc.SetUserID(input.UserID)
	urrc.SetRoleID(input.RoleID)
	urrc.SetCreateTime(input.CreateTime)
	urrc.SetUpdateTime(input.UpdateTime)
	return urrc
}

func (urc *UserRoleCreate) SetUserRole(input *UserRole) *UserRoleCreate {
	urc.SetRoleName(input.RoleName)
	urc.SetState(input.State)
	urc.SetCreateTime(input.CreateTime)
	urc.SetUpdateTime(input.UpdateTime)
	return urc
}

func (wc *WakatimeCreate) SetWakatime(input *Wakatime) *WakatimeCreate {
	wc.SetUserID(input.UserID)
	wc.SetKey(input.Key)
	wc.SetAPI(input.API)
	wc.SetState(input.State)
	wc.SetCreateTime(input.CreateTime)
	wc.SetUpdateTime(input.UpdateTime)
	return wc
}

func (wcc *WakatimeCategoryCreate) SetWakatimeCategory(input *WakatimeCategory) *WakatimeCategoryCreate {
	wcc.SetWakatimeID(input.WakatimeID)
	wcc.SetUserID(input.UserID)
	wcc.SetName(input.Name)
	wcc.SetTotalSeconds(input.TotalSeconds)
	wcc.SetCreateTime(input.CreateTime)
	wcc.SetUpdateTime(input.UpdateTime)
	return wcc
}

func (wdc *WakatimeDependencyCreate) SetWakatimeDependency(input *WakatimeDependency) *WakatimeDependencyCreate {
	wdc.SetWakatimeID(input.WakatimeID)
	wdc.SetUserID(input.UserID)
	wdc.SetName(input.Name)
	wdc.SetTotalSeconds(input.TotalSeconds)
	wdc.SetCreateTime(input.CreateTime)
	wdc.SetUpdateTime(input.UpdateTime)
	return wdc
}

func (wdc *WakatimeDurationCreate) SetWakatimeDuration(input *WakatimeDuration) *WakatimeDurationCreate {
	return wdc
}

func (wec *WakatimeEditorCreate) SetWakatimeEditor(input *WakatimeEditor) *WakatimeEditorCreate {
	return wec
}

func (wec *WakatimeEntityCreate) SetWakatimeEntity(input *WakatimeEntity) *WakatimeEntityCreate {
	return wec
}

func (wgtc *WakatimeGrandTotalCreate) SetWakatimeGrandTotal(input *WakatimeGrandTotal) *WakatimeGrandTotalCreate {
	return wgtc
}

func (whbc *WakatimeHeartBeatCreate) SetWakatimeHeartBeat(input *WakatimeHeartBeat) *WakatimeHeartBeatCreate {
	return whbc
}

func (wlc *WakatimeLanguageCreate) SetWakatimeLanguage(input *WakatimeLanguage) *WakatimeLanguageCreate {
	return wlc
}

func (wpc *WakatimeProjectCreate) SetWakatimeProject(input *WakatimeProject) *WakatimeProjectCreate {
	return wpc
}

func (wpdc *WakatimeProjectDurationCreate) SetWakatimeProjectDuration(input *WakatimeProjectDuration) *WakatimeProjectDurationCreate {
	return wpdc
}

func (wpic *WakatimeProjectInfoCreate) SetWakatimeProjectInfo(input *WakatimeProjectInfo) *WakatimeProjectInfoCreate {
	return wpic
}

func (wsc *WakatimeSystemCreate) SetWakatimeSystem(input *WakatimeSystem) *WakatimeSystemCreate {
	return wsc
}

func (wacc *WebAuthnCredentialCreate) SetWebAuthnCredential(input *WebAuthnCredential) *WebAuthnCredentialCreate {
	wacc.SetName(input.Name)
	wacc.SetLowerName(input.LowerName)
	wacc.SetUserID(input.UserID)
	wacc.SetCredentialID(input.CredentialID)
	wacc.SetPublicKey(input.PublicKey)
	wacc.SetAttestationType(input.AttestationType)
	wacc.SetAAGUID(input.AAGUID)
	wacc.SetSignCount(input.SignCount)
	wacc.SetCloneWarning(input.CloneWarning)
	wacc.SetCreateTime(input.CreateTime)
	wacc.SetUpdateTime(input.UpdateTime)
	return wacc
}
