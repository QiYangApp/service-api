// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/models/sourcedata"
	"fmt"
	"frame/util/timeutil"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SourceData is the model entity for the SourceData schema.
type SourceData struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// 类型
	Type string `json:"type,omitempty"`
	// 子类型
	SubType string `json:"sub_type,omitempty"`
	// 信息
	Info string `json:"info,omitempty"`
	// 数据
	Snapshot string `json:"snapshot,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime timeutil.TimeStamp `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   timeutil.TimeStamp `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SourceData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sourcedata.FieldID, sourcedata.FieldUserID, sourcedata.FieldCreateTime, sourcedata.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case sourcedata.FieldType, sourcedata.FieldSubType, sourcedata.FieldInfo, sourcedata.FieldSnapshot:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SourceData fields.
func (sd *SourceData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sourcedata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int64(value.Int64)
		case sourcedata.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sd.UserID = value.Int64
			}
		case sourcedata.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sd.Type = value.String
			}
		case sourcedata.FieldSubType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_type", values[i])
			} else if value.Valid {
				sd.SubType = value.String
			}
		case sourcedata.FieldInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field info", values[i])
			} else if value.Valid {
				sd.Info = value.String
			}
		case sourcedata.FieldSnapshot:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snapshot", values[i])
			} else if value.Valid {
				sd.Snapshot = value.String
			}
		case sourcedata.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sd.CreateTime = timeutil.TimeStamp(value.Int64)
			}
		case sourcedata.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sd.UpdateTime = timeutil.TimeStamp(value.Int64)
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SourceData.
// This includes values selected through modifiers, order, etc.
func (sd *SourceData) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// Update returns a builder for updating this SourceData.
// Note that you need to call SourceData.Unwrap() before calling this method if this SourceData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SourceData) Update() *SourceDataUpdateOne {
	return NewSourceDataClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SourceData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SourceData) Unwrap() *SourceData {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("models: SourceData is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SourceData) String() string {
	var builder strings.Builder
	builder.WriteString("SourceData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(sd.Type)
	builder.WriteString(", ")
	builder.WriteString("sub_type=")
	builder.WriteString(sd.SubType)
	builder.WriteString(", ")
	builder.WriteString("info=")
	builder.WriteString(sd.Info)
	builder.WriteString(", ")
	builder.WriteString("snapshot=")
	builder.WriteString(sd.Snapshot)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", sd.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", sd.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// SourceDataSlice is a parsable slice of SourceData.
type SourceDataSlice []*SourceData
