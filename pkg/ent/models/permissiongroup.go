// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/enums/state"
	"ent/models/permissiongroup"
	"ent/utils/timeutil"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PermissionGroup is the model entity for the PermissionGroup schema.
type PermissionGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 权限名称
	PermissionName string `json:"permission_name,omitempty"`
	// Ioc holds the value of the "ioc" field.
	Ioc string `json:"ioc,omitempty"`
	// 排序
	Sort int32 `json:"sort,omitempty"`
	// Left holds the value of the "left" field.
	Left int32 `json:"left,omitempty"`
	// Right holds the value of the "right" field.
	Right int32 `json:"right,omitempty"`
	// State holds the value of the "state" field.
	State state.SwitchState `json:"state,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime timeutil.TimeStamp `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   timeutil.TimeStamp `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PermissionGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permissiongroup.FieldID, permissiongroup.FieldSort, permissiongroup.FieldLeft, permissiongroup.FieldRight, permissiongroup.FieldState, permissiongroup.FieldCreateTime, permissiongroup.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case permissiongroup.FieldPermissionName, permissiongroup.FieldIoc:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PermissionGroup fields.
func (pg *PermissionGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permissiongroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pg.ID = int(value.Int64)
		case permissiongroup.FieldPermissionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission_name", values[i])
			} else if value.Valid {
				pg.PermissionName = value.String
			}
		case permissiongroup.FieldIoc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ioc", values[i])
			} else if value.Valid {
				pg.Ioc = value.String
			}
		case permissiongroup.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				pg.Sort = int32(value.Int64)
			}
		case permissiongroup.FieldLeft:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field left", values[i])
			} else if value.Valid {
				pg.Left = int32(value.Int64)
			}
		case permissiongroup.FieldRight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field right", values[i])
			} else if value.Valid {
				pg.Right = int32(value.Int64)
			}
		case permissiongroup.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				pg.State = state.SwitchState(value.Int64)
			}
		case permissiongroup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pg.CreateTime = timeutil.TimeStamp(value.Int64)
			}
		case permissiongroup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pg.UpdateTime = timeutil.TimeStamp(value.Int64)
			}
		default:
			pg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PermissionGroup.
// This includes values selected through modifiers, order, etc.
func (pg *PermissionGroup) Value(name string) (ent.Value, error) {
	return pg.selectValues.Get(name)
}

// Update returns a builder for updating this PermissionGroup.
// Note that you need to call PermissionGroup.Unwrap() before calling this method if this PermissionGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (pg *PermissionGroup) Update() *PermissionGroupUpdateOne {
	return NewPermissionGroupClient(pg.config).UpdateOne(pg)
}

// Unwrap unwraps the PermissionGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pg *PermissionGroup) Unwrap() *PermissionGroup {
	_tx, ok := pg.config.driver.(*txDriver)
	if !ok {
		panic("models: PermissionGroup is not a transactional entity")
	}
	pg.config.driver = _tx.drv
	return pg
}

// String implements the fmt.Stringer.
func (pg *PermissionGroup) String() string {
	var builder strings.Builder
	builder.WriteString("PermissionGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pg.ID))
	builder.WriteString("permission_name=")
	builder.WriteString(pg.PermissionName)
	builder.WriteString(", ")
	builder.WriteString("ioc=")
	builder.WriteString(pg.Ioc)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", pg.Sort))
	builder.WriteString(", ")
	builder.WriteString("left=")
	builder.WriteString(fmt.Sprintf("%v", pg.Left))
	builder.WriteString(", ")
	builder.WriteString("right=")
	builder.WriteString(fmt.Sprintf("%v", pg.Right))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", pg.State))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", pg.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", pg.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// PermissionGroups is a parsable slice of PermissionGroup.
type PermissionGroups []*PermissionGroup
