// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/wakatimedependency"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WakatimeDependencyUpdate is the builder for updating WakatimeDependency entities.
type WakatimeDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *WakatimeDependencyMutation
}

// Where appends a list predicates to the WakatimeDependencyUpdate builder.
func (wdu *WakatimeDependencyUpdate) Where(ps ...predicate.WakatimeDependency) *WakatimeDependencyUpdate {
	wdu.mutation.Where(ps...)
	return wdu
}

// SetUpdateTime sets the "update_time" field.
func (wdu *WakatimeDependencyUpdate) SetUpdateTime(t time.Time) *WakatimeDependencyUpdate {
	wdu.mutation.SetUpdateTime(t)
	return wdu
}

// SetWakatimeID sets the "wakatime_id" field.
func (wdu *WakatimeDependencyUpdate) SetWakatimeID(u uuid.UUID) *WakatimeDependencyUpdate {
	wdu.mutation.SetWakatimeID(u)
	return wdu
}

// SetNillableWakatimeID sets the "wakatime_id" field if the given value is not nil.
func (wdu *WakatimeDependencyUpdate) SetNillableWakatimeID(u *uuid.UUID) *WakatimeDependencyUpdate {
	if u != nil {
		wdu.SetWakatimeID(*u)
	}
	return wdu
}

// SetUserID sets the "user_id" field.
func (wdu *WakatimeDependencyUpdate) SetUserID(u uuid.UUID) *WakatimeDependencyUpdate {
	wdu.mutation.SetUserID(u)
	return wdu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wdu *WakatimeDependencyUpdate) SetNillableUserID(u *uuid.UUID) *WakatimeDependencyUpdate {
	if u != nil {
		wdu.SetUserID(*u)
	}
	return wdu
}

// SetName sets the "name" field.
func (wdu *WakatimeDependencyUpdate) SetName(s string) *WakatimeDependencyUpdate {
	wdu.mutation.SetName(s)
	return wdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wdu *WakatimeDependencyUpdate) SetNillableName(s *string) *WakatimeDependencyUpdate {
	if s != nil {
		wdu.SetName(*s)
	}
	return wdu
}

// SetTotalSeconds sets the "total_seconds" field.
func (wdu *WakatimeDependencyUpdate) SetTotalSeconds(i int64) *WakatimeDependencyUpdate {
	wdu.mutation.ResetTotalSeconds()
	wdu.mutation.SetTotalSeconds(i)
	return wdu
}

// SetNillableTotalSeconds sets the "total_seconds" field if the given value is not nil.
func (wdu *WakatimeDependencyUpdate) SetNillableTotalSeconds(i *int64) *WakatimeDependencyUpdate {
	if i != nil {
		wdu.SetTotalSeconds(*i)
	}
	return wdu
}

// AddTotalSeconds adds i to the "total_seconds" field.
func (wdu *WakatimeDependencyUpdate) AddTotalSeconds(i int64) *WakatimeDependencyUpdate {
	wdu.mutation.AddTotalSeconds(i)
	return wdu
}

// Mutation returns the WakatimeDependencyMutation object of the builder.
func (wdu *WakatimeDependencyUpdate) Mutation() *WakatimeDependencyMutation {
	return wdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wdu *WakatimeDependencyUpdate) Save(ctx context.Context) (int, error) {
	wdu.defaults()
	return withHooks(ctx, wdu.sqlSave, wdu.mutation, wdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wdu *WakatimeDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := wdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wdu *WakatimeDependencyUpdate) Exec(ctx context.Context) error {
	_, err := wdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdu *WakatimeDependencyUpdate) ExecX(ctx context.Context) {
	if err := wdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wdu *WakatimeDependencyUpdate) defaults() {
	if _, ok := wdu.mutation.UpdateTime(); !ok {
		v := wakatimedependency.UpdateDefaultUpdateTime()
		wdu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wdu *WakatimeDependencyUpdate) check() error {
	if v, ok := wdu.mutation.Name(); ok {
		if err := wakatimedependency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`models: validator failed for field "WakatimeDependency.name": %w`, err)}
		}
	}
	return nil
}

func (wdu *WakatimeDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wakatimedependency.Table, wakatimedependency.Columns, sqlgraph.NewFieldSpec(wakatimedependency.FieldID, field.TypeInt64))
	if ps := wdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wdu.mutation.UpdateTime(); ok {
		_spec.SetField(wakatimedependency.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := wdu.mutation.WakatimeID(); ok {
		_spec.SetField(wakatimedependency.FieldWakatimeID, field.TypeUUID, value)
	}
	if value, ok := wdu.mutation.UserID(); ok {
		_spec.SetField(wakatimedependency.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := wdu.mutation.Name(); ok {
		_spec.SetField(wakatimedependency.FieldName, field.TypeString, value)
	}
	if value, ok := wdu.mutation.TotalSeconds(); ok {
		_spec.SetField(wakatimedependency.FieldTotalSeconds, field.TypeInt64, value)
	}
	if value, ok := wdu.mutation.AddedTotalSeconds(); ok {
		_spec.AddField(wakatimedependency.FieldTotalSeconds, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wakatimedependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wdu.mutation.done = true
	return n, nil
}

// WakatimeDependencyUpdateOne is the builder for updating a single WakatimeDependency entity.
type WakatimeDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WakatimeDependencyMutation
}

// SetUpdateTime sets the "update_time" field.
func (wduo *WakatimeDependencyUpdateOne) SetUpdateTime(t time.Time) *WakatimeDependencyUpdateOne {
	wduo.mutation.SetUpdateTime(t)
	return wduo
}

// SetWakatimeID sets the "wakatime_id" field.
func (wduo *WakatimeDependencyUpdateOne) SetWakatimeID(u uuid.UUID) *WakatimeDependencyUpdateOne {
	wduo.mutation.SetWakatimeID(u)
	return wduo
}

// SetNillableWakatimeID sets the "wakatime_id" field if the given value is not nil.
func (wduo *WakatimeDependencyUpdateOne) SetNillableWakatimeID(u *uuid.UUID) *WakatimeDependencyUpdateOne {
	if u != nil {
		wduo.SetWakatimeID(*u)
	}
	return wduo
}

// SetUserID sets the "user_id" field.
func (wduo *WakatimeDependencyUpdateOne) SetUserID(u uuid.UUID) *WakatimeDependencyUpdateOne {
	wduo.mutation.SetUserID(u)
	return wduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wduo *WakatimeDependencyUpdateOne) SetNillableUserID(u *uuid.UUID) *WakatimeDependencyUpdateOne {
	if u != nil {
		wduo.SetUserID(*u)
	}
	return wduo
}

// SetName sets the "name" field.
func (wduo *WakatimeDependencyUpdateOne) SetName(s string) *WakatimeDependencyUpdateOne {
	wduo.mutation.SetName(s)
	return wduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wduo *WakatimeDependencyUpdateOne) SetNillableName(s *string) *WakatimeDependencyUpdateOne {
	if s != nil {
		wduo.SetName(*s)
	}
	return wduo
}

// SetTotalSeconds sets the "total_seconds" field.
func (wduo *WakatimeDependencyUpdateOne) SetTotalSeconds(i int64) *WakatimeDependencyUpdateOne {
	wduo.mutation.ResetTotalSeconds()
	wduo.mutation.SetTotalSeconds(i)
	return wduo
}

// SetNillableTotalSeconds sets the "total_seconds" field if the given value is not nil.
func (wduo *WakatimeDependencyUpdateOne) SetNillableTotalSeconds(i *int64) *WakatimeDependencyUpdateOne {
	if i != nil {
		wduo.SetTotalSeconds(*i)
	}
	return wduo
}

// AddTotalSeconds adds i to the "total_seconds" field.
func (wduo *WakatimeDependencyUpdateOne) AddTotalSeconds(i int64) *WakatimeDependencyUpdateOne {
	wduo.mutation.AddTotalSeconds(i)
	return wduo
}

// Mutation returns the WakatimeDependencyMutation object of the builder.
func (wduo *WakatimeDependencyUpdateOne) Mutation() *WakatimeDependencyMutation {
	return wduo.mutation
}

// Where appends a list predicates to the WakatimeDependencyUpdate builder.
func (wduo *WakatimeDependencyUpdateOne) Where(ps ...predicate.WakatimeDependency) *WakatimeDependencyUpdateOne {
	wduo.mutation.Where(ps...)
	return wduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wduo *WakatimeDependencyUpdateOne) Select(field string, fields ...string) *WakatimeDependencyUpdateOne {
	wduo.fields = append([]string{field}, fields...)
	return wduo
}

// Save executes the query and returns the updated WakatimeDependency entity.
func (wduo *WakatimeDependencyUpdateOne) Save(ctx context.Context) (*WakatimeDependency, error) {
	wduo.defaults()
	return withHooks(ctx, wduo.sqlSave, wduo.mutation, wduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wduo *WakatimeDependencyUpdateOne) SaveX(ctx context.Context) *WakatimeDependency {
	node, err := wduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wduo *WakatimeDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := wduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wduo *WakatimeDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := wduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wduo *WakatimeDependencyUpdateOne) defaults() {
	if _, ok := wduo.mutation.UpdateTime(); !ok {
		v := wakatimedependency.UpdateDefaultUpdateTime()
		wduo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wduo *WakatimeDependencyUpdateOne) check() error {
	if v, ok := wduo.mutation.Name(); ok {
		if err := wakatimedependency.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`models: validator failed for field "WakatimeDependency.name": %w`, err)}
		}
	}
	return nil
}

func (wduo *WakatimeDependencyUpdateOne) sqlSave(ctx context.Context) (_node *WakatimeDependency, err error) {
	if err := wduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wakatimedependency.Table, wakatimedependency.Columns, sqlgraph.NewFieldSpec(wakatimedependency.FieldID, field.TypeInt64))
	id, ok := wduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "WakatimeDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wakatimedependency.FieldID)
		for _, f := range fields {
			if !wakatimedependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != wakatimedependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wduo.mutation.UpdateTime(); ok {
		_spec.SetField(wakatimedependency.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := wduo.mutation.WakatimeID(); ok {
		_spec.SetField(wakatimedependency.FieldWakatimeID, field.TypeUUID, value)
	}
	if value, ok := wduo.mutation.UserID(); ok {
		_spec.SetField(wakatimedependency.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := wduo.mutation.Name(); ok {
		_spec.SetField(wakatimedependency.FieldName, field.TypeString, value)
	}
	if value, ok := wduo.mutation.TotalSeconds(); ok {
		_spec.SetField(wakatimedependency.FieldTotalSeconds, field.TypeInt64, value)
	}
	if value, ok := wduo.mutation.AddedTotalSeconds(); ok {
		_spec.AddField(wakatimedependency.FieldTotalSeconds, field.TypeInt64, value)
	}
	_node = &WakatimeDependency{config: wduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wakatimedependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wduo.mutation.done = true
	return _node, nil
}
