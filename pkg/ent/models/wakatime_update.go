// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/wakatime"
	"errors"
	"fmt"
	"frame/util/timeutil"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WakatimeUpdate is the builder for updating Wakatime entities.
type WakatimeUpdate struct {
	config
	hooks    []Hook
	mutation *WakatimeMutation
}

// Where appends a list predicates to the WakatimeUpdate builder.
func (wu *WakatimeUpdate) Where(ps ...predicate.Wakatime) *WakatimeUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUserID sets the "user_id" field.
func (wu *WakatimeUpdate) SetUserID(i int64) *WakatimeUpdate {
	wu.mutation.ResetUserID()
	wu.mutation.SetUserID(i)
	return wu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wu *WakatimeUpdate) SetNillableUserID(i *int64) *WakatimeUpdate {
	if i != nil {
		wu.SetUserID(*i)
	}
	return wu
}

// AddUserID adds i to the "user_id" field.
func (wu *WakatimeUpdate) AddUserID(i int64) *WakatimeUpdate {
	wu.mutation.AddUserID(i)
	return wu
}

// SetKey sets the "key" field.
func (wu *WakatimeUpdate) SetKey(s string) *WakatimeUpdate {
	wu.mutation.SetKey(s)
	return wu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (wu *WakatimeUpdate) SetNillableKey(s *string) *WakatimeUpdate {
	if s != nil {
		wu.SetKey(*s)
	}
	return wu
}

// SetAPI sets the "api" field.
func (wu *WakatimeUpdate) SetAPI(s string) *WakatimeUpdate {
	wu.mutation.SetAPI(s)
	return wu
}

// SetNillableAPI sets the "api" field if the given value is not nil.
func (wu *WakatimeUpdate) SetNillableAPI(s *string) *WakatimeUpdate {
	if s != nil {
		wu.SetAPI(*s)
	}
	return wu
}

// SetState sets the "state" field.
func (wu *WakatimeUpdate) SetState(s string) *WakatimeUpdate {
	wu.mutation.SetState(s)
	return wu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (wu *WakatimeUpdate) SetNillableState(s *string) *WakatimeUpdate {
	if s != nil {
		wu.SetState(*s)
	}
	return wu
}

// SetUpdateTime sets the "update_time" field.
func (wu *WakatimeUpdate) SetUpdateTime(ts timeutil.TimeStamp) *WakatimeUpdate {
	wu.mutation.ResetUpdateTime()
	wu.mutation.SetUpdateTime(ts)
	return wu
}

// AddUpdateTime adds ts to the "update_time" field.
func (wu *WakatimeUpdate) AddUpdateTime(ts timeutil.TimeStamp) *WakatimeUpdate {
	wu.mutation.AddUpdateTime(ts)
	return wu
}

// Mutation returns the WakatimeMutation object of the builder.
func (wu *WakatimeUpdate) Mutation() *WakatimeMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WakatimeUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WakatimeUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WakatimeUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WakatimeUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WakatimeUpdate) defaults() {
	if _, ok := wu.mutation.UpdateTime(); !ok {
		v := wakatime.UpdateDefaultUpdateTime()
		wu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WakatimeUpdate) check() error {
	if v, ok := wu.mutation.Key(); ok {
		if err := wakatime.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`models: validator failed for field "Wakatime.key": %w`, err)}
		}
	}
	if v, ok := wu.mutation.API(); ok {
		if err := wakatime.APIValidator(v); err != nil {
			return &ValidationError{Name: "api", err: fmt.Errorf(`models: validator failed for field "Wakatime.api": %w`, err)}
		}
	}
	if v, ok := wu.mutation.State(); ok {
		if err := wakatime.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`models: validator failed for field "Wakatime.state": %w`, err)}
		}
	}
	return nil
}

func (wu *WakatimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wakatime.Table, wakatime.Columns, sqlgraph.NewFieldSpec(wakatime.FieldID, field.TypeInt64))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UserID(); ok {
		_spec.SetField(wakatime.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedUserID(); ok {
		_spec.AddField(wakatime.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.Key(); ok {
		_spec.SetField(wakatime.FieldKey, field.TypeString, value)
	}
	if value, ok := wu.mutation.API(); ok {
		_spec.SetField(wakatime.FieldAPI, field.TypeString, value)
	}
	if value, ok := wu.mutation.State(); ok {
		_spec.SetField(wakatime.FieldState, field.TypeString, value)
	}
	if value, ok := wu.mutation.UpdateTime(); ok {
		_spec.SetField(wakatime.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(wakatime.FieldUpdateTime, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wakatime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WakatimeUpdateOne is the builder for updating a single Wakatime entity.
type WakatimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WakatimeMutation
}

// SetUserID sets the "user_id" field.
func (wuo *WakatimeUpdateOne) SetUserID(i int64) *WakatimeUpdateOne {
	wuo.mutation.ResetUserID()
	wuo.mutation.SetUserID(i)
	return wuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wuo *WakatimeUpdateOne) SetNillableUserID(i *int64) *WakatimeUpdateOne {
	if i != nil {
		wuo.SetUserID(*i)
	}
	return wuo
}

// AddUserID adds i to the "user_id" field.
func (wuo *WakatimeUpdateOne) AddUserID(i int64) *WakatimeUpdateOne {
	wuo.mutation.AddUserID(i)
	return wuo
}

// SetKey sets the "key" field.
func (wuo *WakatimeUpdateOne) SetKey(s string) *WakatimeUpdateOne {
	wuo.mutation.SetKey(s)
	return wuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (wuo *WakatimeUpdateOne) SetNillableKey(s *string) *WakatimeUpdateOne {
	if s != nil {
		wuo.SetKey(*s)
	}
	return wuo
}

// SetAPI sets the "api" field.
func (wuo *WakatimeUpdateOne) SetAPI(s string) *WakatimeUpdateOne {
	wuo.mutation.SetAPI(s)
	return wuo
}

// SetNillableAPI sets the "api" field if the given value is not nil.
func (wuo *WakatimeUpdateOne) SetNillableAPI(s *string) *WakatimeUpdateOne {
	if s != nil {
		wuo.SetAPI(*s)
	}
	return wuo
}

// SetState sets the "state" field.
func (wuo *WakatimeUpdateOne) SetState(s string) *WakatimeUpdateOne {
	wuo.mutation.SetState(s)
	return wuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (wuo *WakatimeUpdateOne) SetNillableState(s *string) *WakatimeUpdateOne {
	if s != nil {
		wuo.SetState(*s)
	}
	return wuo
}

// SetUpdateTime sets the "update_time" field.
func (wuo *WakatimeUpdateOne) SetUpdateTime(ts timeutil.TimeStamp) *WakatimeUpdateOne {
	wuo.mutation.ResetUpdateTime()
	wuo.mutation.SetUpdateTime(ts)
	return wuo
}

// AddUpdateTime adds ts to the "update_time" field.
func (wuo *WakatimeUpdateOne) AddUpdateTime(ts timeutil.TimeStamp) *WakatimeUpdateOne {
	wuo.mutation.AddUpdateTime(ts)
	return wuo
}

// Mutation returns the WakatimeMutation object of the builder.
func (wuo *WakatimeUpdateOne) Mutation() *WakatimeMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WakatimeUpdate builder.
func (wuo *WakatimeUpdateOne) Where(ps ...predicate.Wakatime) *WakatimeUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WakatimeUpdateOne) Select(field string, fields ...string) *WakatimeUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Wakatime entity.
func (wuo *WakatimeUpdateOne) Save(ctx context.Context) (*Wakatime, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WakatimeUpdateOne) SaveX(ctx context.Context) *Wakatime {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WakatimeUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WakatimeUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WakatimeUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdateTime(); !ok {
		v := wakatime.UpdateDefaultUpdateTime()
		wuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WakatimeUpdateOne) check() error {
	if v, ok := wuo.mutation.Key(); ok {
		if err := wakatime.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`models: validator failed for field "Wakatime.key": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.API(); ok {
		if err := wakatime.APIValidator(v); err != nil {
			return &ValidationError{Name: "api", err: fmt.Errorf(`models: validator failed for field "Wakatime.api": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.State(); ok {
		if err := wakatime.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`models: validator failed for field "Wakatime.state": %w`, err)}
		}
	}
	return nil
}

func (wuo *WakatimeUpdateOne) sqlSave(ctx context.Context) (_node *Wakatime, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wakatime.Table, wakatime.Columns, sqlgraph.NewFieldSpec(wakatime.FieldID, field.TypeInt64))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "Wakatime.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wakatime.FieldID)
		for _, f := range fields {
			if !wakatime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != wakatime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UserID(); ok {
		_spec.SetField(wakatime.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedUserID(); ok {
		_spec.AddField(wakatime.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.Key(); ok {
		_spec.SetField(wakatime.FieldKey, field.TypeString, value)
	}
	if value, ok := wuo.mutation.API(); ok {
		_spec.SetField(wakatime.FieldAPI, field.TypeString, value)
	}
	if value, ok := wuo.mutation.State(); ok {
		_spec.SetField(wakatime.FieldState, field.TypeString, value)
	}
	if value, ok := wuo.mutation.UpdateTime(); ok {
		_spec.SetField(wakatime.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(wakatime.FieldUpdateTime, field.TypeInt64, value)
	}
	_node = &Wakatime{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wakatime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
