// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/wakatime"
	"errors"
	"fmt"
	"frame/util/timeutil"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WakatimeCreate is the builder for creating a Wakatime entity.
type WakatimeCreate struct {
	config
	mutation *WakatimeMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (wc *WakatimeCreate) SetUserID(i int64) *WakatimeCreate {
	wc.mutation.SetUserID(i)
	return wc
}

// SetKey sets the "key" field.
func (wc *WakatimeCreate) SetKey(s string) *WakatimeCreate {
	wc.mutation.SetKey(s)
	return wc
}

// SetAPI sets the "api" field.
func (wc *WakatimeCreate) SetAPI(s string) *WakatimeCreate {
	wc.mutation.SetAPI(s)
	return wc
}

// SetState sets the "state" field.
func (wc *WakatimeCreate) SetState(s string) *WakatimeCreate {
	wc.mutation.SetState(s)
	return wc
}

// SetCreateTime sets the "create_time" field.
func (wc *WakatimeCreate) SetCreateTime(ts timeutil.TimeStamp) *WakatimeCreate {
	wc.mutation.SetCreateTime(ts)
	return wc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wc *WakatimeCreate) SetNillableCreateTime(ts *timeutil.TimeStamp) *WakatimeCreate {
	if ts != nil {
		wc.SetCreateTime(*ts)
	}
	return wc
}

// SetUpdateTime sets the "update_time" field.
func (wc *WakatimeCreate) SetUpdateTime(ts timeutil.TimeStamp) *WakatimeCreate {
	wc.mutation.SetUpdateTime(ts)
	return wc
}

// SetID sets the "id" field.
func (wc *WakatimeCreate) SetID(i int64) *WakatimeCreate {
	wc.mutation.SetID(i)
	return wc
}

// Mutation returns the WakatimeMutation object of the builder.
func (wc *WakatimeCreate) Mutation() *WakatimeMutation {
	return wc.mutation
}

// Save creates the Wakatime in the database.
func (wc *WakatimeCreate) Save(ctx context.Context) (*Wakatime, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WakatimeCreate) SaveX(ctx context.Context) *Wakatime {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WakatimeCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WakatimeCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WakatimeCreate) defaults() {
	if _, ok := wc.mutation.CreateTime(); !ok {
		v := wakatime.DefaultCreateTime
		wc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WakatimeCreate) check() error {
	if _, ok := wc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`models: missing required field "Wakatime.user_id"`)}
	}
	if _, ok := wc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`models: missing required field "Wakatime.key"`)}
	}
	if v, ok := wc.mutation.Key(); ok {
		if err := wakatime.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`models: validator failed for field "Wakatime.key": %w`, err)}
		}
	}
	if _, ok := wc.mutation.API(); !ok {
		return &ValidationError{Name: "api", err: errors.New(`models: missing required field "Wakatime.api"`)}
	}
	if v, ok := wc.mutation.API(); ok {
		if err := wakatime.APIValidator(v); err != nil {
			return &ValidationError{Name: "api", err: fmt.Errorf(`models: validator failed for field "Wakatime.api": %w`, err)}
		}
	}
	if _, ok := wc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`models: missing required field "Wakatime.state"`)}
	}
	if v, ok := wc.mutation.State(); ok {
		if err := wakatime.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`models: validator failed for field "Wakatime.state": %w`, err)}
		}
	}
	if _, ok := wc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`models: missing required field "Wakatime.create_time"`)}
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`models: missing required field "Wakatime.update_time"`)}
	}
	return nil
}

func (wc *WakatimeCreate) sqlSave(ctx context.Context) (*Wakatime, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WakatimeCreate) createSpec() (*Wakatime, *sqlgraph.CreateSpec) {
	var (
		_node = &Wakatime{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(wakatime.Table, sqlgraph.NewFieldSpec(wakatime.FieldID, field.TypeInt64))
	)
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.UserID(); ok {
		_spec.SetField(wakatime.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := wc.mutation.Key(); ok {
		_spec.SetField(wakatime.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := wc.mutation.API(); ok {
		_spec.SetField(wakatime.FieldAPI, field.TypeString, value)
		_node.API = value
	}
	if value, ok := wc.mutation.State(); ok {
		_spec.SetField(wakatime.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := wc.mutation.CreateTime(); ok {
		_spec.SetField(wakatime.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = value
	}
	if value, ok := wc.mutation.UpdateTime(); ok {
		_spec.SetField(wakatime.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// WakatimeCreateBulk is the builder for creating many Wakatime entities in bulk.
type WakatimeCreateBulk struct {
	config
	err      error
	builders []*WakatimeCreate
}

// Save creates the Wakatime entities in the database.
func (wcb *WakatimeCreateBulk) Save(ctx context.Context) ([]*Wakatime, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Wakatime, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WakatimeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WakatimeCreateBulk) SaveX(ctx context.Context) []*Wakatime {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WakatimeCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WakatimeCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
