// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/userrelatedrole"
	"errors"
	"fmt"
	"frame/util/timeutil"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserRelatedRoleCreate is the builder for creating a UserRelatedRole entity.
type UserRelatedRoleCreate struct {
	config
	mutation *UserRelatedRoleMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (urrc *UserRelatedRoleCreate) SetUserID(i int64) *UserRelatedRoleCreate {
	urrc.mutation.SetUserID(i)
	return urrc
}

// SetRoleID sets the "role_id" field.
func (urrc *UserRelatedRoleCreate) SetRoleID(u uuid.UUID) *UserRelatedRoleCreate {
	urrc.mutation.SetRoleID(u)
	return urrc
}

// SetCreateTime sets the "create_time" field.
func (urrc *UserRelatedRoleCreate) SetCreateTime(ts timeutil.TimeStamp) *UserRelatedRoleCreate {
	urrc.mutation.SetCreateTime(ts)
	return urrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (urrc *UserRelatedRoleCreate) SetNillableCreateTime(ts *timeutil.TimeStamp) *UserRelatedRoleCreate {
	if ts != nil {
		urrc.SetCreateTime(*ts)
	}
	return urrc
}

// SetUpdateTime sets the "update_time" field.
func (urrc *UserRelatedRoleCreate) SetUpdateTime(ts timeutil.TimeStamp) *UserRelatedRoleCreate {
	urrc.mutation.SetUpdateTime(ts)
	return urrc
}

// SetID sets the "id" field.
func (urrc *UserRelatedRoleCreate) SetID(i int64) *UserRelatedRoleCreate {
	urrc.mutation.SetID(i)
	return urrc
}

// Mutation returns the UserRelatedRoleMutation object of the builder.
func (urrc *UserRelatedRoleCreate) Mutation() *UserRelatedRoleMutation {
	return urrc.mutation
}

// Save creates the UserRelatedRole in the database.
func (urrc *UserRelatedRoleCreate) Save(ctx context.Context) (*UserRelatedRole, error) {
	urrc.defaults()
	return withHooks(ctx, urrc.sqlSave, urrc.mutation, urrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (urrc *UserRelatedRoleCreate) SaveX(ctx context.Context) *UserRelatedRole {
	v, err := urrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urrc *UserRelatedRoleCreate) Exec(ctx context.Context) error {
	_, err := urrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urrc *UserRelatedRoleCreate) ExecX(ctx context.Context) {
	if err := urrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urrc *UserRelatedRoleCreate) defaults() {
	if _, ok := urrc.mutation.CreateTime(); !ok {
		v := userrelatedrole.DefaultCreateTime
		urrc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urrc *UserRelatedRoleCreate) check() error {
	if _, ok := urrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`models: missing required field "UserRelatedRole.user_id"`)}
	}
	if _, ok := urrc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`models: missing required field "UserRelatedRole.role_id"`)}
	}
	if _, ok := urrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`models: missing required field "UserRelatedRole.create_time"`)}
	}
	if _, ok := urrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`models: missing required field "UserRelatedRole.update_time"`)}
	}
	return nil
}

func (urrc *UserRelatedRoleCreate) sqlSave(ctx context.Context) (*UserRelatedRole, error) {
	if err := urrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := urrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	urrc.mutation.id = &_node.ID
	urrc.mutation.done = true
	return _node, nil
}

func (urrc *UserRelatedRoleCreate) createSpec() (*UserRelatedRole, *sqlgraph.CreateSpec) {
	var (
		_node = &UserRelatedRole{config: urrc.config}
		_spec = sqlgraph.NewCreateSpec(userrelatedrole.Table, sqlgraph.NewFieldSpec(userrelatedrole.FieldID, field.TypeInt64))
	)
	if id, ok := urrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := urrc.mutation.UserID(); ok {
		_spec.SetField(userrelatedrole.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := urrc.mutation.RoleID(); ok {
		_spec.SetField(userrelatedrole.FieldRoleID, field.TypeUUID, value)
		_node.RoleID = value
	}
	if value, ok := urrc.mutation.CreateTime(); ok {
		_spec.SetField(userrelatedrole.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = value
	}
	if value, ok := urrc.mutation.UpdateTime(); ok {
		_spec.SetField(userrelatedrole.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// UserRelatedRoleCreateBulk is the builder for creating many UserRelatedRole entities in bulk.
type UserRelatedRoleCreateBulk struct {
	config
	err      error
	builders []*UserRelatedRoleCreate
}

// Save creates the UserRelatedRole entities in the database.
func (urrcb *UserRelatedRoleCreateBulk) Save(ctx context.Context) ([]*UserRelatedRole, error) {
	if urrcb.err != nil {
		return nil, urrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(urrcb.builders))
	nodes := make([]*UserRelatedRole, len(urrcb.builders))
	mutators := make([]Mutator, len(urrcb.builders))
	for i := range urrcb.builders {
		func(i int, root context.Context) {
			builder := urrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserRelatedRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urrcb *UserRelatedRoleCreateBulk) SaveX(ctx context.Context) []*UserRelatedRole {
	v, err := urrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urrcb *UserRelatedRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := urrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urrcb *UserRelatedRoleCreateBulk) ExecX(ctx context.Context) {
	if err := urrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
