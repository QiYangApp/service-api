// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/permissionrelatedrouter"
	"errors"
	"fmt"
	"frame/util/timeutil"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PermissionRelatedRouterCreate is the builder for creating a PermissionRelatedRouter entity.
type PermissionRelatedRouterCreate struct {
	config
	mutation *PermissionRelatedRouterMutation
	hooks    []Hook
}

// SetRouterID sets the "router_id" field.
func (prrc *PermissionRelatedRouterCreate) SetRouterID(u uuid.UUID) *PermissionRelatedRouterCreate {
	prrc.mutation.SetRouterID(u)
	return prrc
}

// SetPermissionGroupID sets the "permission_group_id" field.
func (prrc *PermissionRelatedRouterCreate) SetPermissionGroupID(u uuid.UUID) *PermissionRelatedRouterCreate {
	prrc.mutation.SetPermissionGroupID(u)
	return prrc
}

// SetCreateTime sets the "create_time" field.
func (prrc *PermissionRelatedRouterCreate) SetCreateTime(ts timeutil.TimeStamp) *PermissionRelatedRouterCreate {
	prrc.mutation.SetCreateTime(ts)
	return prrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (prrc *PermissionRelatedRouterCreate) SetNillableCreateTime(ts *timeutil.TimeStamp) *PermissionRelatedRouterCreate {
	if ts != nil {
		prrc.SetCreateTime(*ts)
	}
	return prrc
}

// SetUpdateTime sets the "update_time" field.
func (prrc *PermissionRelatedRouterCreate) SetUpdateTime(ts timeutil.TimeStamp) *PermissionRelatedRouterCreate {
	prrc.mutation.SetUpdateTime(ts)
	return prrc
}

// SetID sets the "id" field.
func (prrc *PermissionRelatedRouterCreate) SetID(i int64) *PermissionRelatedRouterCreate {
	prrc.mutation.SetID(i)
	return prrc
}

// Mutation returns the PermissionRelatedRouterMutation object of the builder.
func (prrc *PermissionRelatedRouterCreate) Mutation() *PermissionRelatedRouterMutation {
	return prrc.mutation
}

// Save creates the PermissionRelatedRouter in the database.
func (prrc *PermissionRelatedRouterCreate) Save(ctx context.Context) (*PermissionRelatedRouter, error) {
	prrc.defaults()
	return withHooks(ctx, prrc.sqlSave, prrc.mutation, prrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prrc *PermissionRelatedRouterCreate) SaveX(ctx context.Context) *PermissionRelatedRouter {
	v, err := prrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prrc *PermissionRelatedRouterCreate) Exec(ctx context.Context) error {
	_, err := prrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prrc *PermissionRelatedRouterCreate) ExecX(ctx context.Context) {
	if err := prrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prrc *PermissionRelatedRouterCreate) defaults() {
	if _, ok := prrc.mutation.CreateTime(); !ok {
		v := permissionrelatedrouter.DefaultCreateTime
		prrc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prrc *PermissionRelatedRouterCreate) check() error {
	if _, ok := prrc.mutation.RouterID(); !ok {
		return &ValidationError{Name: "router_id", err: errors.New(`models: missing required field "PermissionRelatedRouter.router_id"`)}
	}
	if _, ok := prrc.mutation.PermissionGroupID(); !ok {
		return &ValidationError{Name: "permission_group_id", err: errors.New(`models: missing required field "PermissionRelatedRouter.permission_group_id"`)}
	}
	if _, ok := prrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`models: missing required field "PermissionRelatedRouter.create_time"`)}
	}
	if _, ok := prrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`models: missing required field "PermissionRelatedRouter.update_time"`)}
	}
	return nil
}

func (prrc *PermissionRelatedRouterCreate) sqlSave(ctx context.Context) (*PermissionRelatedRouter, error) {
	if err := prrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	prrc.mutation.id = &_node.ID
	prrc.mutation.done = true
	return _node, nil
}

func (prrc *PermissionRelatedRouterCreate) createSpec() (*PermissionRelatedRouter, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionRelatedRouter{config: prrc.config}
		_spec = sqlgraph.NewCreateSpec(permissionrelatedrouter.Table, sqlgraph.NewFieldSpec(permissionrelatedrouter.FieldID, field.TypeInt64))
	)
	if id, ok := prrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prrc.mutation.RouterID(); ok {
		_spec.SetField(permissionrelatedrouter.FieldRouterID, field.TypeUUID, value)
		_node.RouterID = value
	}
	if value, ok := prrc.mutation.PermissionGroupID(); ok {
		_spec.SetField(permissionrelatedrouter.FieldPermissionGroupID, field.TypeUUID, value)
		_node.PermissionGroupID = value
	}
	if value, ok := prrc.mutation.CreateTime(); ok {
		_spec.SetField(permissionrelatedrouter.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = value
	}
	if value, ok := prrc.mutation.UpdateTime(); ok {
		_spec.SetField(permissionrelatedrouter.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// PermissionRelatedRouterCreateBulk is the builder for creating many PermissionRelatedRouter entities in bulk.
type PermissionRelatedRouterCreateBulk struct {
	config
	err      error
	builders []*PermissionRelatedRouterCreate
}

// Save creates the PermissionRelatedRouter entities in the database.
func (prrcb *PermissionRelatedRouterCreateBulk) Save(ctx context.Context) ([]*PermissionRelatedRouter, error) {
	if prrcb.err != nil {
		return nil, prrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prrcb.builders))
	nodes := make([]*PermissionRelatedRouter, len(prrcb.builders))
	mutators := make([]Mutator, len(prrcb.builders))
	for i := range prrcb.builders {
		func(i int, root context.Context) {
			builder := prrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionRelatedRouterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prrcb *PermissionRelatedRouterCreateBulk) SaveX(ctx context.Context) []*PermissionRelatedRouter {
	v, err := prrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prrcb *PermissionRelatedRouterCreateBulk) Exec(ctx context.Context) error {
	_, err := prrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prrcb *PermissionRelatedRouterCreateBulk) ExecX(ctx context.Context) {
	if err := prrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
