// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/wakatimelanguage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WakatimeLanguageDelete is the builder for deleting a WakatimeLanguage entity.
type WakatimeLanguageDelete struct {
	config
	hooks    []Hook
	mutation *WakatimeLanguageMutation
}

// Where appends a list predicates to the WakatimeLanguageDelete builder.
func (wld *WakatimeLanguageDelete) Where(ps ...predicate.WakatimeLanguage) *WakatimeLanguageDelete {
	wld.mutation.Where(ps...)
	return wld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wld *WakatimeLanguageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wld.sqlExec, wld.mutation, wld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wld *WakatimeLanguageDelete) ExecX(ctx context.Context) int {
	n, err := wld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wld *WakatimeLanguageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(wakatimelanguage.Table, sqlgraph.NewFieldSpec(wakatimelanguage.FieldID, field.TypeInt))
	if ps := wld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wld.mutation.done = true
	return affected, err
}

// WakatimeLanguageDeleteOne is the builder for deleting a single WakatimeLanguage entity.
type WakatimeLanguageDeleteOne struct {
	wld *WakatimeLanguageDelete
}

// Where appends a list predicates to the WakatimeLanguageDelete builder.
func (wldo *WakatimeLanguageDeleteOne) Where(ps ...predicate.WakatimeLanguage) *WakatimeLanguageDeleteOne {
	wldo.wld.mutation.Where(ps...)
	return wldo
}

// Exec executes the deletion query.
func (wldo *WakatimeLanguageDeleteOne) Exec(ctx context.Context) error {
	n, err := wldo.wld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{wakatimelanguage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wldo *WakatimeLanguageDeleteOne) ExecX(ctx context.Context) {
	if err := wldo.Exec(ctx); err != nil {
		panic(err)
	}
}
