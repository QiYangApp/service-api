// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/models/wakatimegrandtotal"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WakatimeGrandTotal is the model entity for the WakatimeGrandTotal schema.
type WakatimeGrandTotal struct {
	config
	// ID of the ent.
	ID           int `json:"id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WakatimeGrandTotal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wakatimegrandtotal.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WakatimeGrandTotal fields.
func (wgt *WakatimeGrandTotal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wakatimegrandtotal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wgt.ID = int(value.Int64)
		default:
			wgt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WakatimeGrandTotal.
// This includes values selected through modifiers, order, etc.
func (wgt *WakatimeGrandTotal) Value(name string) (ent.Value, error) {
	return wgt.selectValues.Get(name)
}

// Update returns a builder for updating this WakatimeGrandTotal.
// Note that you need to call WakatimeGrandTotal.Unwrap() before calling this method if this WakatimeGrandTotal
// was returned from a transaction, and the transaction was committed or rolled back.
func (wgt *WakatimeGrandTotal) Update() *WakatimeGrandTotalUpdateOne {
	return NewWakatimeGrandTotalClient(wgt.config).UpdateOne(wgt)
}

// Unwrap unwraps the WakatimeGrandTotal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wgt *WakatimeGrandTotal) Unwrap() *WakatimeGrandTotal {
	_tx, ok := wgt.config.driver.(*txDriver)
	if !ok {
		panic("models: WakatimeGrandTotal is not a transactional entity")
	}
	wgt.config.driver = _tx.drv
	return wgt
}

// String implements the fmt.Stringer.
func (wgt *WakatimeGrandTotal) String() string {
	var builder strings.Builder
	builder.WriteString("WakatimeGrandTotal(")
	builder.WriteString(fmt.Sprintf("id=%v", wgt.ID))
	builder.WriteByte(')')
	return builder.String()
}

// WakatimeGrandTotals is a parsable slice of WakatimeGrandTotal.
type WakatimeGrandTotals []*WakatimeGrandTotal
