// Code generated by ent, DO NOT EDIT.

package wakatimecategory

import (
	"ent/models/predicate"
	"frame/util/timeutil"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLTE(FieldID, id))
}

// WakatimeID applies equality check predicate on the "wakatime_id" field. It's identical to WakatimeIDEQ.
func WakatimeID(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldWakatimeID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldUserID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldName, v))
}

// TotalSeconds applies equality check predicate on the "total_seconds" field. It's identical to TotalSecondsEQ.
func TotalSeconds(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldTotalSeconds, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldEQ(FieldCreateTime, vc))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldEQ(FieldUpdateTime, vc))
}

// WakatimeIDEQ applies the EQ predicate on the "wakatime_id" field.
func WakatimeIDEQ(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldWakatimeID, v))
}

// WakatimeIDNEQ applies the NEQ predicate on the "wakatime_id" field.
func WakatimeIDNEQ(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNEQ(FieldWakatimeID, v))
}

// WakatimeIDIn applies the In predicate on the "wakatime_id" field.
func WakatimeIDIn(vs ...int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldIn(FieldWakatimeID, vs...))
}

// WakatimeIDNotIn applies the NotIn predicate on the "wakatime_id" field.
func WakatimeIDNotIn(vs ...int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNotIn(FieldWakatimeID, vs...))
}

// WakatimeIDGT applies the GT predicate on the "wakatime_id" field.
func WakatimeIDGT(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGT(FieldWakatimeID, v))
}

// WakatimeIDGTE applies the GTE predicate on the "wakatime_id" field.
func WakatimeIDGTE(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGTE(FieldWakatimeID, v))
}

// WakatimeIDLT applies the LT predicate on the "wakatime_id" field.
func WakatimeIDLT(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLT(FieldWakatimeID, v))
}

// WakatimeIDLTE applies the LTE predicate on the "wakatime_id" field.
func WakatimeIDLTE(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLTE(FieldWakatimeID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLTE(FieldUserID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldContainsFold(FieldName, v))
}

// TotalSecondsEQ applies the EQ predicate on the "total_seconds" field.
func TotalSecondsEQ(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldEQ(FieldTotalSeconds, v))
}

// TotalSecondsNEQ applies the NEQ predicate on the "total_seconds" field.
func TotalSecondsNEQ(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNEQ(FieldTotalSeconds, v))
}

// TotalSecondsIn applies the In predicate on the "total_seconds" field.
func TotalSecondsIn(vs ...int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldIn(FieldTotalSeconds, vs...))
}

// TotalSecondsNotIn applies the NotIn predicate on the "total_seconds" field.
func TotalSecondsNotIn(vs ...int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldNotIn(FieldTotalSeconds, vs...))
}

// TotalSecondsGT applies the GT predicate on the "total_seconds" field.
func TotalSecondsGT(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGT(FieldTotalSeconds, v))
}

// TotalSecondsGTE applies the GTE predicate on the "total_seconds" field.
func TotalSecondsGTE(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldGTE(FieldTotalSeconds, v))
}

// TotalSecondsLT applies the LT predicate on the "total_seconds" field.
func TotalSecondsLT(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLT(FieldTotalSeconds, v))
}

// TotalSecondsLTE applies the LTE predicate on the "total_seconds" field.
func TotalSecondsLTE(v int64) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.FieldLTE(FieldTotalSeconds, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldEQ(FieldCreateTime, vc))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldNEQ(FieldCreateTime, vc))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...timeutil.TimeStamp) predicate.WakatimeCategory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.WakatimeCategory(sql.FieldIn(FieldCreateTime, v...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...timeutil.TimeStamp) predicate.WakatimeCategory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.WakatimeCategory(sql.FieldNotIn(FieldCreateTime, v...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldGT(FieldCreateTime, vc))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldGTE(FieldCreateTime, vc))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldLT(FieldCreateTime, vc))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldLTE(FieldCreateTime, vc))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldEQ(FieldUpdateTime, vc))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldNEQ(FieldUpdateTime, vc))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...timeutil.TimeStamp) predicate.WakatimeCategory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.WakatimeCategory(sql.FieldIn(FieldUpdateTime, v...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...timeutil.TimeStamp) predicate.WakatimeCategory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.WakatimeCategory(sql.FieldNotIn(FieldUpdateTime, v...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldGT(FieldUpdateTime, vc))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldGTE(FieldUpdateTime, vc))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldLT(FieldUpdateTime, vc))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v timeutil.TimeStamp) predicate.WakatimeCategory {
	vc := int64(v)
	return predicate.WakatimeCategory(sql.FieldLTE(FieldUpdateTime, vc))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WakatimeCategory) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WakatimeCategory) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WakatimeCategory) predicate.WakatimeCategory {
	return predicate.WakatimeCategory(sql.NotPredicates(p))
}
