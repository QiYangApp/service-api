// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/enums/state"
	"ent/models/permissiongroup"
	"ent/models/predicate"
	"ent/utils/timeutil"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionGroupUpdate is the builder for updating PermissionGroup entities.
type PermissionGroupUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionGroupMutation
}

// Where appends a list predicates to the PermissionGroupUpdate builder.
func (pgu *PermissionGroupUpdate) Where(ps ...predicate.PermissionGroup) *PermissionGroupUpdate {
	pgu.mutation.Where(ps...)
	return pgu
}

// SetPermissionName sets the "permission_name" field.
func (pgu *PermissionGroupUpdate) SetPermissionName(s string) *PermissionGroupUpdate {
	pgu.mutation.SetPermissionName(s)
	return pgu
}

// SetNillablePermissionName sets the "permission_name" field if the given value is not nil.
func (pgu *PermissionGroupUpdate) SetNillablePermissionName(s *string) *PermissionGroupUpdate {
	if s != nil {
		pgu.SetPermissionName(*s)
	}
	return pgu
}

// SetIoc sets the "ioc" field.
func (pgu *PermissionGroupUpdate) SetIoc(s string) *PermissionGroupUpdate {
	pgu.mutation.SetIoc(s)
	return pgu
}

// SetNillableIoc sets the "ioc" field if the given value is not nil.
func (pgu *PermissionGroupUpdate) SetNillableIoc(s *string) *PermissionGroupUpdate {
	if s != nil {
		pgu.SetIoc(*s)
	}
	return pgu
}

// SetSort sets the "sort" field.
func (pgu *PermissionGroupUpdate) SetSort(i int32) *PermissionGroupUpdate {
	pgu.mutation.ResetSort()
	pgu.mutation.SetSort(i)
	return pgu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (pgu *PermissionGroupUpdate) SetNillableSort(i *int32) *PermissionGroupUpdate {
	if i != nil {
		pgu.SetSort(*i)
	}
	return pgu
}

// AddSort adds i to the "sort" field.
func (pgu *PermissionGroupUpdate) AddSort(i int32) *PermissionGroupUpdate {
	pgu.mutation.AddSort(i)
	return pgu
}

// SetLeft sets the "left" field.
func (pgu *PermissionGroupUpdate) SetLeft(i int32) *PermissionGroupUpdate {
	pgu.mutation.ResetLeft()
	pgu.mutation.SetLeft(i)
	return pgu
}

// SetNillableLeft sets the "left" field if the given value is not nil.
func (pgu *PermissionGroupUpdate) SetNillableLeft(i *int32) *PermissionGroupUpdate {
	if i != nil {
		pgu.SetLeft(*i)
	}
	return pgu
}

// AddLeft adds i to the "left" field.
func (pgu *PermissionGroupUpdate) AddLeft(i int32) *PermissionGroupUpdate {
	pgu.mutation.AddLeft(i)
	return pgu
}

// SetRight sets the "right" field.
func (pgu *PermissionGroupUpdate) SetRight(i int32) *PermissionGroupUpdate {
	pgu.mutation.ResetRight()
	pgu.mutation.SetRight(i)
	return pgu
}

// SetNillableRight sets the "right" field if the given value is not nil.
func (pgu *PermissionGroupUpdate) SetNillableRight(i *int32) *PermissionGroupUpdate {
	if i != nil {
		pgu.SetRight(*i)
	}
	return pgu
}

// AddRight adds i to the "right" field.
func (pgu *PermissionGroupUpdate) AddRight(i int32) *PermissionGroupUpdate {
	pgu.mutation.AddRight(i)
	return pgu
}

// SetState sets the "state" field.
func (pgu *PermissionGroupUpdate) SetState(ss state.SwitchState) *PermissionGroupUpdate {
	pgu.mutation.ResetState()
	pgu.mutation.SetState(ss)
	return pgu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pgu *PermissionGroupUpdate) SetNillableState(ss *state.SwitchState) *PermissionGroupUpdate {
	if ss != nil {
		pgu.SetState(*ss)
	}
	return pgu
}

// AddState adds ss to the "state" field.
func (pgu *PermissionGroupUpdate) AddState(ss state.SwitchState) *PermissionGroupUpdate {
	pgu.mutation.AddState(ss)
	return pgu
}

// SetUpdateTime sets the "update_time" field.
func (pgu *PermissionGroupUpdate) SetUpdateTime(ts timeutil.TimeStamp) *PermissionGroupUpdate {
	pgu.mutation.ResetUpdateTime()
	pgu.mutation.SetUpdateTime(ts)
	return pgu
}

// AddUpdateTime adds ts to the "update_time" field.
func (pgu *PermissionGroupUpdate) AddUpdateTime(ts timeutil.TimeStamp) *PermissionGroupUpdate {
	pgu.mutation.AddUpdateTime(ts)
	return pgu
}

// Mutation returns the PermissionGroupMutation object of the builder.
func (pgu *PermissionGroupUpdate) Mutation() *PermissionGroupMutation {
	return pgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pgu *PermissionGroupUpdate) Save(ctx context.Context) (int, error) {
	pgu.defaults()
	return withHooks(ctx, pgu.sqlSave, pgu.mutation, pgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pgu *PermissionGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := pgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pgu *PermissionGroupUpdate) Exec(ctx context.Context) error {
	_, err := pgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgu *PermissionGroupUpdate) ExecX(ctx context.Context) {
	if err := pgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgu *PermissionGroupUpdate) defaults() {
	if _, ok := pgu.mutation.UpdateTime(); !ok {
		v := permissiongroup.UpdateDefaultUpdateTime()
		pgu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgu *PermissionGroupUpdate) check() error {
	if v, ok := pgu.mutation.PermissionName(); ok {
		if err := permissiongroup.PermissionNameValidator(v); err != nil {
			return &ValidationError{Name: "permission_name", err: fmt.Errorf(`models: validator failed for field "PermissionGroup.permission_name": %w`, err)}
		}
	}
	if v, ok := pgu.mutation.Ioc(); ok {
		if err := permissiongroup.IocValidator(v); err != nil {
			return &ValidationError{Name: "ioc", err: fmt.Errorf(`models: validator failed for field "PermissionGroup.ioc": %w`, err)}
		}
	}
	return nil
}

func (pgu *PermissionGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissiongroup.Table, permissiongroup.Columns, sqlgraph.NewFieldSpec(permissiongroup.FieldID, field.TypeInt64))
	if ps := pgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pgu.mutation.PermissionName(); ok {
		_spec.SetField(permissiongroup.FieldPermissionName, field.TypeString, value)
	}
	if value, ok := pgu.mutation.Ioc(); ok {
		_spec.SetField(permissiongroup.FieldIoc, field.TypeString, value)
	}
	if value, ok := pgu.mutation.Sort(); ok {
		_spec.SetField(permissiongroup.FieldSort, field.TypeInt32, value)
	}
	if value, ok := pgu.mutation.AddedSort(); ok {
		_spec.AddField(permissiongroup.FieldSort, field.TypeInt32, value)
	}
	if value, ok := pgu.mutation.Left(); ok {
		_spec.SetField(permissiongroup.FieldLeft, field.TypeInt32, value)
	}
	if value, ok := pgu.mutation.AddedLeft(); ok {
		_spec.AddField(permissiongroup.FieldLeft, field.TypeInt32, value)
	}
	if value, ok := pgu.mutation.Right(); ok {
		_spec.SetField(permissiongroup.FieldRight, field.TypeInt32, value)
	}
	if value, ok := pgu.mutation.AddedRight(); ok {
		_spec.AddField(permissiongroup.FieldRight, field.TypeInt32, value)
	}
	if value, ok := pgu.mutation.State(); ok {
		_spec.SetField(permissiongroup.FieldState, field.TypeInt, value)
	}
	if value, ok := pgu.mutation.AddedState(); ok {
		_spec.AddField(permissiongroup.FieldState, field.TypeInt, value)
	}
	if value, ok := pgu.mutation.UpdateTime(); ok {
		_spec.SetField(permissiongroup.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := pgu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(permissiongroup.FieldUpdateTime, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissiongroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pgu.mutation.done = true
	return n, nil
}

// PermissionGroupUpdateOne is the builder for updating a single PermissionGroup entity.
type PermissionGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionGroupMutation
}

// SetPermissionName sets the "permission_name" field.
func (pguo *PermissionGroupUpdateOne) SetPermissionName(s string) *PermissionGroupUpdateOne {
	pguo.mutation.SetPermissionName(s)
	return pguo
}

// SetNillablePermissionName sets the "permission_name" field if the given value is not nil.
func (pguo *PermissionGroupUpdateOne) SetNillablePermissionName(s *string) *PermissionGroupUpdateOne {
	if s != nil {
		pguo.SetPermissionName(*s)
	}
	return pguo
}

// SetIoc sets the "ioc" field.
func (pguo *PermissionGroupUpdateOne) SetIoc(s string) *PermissionGroupUpdateOne {
	pguo.mutation.SetIoc(s)
	return pguo
}

// SetNillableIoc sets the "ioc" field if the given value is not nil.
func (pguo *PermissionGroupUpdateOne) SetNillableIoc(s *string) *PermissionGroupUpdateOne {
	if s != nil {
		pguo.SetIoc(*s)
	}
	return pguo
}

// SetSort sets the "sort" field.
func (pguo *PermissionGroupUpdateOne) SetSort(i int32) *PermissionGroupUpdateOne {
	pguo.mutation.ResetSort()
	pguo.mutation.SetSort(i)
	return pguo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (pguo *PermissionGroupUpdateOne) SetNillableSort(i *int32) *PermissionGroupUpdateOne {
	if i != nil {
		pguo.SetSort(*i)
	}
	return pguo
}

// AddSort adds i to the "sort" field.
func (pguo *PermissionGroupUpdateOne) AddSort(i int32) *PermissionGroupUpdateOne {
	pguo.mutation.AddSort(i)
	return pguo
}

// SetLeft sets the "left" field.
func (pguo *PermissionGroupUpdateOne) SetLeft(i int32) *PermissionGroupUpdateOne {
	pguo.mutation.ResetLeft()
	pguo.mutation.SetLeft(i)
	return pguo
}

// SetNillableLeft sets the "left" field if the given value is not nil.
func (pguo *PermissionGroupUpdateOne) SetNillableLeft(i *int32) *PermissionGroupUpdateOne {
	if i != nil {
		pguo.SetLeft(*i)
	}
	return pguo
}

// AddLeft adds i to the "left" field.
func (pguo *PermissionGroupUpdateOne) AddLeft(i int32) *PermissionGroupUpdateOne {
	pguo.mutation.AddLeft(i)
	return pguo
}

// SetRight sets the "right" field.
func (pguo *PermissionGroupUpdateOne) SetRight(i int32) *PermissionGroupUpdateOne {
	pguo.mutation.ResetRight()
	pguo.mutation.SetRight(i)
	return pguo
}

// SetNillableRight sets the "right" field if the given value is not nil.
func (pguo *PermissionGroupUpdateOne) SetNillableRight(i *int32) *PermissionGroupUpdateOne {
	if i != nil {
		pguo.SetRight(*i)
	}
	return pguo
}

// AddRight adds i to the "right" field.
func (pguo *PermissionGroupUpdateOne) AddRight(i int32) *PermissionGroupUpdateOne {
	pguo.mutation.AddRight(i)
	return pguo
}

// SetState sets the "state" field.
func (pguo *PermissionGroupUpdateOne) SetState(ss state.SwitchState) *PermissionGroupUpdateOne {
	pguo.mutation.ResetState()
	pguo.mutation.SetState(ss)
	return pguo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pguo *PermissionGroupUpdateOne) SetNillableState(ss *state.SwitchState) *PermissionGroupUpdateOne {
	if ss != nil {
		pguo.SetState(*ss)
	}
	return pguo
}

// AddState adds ss to the "state" field.
func (pguo *PermissionGroupUpdateOne) AddState(ss state.SwitchState) *PermissionGroupUpdateOne {
	pguo.mutation.AddState(ss)
	return pguo
}

// SetUpdateTime sets the "update_time" field.
func (pguo *PermissionGroupUpdateOne) SetUpdateTime(ts timeutil.TimeStamp) *PermissionGroupUpdateOne {
	pguo.mutation.ResetUpdateTime()
	pguo.mutation.SetUpdateTime(ts)
	return pguo
}

// AddUpdateTime adds ts to the "update_time" field.
func (pguo *PermissionGroupUpdateOne) AddUpdateTime(ts timeutil.TimeStamp) *PermissionGroupUpdateOne {
	pguo.mutation.AddUpdateTime(ts)
	return pguo
}

// Mutation returns the PermissionGroupMutation object of the builder.
func (pguo *PermissionGroupUpdateOne) Mutation() *PermissionGroupMutation {
	return pguo.mutation
}

// Where appends a list predicates to the PermissionGroupUpdate builder.
func (pguo *PermissionGroupUpdateOne) Where(ps ...predicate.PermissionGroup) *PermissionGroupUpdateOne {
	pguo.mutation.Where(ps...)
	return pguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pguo *PermissionGroupUpdateOne) Select(field string, fields ...string) *PermissionGroupUpdateOne {
	pguo.fields = append([]string{field}, fields...)
	return pguo
}

// Save executes the query and returns the updated PermissionGroup entity.
func (pguo *PermissionGroupUpdateOne) Save(ctx context.Context) (*PermissionGroup, error) {
	pguo.defaults()
	return withHooks(ctx, pguo.sqlSave, pguo.mutation, pguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pguo *PermissionGroupUpdateOne) SaveX(ctx context.Context) *PermissionGroup {
	node, err := pguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pguo *PermissionGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := pguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pguo *PermissionGroupUpdateOne) ExecX(ctx context.Context) {
	if err := pguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pguo *PermissionGroupUpdateOne) defaults() {
	if _, ok := pguo.mutation.UpdateTime(); !ok {
		v := permissiongroup.UpdateDefaultUpdateTime()
		pguo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pguo *PermissionGroupUpdateOne) check() error {
	if v, ok := pguo.mutation.PermissionName(); ok {
		if err := permissiongroup.PermissionNameValidator(v); err != nil {
			return &ValidationError{Name: "permission_name", err: fmt.Errorf(`models: validator failed for field "PermissionGroup.permission_name": %w`, err)}
		}
	}
	if v, ok := pguo.mutation.Ioc(); ok {
		if err := permissiongroup.IocValidator(v); err != nil {
			return &ValidationError{Name: "ioc", err: fmt.Errorf(`models: validator failed for field "PermissionGroup.ioc": %w`, err)}
		}
	}
	return nil
}

func (pguo *PermissionGroupUpdateOne) sqlSave(ctx context.Context) (_node *PermissionGroup, err error) {
	if err := pguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permissiongroup.Table, permissiongroup.Columns, sqlgraph.NewFieldSpec(permissiongroup.FieldID, field.TypeInt64))
	id, ok := pguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "PermissionGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissiongroup.FieldID)
		for _, f := range fields {
			if !permissiongroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != permissiongroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pguo.mutation.PermissionName(); ok {
		_spec.SetField(permissiongroup.FieldPermissionName, field.TypeString, value)
	}
	if value, ok := pguo.mutation.Ioc(); ok {
		_spec.SetField(permissiongroup.FieldIoc, field.TypeString, value)
	}
	if value, ok := pguo.mutation.Sort(); ok {
		_spec.SetField(permissiongroup.FieldSort, field.TypeInt32, value)
	}
	if value, ok := pguo.mutation.AddedSort(); ok {
		_spec.AddField(permissiongroup.FieldSort, field.TypeInt32, value)
	}
	if value, ok := pguo.mutation.Left(); ok {
		_spec.SetField(permissiongroup.FieldLeft, field.TypeInt32, value)
	}
	if value, ok := pguo.mutation.AddedLeft(); ok {
		_spec.AddField(permissiongroup.FieldLeft, field.TypeInt32, value)
	}
	if value, ok := pguo.mutation.Right(); ok {
		_spec.SetField(permissiongroup.FieldRight, field.TypeInt32, value)
	}
	if value, ok := pguo.mutation.AddedRight(); ok {
		_spec.AddField(permissiongroup.FieldRight, field.TypeInt32, value)
	}
	if value, ok := pguo.mutation.State(); ok {
		_spec.SetField(permissiongroup.FieldState, field.TypeInt, value)
	}
	if value, ok := pguo.mutation.AddedState(); ok {
		_spec.AddField(permissiongroup.FieldState, field.TypeInt, value)
	}
	if value, ok := pguo.mutation.UpdateTime(); ok {
		_spec.SetField(permissiongroup.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := pguo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(permissiongroup.FieldUpdateTime, field.TypeInt64, value)
	}
	_node = &PermissionGroup{config: pguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissiongroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pguo.mutation.done = true
	return _node, nil
}
