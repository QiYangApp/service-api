// Code generated by ent, DO NOT EDIT.

package router

import (
	"ent/enums/state"
	"ent/utils/timeutil"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the router type in the database.
	Label = "router"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRouteName holds the string denoting the route_name field in the database.
	FieldRouteName = "route_name"
	// FieldRoute holds the string denoting the route field in the database.
	FieldRoute = "route"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the router in the database.
	Table = "routers"
)

// Columns holds all SQL columns for router fields.
var Columns = []string{
	FieldID,
	FieldRouteName,
	FieldRoute,
	FieldDescription,
	FieldState,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRouteName holds the default value on creation for the "route_name" field.
	DefaultRouteName string
	// RouteNameValidator is a validator for the "route_name" field. It is called by the builders before save.
	RouteNameValidator func(string) error
	// DefaultRoute holds the default value on creation for the "route" field.
	DefaultRoute string
	// RouteValidator is a validator for the "route" field. It is called by the builders before save.
	RouteValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState state.SwitchState
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime timeutil.TimeStamp
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() timeutil.TimeStamp
)

// OrderOption defines the ordering options for the Router queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRouteName orders the results by the route_name field.
func ByRouteName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRouteName, opts...).ToFunc()
}

// ByRoute orders the results by the route field.
func ByRoute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoute, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
