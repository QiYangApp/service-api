// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/user"
	"ent/types/auth"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetLowerName sets the "lower_name" field.
func (uu *UserUpdate) SetLowerName(s string) *UserUpdate {
	uu.mutation.SetLowerName(s)
	return uu
}

// SetNillableLowerName sets the "lower_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLowerName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLowerName(*s)
	}
	return uu
}

// SetFullName sets the "full_name" field.
func (uu *UserUpdate) SetFullName(s string) *UserUpdate {
	uu.mutation.SetFullName(s)
	return uu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFullName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFullName(*s)
	}
	return uu
}

// SetPasswdSalt sets the "passwd_salt" field.
func (uu *UserUpdate) SetPasswdSalt(s string) *UserUpdate {
	uu.mutation.SetPasswdSalt(s)
	return uu
}

// SetNillablePasswdSalt sets the "passwd_salt" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswdSalt(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswdSalt(*s)
	}
	return uu
}

// SetPasswdHashAlgo sets the "passwd_hash_algo" field.
func (uu *UserUpdate) SetPasswdHashAlgo(s string) *UserUpdate {
	uu.mutation.SetPasswdHashAlgo(s)
	return uu
}

// SetNillablePasswdHashAlgo sets the "passwd_hash_algo" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswdHashAlgo(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswdHashAlgo(*s)
	}
	return uu
}

// SetPasswd sets the "passwd" field.
func (uu *UserUpdate) SetPasswd(s string) *UserUpdate {
	uu.mutation.SetPasswd(s)
	return uu
}

// SetNillablePasswd sets the "passwd" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswd(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswd(*s)
	}
	return uu
}

// SetLanguage sets the "language" field.
func (uu *UserUpdate) SetLanguage(s string) *UserUpdate {
	uu.mutation.SetLanguage(s)
	return uu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLanguage(s *string) *UserUpdate {
	if s != nil {
		uu.SetLanguage(*s)
	}
	return uu
}

// SetLoginName sets the "login_name" field.
func (uu *UserUpdate) SetLoginName(s string) *UserUpdate {
	uu.mutation.SetLoginName(s)
	return uu
}

// SetNillableLoginName sets the "login_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLoginName(*s)
	}
	return uu
}

// SetLoginSource sets the "login_source" field.
func (uu *UserUpdate) SetLoginSource(i int64) *UserUpdate {
	uu.mutation.ResetLoginSource()
	uu.mutation.SetLoginSource(i)
	return uu
}

// SetNillableLoginSource sets the "login_source" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginSource(i *int64) *UserUpdate {
	if i != nil {
		uu.SetLoginSource(*i)
	}
	return uu
}

// AddLoginSource adds i to the "login_source" field.
func (uu *UserUpdate) AddLoginSource(i int64) *UserUpdate {
	uu.mutation.AddLoginSource(i)
	return uu
}

// SetLoginType sets the "login_type" field.
func (uu *UserUpdate) SetLoginType(a auth.Type) *UserUpdate {
	uu.mutation.ResetLoginType()
	uu.mutation.SetLoginType(a)
	return uu
}

// SetNillableLoginType sets the "login_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginType(a *auth.Type) *UserUpdate {
	if a != nil {
		uu.SetLoginType(*a)
	}
	return uu
}

// AddLoginType adds a to the "login_type" field.
func (uu *UserUpdate) AddLoginType(a auth.Type) *UserUpdate {
	uu.mutation.AddLoginType(a)
	return uu
}

// SetIsRestricted sets the "is_restricted" field.
func (uu *UserUpdate) SetIsRestricted(b bool) *UserUpdate {
	uu.mutation.SetIsRestricted(b)
	return uu
}

// SetNillableIsRestricted sets the "is_restricted" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsRestricted(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsRestricted(*b)
	}
	return uu
}

// SetIsActive sets the "is_active" field.
func (uu *UserUpdate) SetIsActive(b bool) *UserUpdate {
	uu.mutation.SetIsActive(b)
	return uu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsActive(*b)
	}
	return uu
}

// SetProhibitLogin sets the "prohibit_login" field.
func (uu *UserUpdate) SetProhibitLogin(b bool) *UserUpdate {
	uu.mutation.SetProhibitLogin(b)
	return uu
}

// SetNillableProhibitLogin sets the "prohibit_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableProhibitLogin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetProhibitLogin(*b)
	}
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`models: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`models: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LowerName(); ok {
		if err := user.LowerNameValidator(v); err != nil {
			return &ValidationError{Name: "lower_name", err: fmt.Errorf(`models: validator failed for field "User.lower_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.FullName(); ok {
		if err := user.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`models: validator failed for field "User.full_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PasswdSalt(); ok {
		if err := user.PasswdSaltValidator(v); err != nil {
			return &ValidationError{Name: "passwd_salt", err: fmt.Errorf(`models: validator failed for field "User.passwd_salt": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PasswdHashAlgo(); ok {
		if err := user.PasswdHashAlgoValidator(v); err != nil {
			return &ValidationError{Name: "passwd_hash_algo", err: fmt.Errorf(`models: validator failed for field "User.passwd_hash_algo": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Passwd(); ok {
		if err := user.PasswdValidator(v); err != nil {
			return &ValidationError{Name: "passwd", err: fmt.Errorf(`models: validator failed for field "User.passwd": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Language(); ok {
		if err := user.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`models: validator failed for field "User.language": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LoginName(); ok {
		if err := user.LoginNameValidator(v); err != nil {
			return &ValidationError{Name: "login_name", err: fmt.Errorf(`models: validator failed for field "User.login_name": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LowerName(); ok {
		_spec.SetField(user.FieldLowerName, field.TypeString, value)
	}
	if value, ok := uu.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswdSalt(); ok {
		_spec.SetField(user.FieldPasswdSalt, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswdHashAlgo(); ok {
		_spec.SetField(user.FieldPasswdHashAlgo, field.TypeString, value)
	}
	if value, ok := uu.mutation.Passwd(); ok {
		_spec.SetField(user.FieldPasswd, field.TypeString, value)
	}
	if value, ok := uu.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if value, ok := uu.mutation.LoginName(); ok {
		_spec.SetField(user.FieldLoginName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LoginSource(); ok {
		_spec.SetField(user.FieldLoginSource, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedLoginSource(); ok {
		_spec.AddField(user.FieldLoginSource, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.LoginType(); ok {
		_spec.SetField(user.FieldLoginType, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedLoginType(); ok {
		_spec.AddField(user.FieldLoginType, field.TypeInt, value)
	}
	if value, ok := uu.mutation.IsRestricted(); ok {
		_spec.SetField(user.FieldIsRestricted, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uu.mutation.ProhibitLogin(); ok {
		_spec.SetField(user.FieldProhibitLogin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetLowerName sets the "lower_name" field.
func (uuo *UserUpdateOne) SetLowerName(s string) *UserUpdateOne {
	uuo.mutation.SetLowerName(s)
	return uuo
}

// SetNillableLowerName sets the "lower_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLowerName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLowerName(*s)
	}
	return uuo
}

// SetFullName sets the "full_name" field.
func (uuo *UserUpdateOne) SetFullName(s string) *UserUpdateOne {
	uuo.mutation.SetFullName(s)
	return uuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFullName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFullName(*s)
	}
	return uuo
}

// SetPasswdSalt sets the "passwd_salt" field.
func (uuo *UserUpdateOne) SetPasswdSalt(s string) *UserUpdateOne {
	uuo.mutation.SetPasswdSalt(s)
	return uuo
}

// SetNillablePasswdSalt sets the "passwd_salt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswdSalt(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswdSalt(*s)
	}
	return uuo
}

// SetPasswdHashAlgo sets the "passwd_hash_algo" field.
func (uuo *UserUpdateOne) SetPasswdHashAlgo(s string) *UserUpdateOne {
	uuo.mutation.SetPasswdHashAlgo(s)
	return uuo
}

// SetNillablePasswdHashAlgo sets the "passwd_hash_algo" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswdHashAlgo(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswdHashAlgo(*s)
	}
	return uuo
}

// SetPasswd sets the "passwd" field.
func (uuo *UserUpdateOne) SetPasswd(s string) *UserUpdateOne {
	uuo.mutation.SetPasswd(s)
	return uuo
}

// SetNillablePasswd sets the "passwd" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswd(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswd(*s)
	}
	return uuo
}

// SetLanguage sets the "language" field.
func (uuo *UserUpdateOne) SetLanguage(s string) *UserUpdateOne {
	uuo.mutation.SetLanguage(s)
	return uuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLanguage(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLanguage(*s)
	}
	return uuo
}

// SetLoginName sets the "login_name" field.
func (uuo *UserUpdateOne) SetLoginName(s string) *UserUpdateOne {
	uuo.mutation.SetLoginName(s)
	return uuo
}

// SetNillableLoginName sets the "login_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLoginName(*s)
	}
	return uuo
}

// SetLoginSource sets the "login_source" field.
func (uuo *UserUpdateOne) SetLoginSource(i int64) *UserUpdateOne {
	uuo.mutation.ResetLoginSource()
	uuo.mutation.SetLoginSource(i)
	return uuo
}

// SetNillableLoginSource sets the "login_source" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginSource(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetLoginSource(*i)
	}
	return uuo
}

// AddLoginSource adds i to the "login_source" field.
func (uuo *UserUpdateOne) AddLoginSource(i int64) *UserUpdateOne {
	uuo.mutation.AddLoginSource(i)
	return uuo
}

// SetLoginType sets the "login_type" field.
func (uuo *UserUpdateOne) SetLoginType(a auth.Type) *UserUpdateOne {
	uuo.mutation.ResetLoginType()
	uuo.mutation.SetLoginType(a)
	return uuo
}

// SetNillableLoginType sets the "login_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginType(a *auth.Type) *UserUpdateOne {
	if a != nil {
		uuo.SetLoginType(*a)
	}
	return uuo
}

// AddLoginType adds a to the "login_type" field.
func (uuo *UserUpdateOne) AddLoginType(a auth.Type) *UserUpdateOne {
	uuo.mutation.AddLoginType(a)
	return uuo
}

// SetIsRestricted sets the "is_restricted" field.
func (uuo *UserUpdateOne) SetIsRestricted(b bool) *UserUpdateOne {
	uuo.mutation.SetIsRestricted(b)
	return uuo
}

// SetNillableIsRestricted sets the "is_restricted" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsRestricted(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsRestricted(*b)
	}
	return uuo
}

// SetIsActive sets the "is_active" field.
func (uuo *UserUpdateOne) SetIsActive(b bool) *UserUpdateOne {
	uuo.mutation.SetIsActive(b)
	return uuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsActive(*b)
	}
	return uuo
}

// SetProhibitLogin sets the "prohibit_login" field.
func (uuo *UserUpdateOne) SetProhibitLogin(b bool) *UserUpdateOne {
	uuo.mutation.SetProhibitLogin(b)
	return uuo
}

// SetNillableProhibitLogin sets the "prohibit_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProhibitLogin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetProhibitLogin(*b)
	}
	return uuo
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`models: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`models: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LowerName(); ok {
		if err := user.LowerNameValidator(v); err != nil {
			return &ValidationError{Name: "lower_name", err: fmt.Errorf(`models: validator failed for field "User.lower_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.FullName(); ok {
		if err := user.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`models: validator failed for field "User.full_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PasswdSalt(); ok {
		if err := user.PasswdSaltValidator(v); err != nil {
			return &ValidationError{Name: "passwd_salt", err: fmt.Errorf(`models: validator failed for field "User.passwd_salt": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PasswdHashAlgo(); ok {
		if err := user.PasswdHashAlgoValidator(v); err != nil {
			return &ValidationError{Name: "passwd_hash_algo", err: fmt.Errorf(`models: validator failed for field "User.passwd_hash_algo": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Passwd(); ok {
		if err := user.PasswdValidator(v); err != nil {
			return &ValidationError{Name: "passwd", err: fmt.Errorf(`models: validator failed for field "User.passwd": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Language(); ok {
		if err := user.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`models: validator failed for field "User.language": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LoginName(); ok {
		if err := user.LoginNameValidator(v); err != nil {
			return &ValidationError{Name: "login_name", err: fmt.Errorf(`models: validator failed for field "User.login_name": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LowerName(); ok {
		_spec.SetField(user.FieldLowerName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswdSalt(); ok {
		_spec.SetField(user.FieldPasswdSalt, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswdHashAlgo(); ok {
		_spec.SetField(user.FieldPasswdHashAlgo, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Passwd(); ok {
		_spec.SetField(user.FieldPasswd, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Language(); ok {
		_spec.SetField(user.FieldLanguage, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LoginName(); ok {
		_spec.SetField(user.FieldLoginName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LoginSource(); ok {
		_spec.SetField(user.FieldLoginSource, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedLoginSource(); ok {
		_spec.AddField(user.FieldLoginSource, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.LoginType(); ok {
		_spec.SetField(user.FieldLoginType, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedLoginType(); ok {
		_spec.AddField(user.FieldLoginType, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.IsRestricted(); ok {
		_spec.SetField(user.FieldIsRestricted, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsActive(); ok {
		_spec.SetField(user.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.ProhibitLogin(); ok {
		_spec.SetField(user.FieldProhibitLogin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
