// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/wakatimeprojectduration"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WakatimeProjectDurationCreate is the builder for creating a WakatimeProjectDuration entity.
type WakatimeProjectDurationCreate struct {
	config
	mutation *WakatimeProjectDurationMutation
	hooks    []Hook
}

// Mutation returns the WakatimeProjectDurationMutation object of the builder.
func (wpdc *WakatimeProjectDurationCreate) Mutation() *WakatimeProjectDurationMutation {
	return wpdc.mutation
}

// Save creates the WakatimeProjectDuration in the database.
func (wpdc *WakatimeProjectDurationCreate) Save(ctx context.Context) (*WakatimeProjectDuration, error) {
	return withHooks(ctx, wpdc.sqlSave, wpdc.mutation, wpdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wpdc *WakatimeProjectDurationCreate) SaveX(ctx context.Context) *WakatimeProjectDuration {
	v, err := wpdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wpdc *WakatimeProjectDurationCreate) Exec(ctx context.Context) error {
	_, err := wpdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpdc *WakatimeProjectDurationCreate) ExecX(ctx context.Context) {
	if err := wpdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wpdc *WakatimeProjectDurationCreate) check() error {
	return nil
}

func (wpdc *WakatimeProjectDurationCreate) sqlSave(ctx context.Context) (*WakatimeProjectDuration, error) {
	if err := wpdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wpdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wpdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	wpdc.mutation.id = &_node.ID
	wpdc.mutation.done = true
	return _node, nil
}

func (wpdc *WakatimeProjectDurationCreate) createSpec() (*WakatimeProjectDuration, *sqlgraph.CreateSpec) {
	var (
		_node = &WakatimeProjectDuration{config: wpdc.config}
		_spec = sqlgraph.NewCreateSpec(wakatimeprojectduration.Table, sqlgraph.NewFieldSpec(wakatimeprojectduration.FieldID, field.TypeInt64))
	)
	return _node, _spec
}

// WakatimeProjectDurationCreateBulk is the builder for creating many WakatimeProjectDuration entities in bulk.
type WakatimeProjectDurationCreateBulk struct {
	config
	err      error
	builders []*WakatimeProjectDurationCreate
}

// Save creates the WakatimeProjectDuration entities in the database.
func (wpdcb *WakatimeProjectDurationCreateBulk) Save(ctx context.Context) ([]*WakatimeProjectDuration, error) {
	if wpdcb.err != nil {
		return nil, wpdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wpdcb.builders))
	nodes := make([]*WakatimeProjectDuration, len(wpdcb.builders))
	mutators := make([]Mutator, len(wpdcb.builders))
	for i := range wpdcb.builders {
		func(i int, root context.Context) {
			builder := wpdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WakatimeProjectDurationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wpdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wpdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wpdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wpdcb *WakatimeProjectDurationCreateBulk) SaveX(ctx context.Context) []*WakatimeProjectDuration {
	v, err := wpdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wpdcb *WakatimeProjectDurationCreateBulk) Exec(ctx context.Context) error {
	_, err := wpdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wpdcb *WakatimeProjectDurationCreateBulk) ExecX(ctx context.Context) {
	if err := wpdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
