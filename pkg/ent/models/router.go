// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/enums/state"
	"ent/models/router"
	"fmt"
	"frame/util/timeutil"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Router is the model entity for the Router schema.
type Router struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 路由名称
	RouteName string `json:"route_name,omitempty"`
	// 路由
	Route string `json:"route,omitempty"`
	// 描述
	Description string `json:"description,omitempty"`
	// State holds the value of the "state" field.
	State state.SwitchState `json:"state,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime timeutil.TimeStamp `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   timeutil.TimeStamp `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Router) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case router.FieldID, router.FieldState, router.FieldCreateTime, router.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case router.FieldRouteName, router.FieldRoute, router.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Router fields.
func (r *Router) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case router.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case router.FieldRouteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field route_name", values[i])
			} else if value.Valid {
				r.RouteName = value.String
			}
		case router.FieldRoute:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field route", values[i])
			} else if value.Valid {
				r.Route = value.String
			}
		case router.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case router.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				r.State = state.SwitchState(value.Int64)
			}
		case router.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = timeutil.TimeStamp(value.Int64)
			}
		case router.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = timeutil.TimeStamp(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Router.
// This includes values selected through modifiers, order, etc.
func (r *Router) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Router.
// Note that you need to call Router.Unwrap() before calling this method if this Router
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Router) Update() *RouterUpdateOne {
	return NewRouterClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Router entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Router) Unwrap() *Router {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("models: Router is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Router) String() string {
	var builder strings.Builder
	builder.WriteString("Router(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("route_name=")
	builder.WriteString(r.RouteName)
	builder.WriteString(", ")
	builder.WriteString("route=")
	builder.WriteString(r.Route)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", r.State))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", r.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", r.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// Routers is a parsable slice of Router.
type Routers []*Router
