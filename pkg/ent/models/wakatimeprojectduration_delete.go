// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/wakatimeprojectduration"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WakatimeProjectDurationDelete is the builder for deleting a WakatimeProjectDuration entity.
type WakatimeProjectDurationDelete struct {
	config
	hooks    []Hook
	mutation *WakatimeProjectDurationMutation
}

// Where appends a list predicates to the WakatimeProjectDurationDelete builder.
func (wpdd *WakatimeProjectDurationDelete) Where(ps ...predicate.WakatimeProjectDuration) *WakatimeProjectDurationDelete {
	wpdd.mutation.Where(ps...)
	return wpdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wpdd *WakatimeProjectDurationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wpdd.sqlExec, wpdd.mutation, wpdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wpdd *WakatimeProjectDurationDelete) ExecX(ctx context.Context) int {
	n, err := wpdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wpdd *WakatimeProjectDurationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(wakatimeprojectduration.Table, sqlgraph.NewFieldSpec(wakatimeprojectduration.FieldID, field.TypeInt64))
	if ps := wpdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wpdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wpdd.mutation.done = true
	return affected, err
}

// WakatimeProjectDurationDeleteOne is the builder for deleting a single WakatimeProjectDuration entity.
type WakatimeProjectDurationDeleteOne struct {
	wpdd *WakatimeProjectDurationDelete
}

// Where appends a list predicates to the WakatimeProjectDurationDelete builder.
func (wpddo *WakatimeProjectDurationDeleteOne) Where(ps ...predicate.WakatimeProjectDuration) *WakatimeProjectDurationDeleteOne {
	wpddo.wpdd.mutation.Where(ps...)
	return wpddo
}

// Exec executes the deletion query.
func (wpddo *WakatimeProjectDurationDeleteOne) Exec(ctx context.Context) error {
	n, err := wpddo.wpdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{wakatimeprojectduration.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wpddo *WakatimeProjectDurationDeleteOne) ExecX(ctx context.Context) {
	if err := wpddo.Exec(ctx); err != nil {
		panic(err)
	}
}
