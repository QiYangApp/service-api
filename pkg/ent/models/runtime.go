// Code generated by ent, DO NOT EDIT.

package models

import (
	"ent/enums/state"
	"ent/models/accesstoken"
	"ent/models/accounts"
	"ent/models/memberrolerelatedpermission"
	"ent/models/permissiongroup"
	"ent/models/permissionrelatedrouter"
	"ent/models/router"
	"ent/models/source"
	"ent/models/sourcedata"
	"ent/models/twofactor"
	"ent/models/user"
	"ent/models/userauthsource"
	"ent/models/userrelatedrole"
	"ent/models/userrole"
	"ent/models/wakatime"
	"ent/models/wakatimecategory"
	"ent/models/wakatimedependency"
	"ent/models/webauthncredential"
	"ent/schema"
	"frame/util/timeutil"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accesstokenFields := schema.AccessToken{}.Fields()
	_ = accesstokenFields
	// accesstokenDescCreateTime is the schema descriptor for create_time field.
	accesstokenDescCreateTime := accesstokenFields[10].Descriptor()
	// accesstoken.DefaultCreateTime holds the default value on creation for the create_time field.
	accesstoken.DefaultCreateTime = timeutil.TimeStamp(accesstokenDescCreateTime.Default.(int64))
	accountsFields := schema.Accounts{}.Fields()
	_ = accountsFields
	// accountsDescIsPrivate is the schema descriptor for is_private field.
	accountsDescIsPrivate := accountsFields[5].Descriptor()
	// accounts.DefaultIsPrivate holds the default value on creation for the is_private field.
	accounts.DefaultIsPrivate = accountsDescIsPrivate.Default.(bool)
	// accountsDescIsPrimary is the schema descriptor for is_primary field.
	accountsDescIsPrimary := accountsFields[7].Descriptor()
	// accounts.DefaultIsPrimary holds the default value on creation for the is_primary field.
	accounts.DefaultIsPrimary = accountsDescIsPrimary.Default.(bool)
	// accountsDescCreateTime is the schema descriptor for create_time field.
	accountsDescCreateTime := accountsFields[8].Descriptor()
	// accounts.DefaultCreateTime holds the default value on creation for the create_time field.
	accounts.DefaultCreateTime = timeutil.TimeStamp(accountsDescCreateTime.Default.(int64))
	// accountsDescUpdateTime is the schema descriptor for update_time field.
	accountsDescUpdateTime := accountsFields[9].Descriptor()
	// accounts.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	accounts.UpdateDefaultUpdateTime = accountsDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	memberrolerelatedpermissionFields := schema.MemberRoleRelatedPermission{}.Fields()
	_ = memberrolerelatedpermissionFields
	// memberrolerelatedpermissionDescCreateTime is the schema descriptor for create_time field.
	memberrolerelatedpermissionDescCreateTime := memberrolerelatedpermissionFields[3].Descriptor()
	// memberrolerelatedpermission.DefaultCreateTime holds the default value on creation for the create_time field.
	memberrolerelatedpermission.DefaultCreateTime = timeutil.TimeStamp(memberrolerelatedpermissionDescCreateTime.Default.(int64))
	// memberrolerelatedpermissionDescUpdateTime is the schema descriptor for update_time field.
	memberrolerelatedpermissionDescUpdateTime := memberrolerelatedpermissionFields[4].Descriptor()
	// memberrolerelatedpermission.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	memberrolerelatedpermission.UpdateDefaultUpdateTime = memberrolerelatedpermissionDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	permissiongroupFields := schema.PermissionGroup{}.Fields()
	_ = permissiongroupFields
	// permissiongroupDescPermissionName is the schema descriptor for permission_name field.
	permissiongroupDescPermissionName := permissiongroupFields[1].Descriptor()
	// permissiongroup.DefaultPermissionName holds the default value on creation for the permission_name field.
	permissiongroup.DefaultPermissionName = permissiongroupDescPermissionName.Default.(string)
	// permissiongroup.PermissionNameValidator is a validator for the "permission_name" field. It is called by the builders before save.
	permissiongroup.PermissionNameValidator = func() func(string) error {
		validators := permissiongroupDescPermissionName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(permission_name string) error {
			for _, fn := range fns {
				if err := fn(permission_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// permissiongroupDescIoc is the schema descriptor for ioc field.
	permissiongroupDescIoc := permissiongroupFields[2].Descriptor()
	// permissiongroup.DefaultIoc holds the default value on creation for the ioc field.
	permissiongroup.DefaultIoc = permissiongroupDescIoc.Default.(string)
	// permissiongroup.IocValidator is a validator for the "ioc" field. It is called by the builders before save.
	permissiongroup.IocValidator = func() func(string) error {
		validators := permissiongroupDescIoc.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(ioc string) error {
			for _, fn := range fns {
				if err := fn(ioc); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// permissiongroupDescSort is the schema descriptor for sort field.
	permissiongroupDescSort := permissiongroupFields[3].Descriptor()
	// permissiongroup.DefaultSort holds the default value on creation for the sort field.
	permissiongroup.DefaultSort = permissiongroupDescSort.Default.(int32)
	// permissiongroupDescLeft is the schema descriptor for left field.
	permissiongroupDescLeft := permissiongroupFields[4].Descriptor()
	// permissiongroup.DefaultLeft holds the default value on creation for the left field.
	permissiongroup.DefaultLeft = permissiongroupDescLeft.Default.(int32)
	// permissiongroupDescRight is the schema descriptor for right field.
	permissiongroupDescRight := permissiongroupFields[5].Descriptor()
	// permissiongroup.DefaultRight holds the default value on creation for the right field.
	permissiongroup.DefaultRight = permissiongroupDescRight.Default.(int32)
	// permissiongroupDescState is the schema descriptor for state field.
	permissiongroupDescState := permissiongroupFields[6].Descriptor()
	// permissiongroup.DefaultState holds the default value on creation for the state field.
	permissiongroup.DefaultState = state.SwitchState(permissiongroupDescState.Default.(int))
	// permissiongroupDescCreateTime is the schema descriptor for create_time field.
	permissiongroupDescCreateTime := permissiongroupFields[7].Descriptor()
	// permissiongroup.DefaultCreateTime holds the default value on creation for the create_time field.
	permissiongroup.DefaultCreateTime = timeutil.TimeStamp(permissiongroupDescCreateTime.Default.(int64))
	// permissiongroupDescUpdateTime is the schema descriptor for update_time field.
	permissiongroupDescUpdateTime := permissiongroupFields[8].Descriptor()
	// permissiongroup.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	permissiongroup.UpdateDefaultUpdateTime = permissiongroupDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	permissionrelatedrouterFields := schema.PermissionRelatedRouter{}.Fields()
	_ = permissionrelatedrouterFields
	// permissionrelatedrouterDescCreateTime is the schema descriptor for create_time field.
	permissionrelatedrouterDescCreateTime := permissionrelatedrouterFields[3].Descriptor()
	// permissionrelatedrouter.DefaultCreateTime holds the default value on creation for the create_time field.
	permissionrelatedrouter.DefaultCreateTime = timeutil.TimeStamp(permissionrelatedrouterDescCreateTime.Default.(int64))
	// permissionrelatedrouterDescUpdateTime is the schema descriptor for update_time field.
	permissionrelatedrouterDescUpdateTime := permissionrelatedrouterFields[4].Descriptor()
	// permissionrelatedrouter.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	permissionrelatedrouter.UpdateDefaultUpdateTime = permissionrelatedrouterDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	routerFields := schema.Router{}.Fields()
	_ = routerFields
	// routerDescRouteName is the schema descriptor for route_name field.
	routerDescRouteName := routerFields[1].Descriptor()
	// router.DefaultRouteName holds the default value on creation for the route_name field.
	router.DefaultRouteName = routerDescRouteName.Default.(string)
	// router.RouteNameValidator is a validator for the "route_name" field. It is called by the builders before save.
	router.RouteNameValidator = func() func(string) error {
		validators := routerDescRouteName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(route_name string) error {
			for _, fn := range fns {
				if err := fn(route_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// routerDescRoute is the schema descriptor for route field.
	routerDescRoute := routerFields[2].Descriptor()
	// router.DefaultRoute holds the default value on creation for the route field.
	router.DefaultRoute = routerDescRoute.Default.(string)
	// router.RouteValidator is a validator for the "route" field. It is called by the builders before save.
	router.RouteValidator = func() func(string) error {
		validators := routerDescRoute.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(route string) error {
			for _, fn := range fns {
				if err := fn(route); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// routerDescDescription is the schema descriptor for description field.
	routerDescDescription := routerFields[3].Descriptor()
	// router.DefaultDescription holds the default value on creation for the description field.
	router.DefaultDescription = routerDescDescription.Default.(string)
	// router.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	router.DescriptionValidator = func() func(string) error {
		validators := routerDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// routerDescState is the schema descriptor for state field.
	routerDescState := routerFields[4].Descriptor()
	// router.DefaultState holds the default value on creation for the state field.
	router.DefaultState = state.SwitchState(routerDescState.Default.(int))
	// routerDescCreateTime is the schema descriptor for create_time field.
	routerDescCreateTime := routerFields[5].Descriptor()
	// router.DefaultCreateTime holds the default value on creation for the create_time field.
	router.DefaultCreateTime = timeutil.TimeStamp(routerDescCreateTime.Default.(int64))
	// routerDescUpdateTime is the schema descriptor for update_time field.
	routerDescUpdateTime := routerFields[6].Descriptor()
	// router.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	router.UpdateDefaultUpdateTime = routerDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	sourceFields := schema.Source{}.Fields()
	_ = sourceFields
	// sourceDescCreateTime is the schema descriptor for create_time field.
	sourceDescCreateTime := sourceFields[6].Descriptor()
	// source.DefaultCreateTime holds the default value on creation for the create_time field.
	source.DefaultCreateTime = timeutil.TimeStamp(sourceDescCreateTime.Default.(int64))
	// sourceDescUpdateTime is the schema descriptor for update_time field.
	sourceDescUpdateTime := sourceFields[7].Descriptor()
	// source.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	source.UpdateDefaultUpdateTime = sourceDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	sourcedataFields := schema.SourceData{}.Fields()
	_ = sourcedataFields
	// sourcedataDescType is the schema descriptor for type field.
	sourcedataDescType := sourcedataFields[2].Descriptor()
	// sourcedata.DefaultType holds the default value on creation for the type field.
	sourcedata.DefaultType = sourcedataDescType.Default.(string)
	// sourcedata.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	sourcedata.TypeValidator = func() func(string) error {
		validators := sourcedataDescType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_type string) error {
			for _, fn := range fns {
				if err := fn(_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// sourcedataDescSubType is the schema descriptor for sub_type field.
	sourcedataDescSubType := sourcedataFields[3].Descriptor()
	// sourcedata.DefaultSubType holds the default value on creation for the sub_type field.
	sourcedata.DefaultSubType = sourcedataDescSubType.Default.(string)
	// sourcedata.SubTypeValidator is a validator for the "sub_type" field. It is called by the builders before save.
	sourcedata.SubTypeValidator = sourcedataDescSubType.Validators[0].(func(string) error)
	// sourcedataDescInfo is the schema descriptor for info field.
	sourcedataDescInfo := sourcedataFields[4].Descriptor()
	// sourcedata.DefaultInfo holds the default value on creation for the info field.
	sourcedata.DefaultInfo = sourcedataDescInfo.Default.(string)
	// sourcedataDescSnapshot is the schema descriptor for snapshot field.
	sourcedataDescSnapshot := sourcedataFields[5].Descriptor()
	// sourcedata.DefaultSnapshot holds the default value on creation for the snapshot field.
	sourcedata.DefaultSnapshot = sourcedataDescSnapshot.Default.(string)
	// sourcedataDescCreateTime is the schema descriptor for create_time field.
	sourcedataDescCreateTime := sourcedataFields[6].Descriptor()
	// sourcedata.DefaultCreateTime holds the default value on creation for the create_time field.
	sourcedata.DefaultCreateTime = timeutil.TimeStamp(sourcedataDescCreateTime.Default.(int64))
	// sourcedataDescUpdateTime is the schema descriptor for update_time field.
	sourcedataDescUpdateTime := sourcedataFields[7].Descriptor()
	// sourcedata.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	sourcedata.UpdateDefaultUpdateTime = sourcedataDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	twofactorFields := schema.TwoFactor{}.Fields()
	_ = twofactorFields
	// twofactorDescCreateTime is the schema descriptor for create_time field.
	twofactorDescCreateTime := twofactorFields[6].Descriptor()
	// twofactor.DefaultCreateTime holds the default value on creation for the create_time field.
	twofactor.DefaultCreateTime = timeutil.TimeStamp(twofactorDescCreateTime.Default.(int64))
	// twofactorDescUpdateTime is the schema descriptor for update_time field.
	twofactorDescUpdateTime := twofactorFields[7].Descriptor()
	// twofactor.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	twofactor.UpdateDefaultUpdateTime = twofactorDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[3].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLowerName is the schema descriptor for lower_name field.
	userDescLowerName := userFields[4].Descriptor()
	// user.LowerNameValidator is a validator for the "lower_name" field. It is called by the builders before save.
	user.LowerNameValidator = func() func(string) error {
		validators := userDescLowerName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(lower_name string) error {
			for _, fn := range fns {
				if err := fn(lower_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescFullName is the schema descriptor for full_name field.
	userDescFullName := userFields[5].Descriptor()
	// user.FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	user.FullNameValidator = func() func(string) error {
		validators := userDescFullName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(full_name string) error {
			for _, fn := range fns {
				if err := fn(full_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswdSalt is the schema descriptor for passwd_salt field.
	userDescPasswdSalt := userFields[6].Descriptor()
	// user.DefaultPasswdSalt holds the default value on creation for the passwd_salt field.
	user.DefaultPasswdSalt = userDescPasswdSalt.Default.(string)
	// user.PasswdSaltValidator is a validator for the "passwd_salt" field. It is called by the builders before save.
	user.PasswdSaltValidator = func() func(string) error {
		validators := userDescPasswdSalt.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(passwd_salt string) error {
			for _, fn := range fns {
				if err := fn(passwd_salt); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswdHashAlgo is the schema descriptor for passwd_hash_algo field.
	userDescPasswdHashAlgo := userFields[7].Descriptor()
	// user.PasswdHashAlgoValidator is a validator for the "passwd_hash_algo" field. It is called by the builders before save.
	user.PasswdHashAlgoValidator = func() func(string) error {
		validators := userDescPasswdHashAlgo.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(passwd_hash_algo string) error {
			for _, fn := range fns {
				if err := fn(passwd_hash_algo); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswd is the schema descriptor for passwd field.
	userDescPasswd := userFields[8].Descriptor()
	// user.PasswdValidator is a validator for the "passwd" field. It is called by the builders before save.
	user.PasswdValidator = func() func(string) error {
		validators := userDescPasswd.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(passwd string) error {
			for _, fn := range fns {
				if err := fn(passwd); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLanguage is the schema descriptor for language field.
	userDescLanguage := userFields[9].Descriptor()
	// user.LanguageValidator is a validator for the "language" field. It is called by the builders before save.
	user.LanguageValidator = func() func(string) error {
		validators := userDescLanguage.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(language string) error {
			for _, fn := range fns {
				if err := fn(language); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLoginName is the schema descriptor for login_name field.
	userDescLoginName := userFields[10].Descriptor()
	// user.LoginNameValidator is a validator for the "login_name" field. It is called by the builders before save.
	user.LoginNameValidator = userDescLoginName.Validators[0].(func(string) error)
	// userDescLoginSource is the schema descriptor for login_source field.
	userDescLoginSource := userFields[11].Descriptor()
	// user.DefaultLoginSource holds the default value on creation for the login_source field.
	user.DefaultLoginSource = userDescLoginSource.Default.(int64)
	// userDescIsRestricted is the schema descriptor for is_restricted field.
	userDescIsRestricted := userFields[13].Descriptor()
	// user.DefaultIsRestricted holds the default value on creation for the is_restricted field.
	user.DefaultIsRestricted = userDescIsRestricted.Default.(bool)
	// userDescIsActive is the schema descriptor for is_active field.
	userDescIsActive := userFields[14].Descriptor()
	// user.DefaultIsActive holds the default value on creation for the is_active field.
	user.DefaultIsActive = userDescIsActive.Default.(bool)
	// userDescProhibitLogin is the schema descriptor for prohibit_login field.
	userDescProhibitLogin := userFields[15].Descriptor()
	// user.DefaultProhibitLogin holds the default value on creation for the prohibit_login field.
	user.DefaultProhibitLogin = userDescProhibitLogin.Default.(bool)
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userFields[16].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = timeutil.TimeStamp(userDescCreateTime.Default.(int64))
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userFields[17].Descriptor()
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	userauthsourceFields := schema.UserAuthSource{}.Fields()
	_ = userauthsourceFields
	// userauthsourceDescToken is the schema descriptor for token field.
	userauthsourceDescToken := userauthsourceFields[2].Descriptor()
	// userauthsource.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	userauthsource.TokenValidator = func() func(string) error {
		validators := userauthsourceDescToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userauthsourceDescChannel is the schema descriptor for channel field.
	userauthsourceDescChannel := userauthsourceFields[3].Descriptor()
	// userauthsource.ChannelValidator is a validator for the "channel" field. It is called by the builders before save.
	userauthsource.ChannelValidator = userauthsourceDescChannel.Validators[0].(func(string) error)
	// userauthsourceDescDevice is the schema descriptor for device field.
	userauthsourceDescDevice := userauthsourceFields[4].Descriptor()
	// userauthsource.DeviceValidator is a validator for the "device" field. It is called by the builders before save.
	userauthsource.DeviceValidator = userauthsourceDescDevice.Validators[0].(func(string) error)
	// userauthsourceDescDeviceDetail is the schema descriptor for device_detail field.
	userauthsourceDescDeviceDetail := userauthsourceFields[5].Descriptor()
	// userauthsource.DeviceDetailValidator is a validator for the "device_detail" field. It is called by the builders before save.
	userauthsource.DeviceDetailValidator = userauthsourceDescDeviceDetail.Validators[0].(func(string) error)
	// userauthsourceDescClientIP is the schema descriptor for client_ip field.
	userauthsourceDescClientIP := userauthsourceFields[6].Descriptor()
	// userauthsource.ClientIPValidator is a validator for the "client_ip" field. It is called by the builders before save.
	userauthsource.ClientIPValidator = func() func(string) error {
		validators := userauthsourceDescClientIP.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(client_ip string) error {
			for _, fn := range fns {
				if err := fn(client_ip); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userauthsourceDescRemoteIP is the schema descriptor for remote_ip field.
	userauthsourceDescRemoteIP := userauthsourceFields[7].Descriptor()
	// userauthsource.RemoteIPValidator is a validator for the "remote_ip" field. It is called by the builders before save.
	userauthsource.RemoteIPValidator = func() func(string) error {
		validators := userauthsourceDescRemoteIP.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(remote_ip string) error {
			for _, fn := range fns {
				if err := fn(remote_ip); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userauthsourceDescSnapshot is the schema descriptor for snapshot field.
	userauthsourceDescSnapshot := userauthsourceFields[8].Descriptor()
	// userauthsource.SnapshotValidator is a validator for the "snapshot" field. It is called by the builders before save.
	userauthsource.SnapshotValidator = userauthsourceDescSnapshot.Validators[0].(func(string) error)
	// userauthsourceDescLoginName is the schema descriptor for login_name field.
	userauthsourceDescLoginName := userauthsourceFields[9].Descriptor()
	// userauthsource.LoginNameValidator is a validator for the "login_name" field. It is called by the builders before save.
	userauthsource.LoginNameValidator = userauthsourceDescLoginName.Validators[0].(func(string) error)
	// userauthsourceDescLoginSource is the schema descriptor for login_source field.
	userauthsourceDescLoginSource := userauthsourceFields[10].Descriptor()
	// userauthsource.DefaultLoginSource holds the default value on creation for the login_source field.
	userauthsource.DefaultLoginSource = userauthsourceDescLoginSource.Default.(int)
	// userauthsourceDescLoginType is the schema descriptor for login_type field.
	userauthsourceDescLoginType := userauthsourceFields[11].Descriptor()
	// userauthsource.DefaultLoginType holds the default value on creation for the login_type field.
	userauthsource.DefaultLoginType = userauthsourceDescLoginType.Default.(int)
	// userauthsourceDescCreateTime is the schema descriptor for create_time field.
	userauthsourceDescCreateTime := userauthsourceFields[12].Descriptor()
	// userauthsource.DefaultCreateTime holds the default value on creation for the create_time field.
	userauthsource.DefaultCreateTime = timeutil.TimeStamp(userauthsourceDescCreateTime.Default.(int64))
	// userauthsourceDescUpdateTime is the schema descriptor for update_time field.
	userauthsourceDescUpdateTime := userauthsourceFields[13].Descriptor()
	// userauthsource.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	userauthsource.UpdateDefaultUpdateTime = userauthsourceDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	userrelatedroleFields := schema.UserRelatedRole{}.Fields()
	_ = userrelatedroleFields
	// userrelatedroleDescCreateTime is the schema descriptor for create_time field.
	userrelatedroleDescCreateTime := userrelatedroleFields[3].Descriptor()
	// userrelatedrole.DefaultCreateTime holds the default value on creation for the create_time field.
	userrelatedrole.DefaultCreateTime = timeutil.TimeStamp(userrelatedroleDescCreateTime.Default.(int64))
	// userrelatedroleDescUpdateTime is the schema descriptor for update_time field.
	userrelatedroleDescUpdateTime := userrelatedroleFields[4].Descriptor()
	// userrelatedrole.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	userrelatedrole.UpdateDefaultUpdateTime = userrelatedroleDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	userroleFields := schema.UserRole{}.Fields()
	_ = userroleFields
	// userroleDescRoleName is the schema descriptor for role_name field.
	userroleDescRoleName := userroleFields[1].Descriptor()
	// userrole.RoleNameValidator is a validator for the "role_name" field. It is called by the builders before save.
	userrole.RoleNameValidator = func() func(string) error {
		validators := userroleDescRoleName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(role_name string) error {
			for _, fn := range fns {
				if err := fn(role_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userroleDescState is the schema descriptor for state field.
	userroleDescState := userroleFields[2].Descriptor()
	// userrole.DefaultState holds the default value on creation for the state field.
	userrole.DefaultState = state.SwitchState(userroleDescState.Default.(int))
	// userroleDescCreateTime is the schema descriptor for create_time field.
	userroleDescCreateTime := userroleFields[3].Descriptor()
	// userrole.DefaultCreateTime holds the default value on creation for the create_time field.
	userrole.DefaultCreateTime = timeutil.TimeStamp(userroleDescCreateTime.Default.(int64))
	// userroleDescUpdateTime is the schema descriptor for update_time field.
	userroleDescUpdateTime := userroleFields[4].Descriptor()
	// userrole.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	userrole.UpdateDefaultUpdateTime = userroleDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	wakatimeFields := schema.Wakatime{}.Fields()
	_ = wakatimeFields
	// wakatimeDescKey is the schema descriptor for key field.
	wakatimeDescKey := wakatimeFields[2].Descriptor()
	// wakatime.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	wakatime.KeyValidator = wakatimeDescKey.Validators[0].(func(string) error)
	// wakatimeDescAPI is the schema descriptor for api field.
	wakatimeDescAPI := wakatimeFields[3].Descriptor()
	// wakatime.APIValidator is a validator for the "api" field. It is called by the builders before save.
	wakatime.APIValidator = wakatimeDescAPI.Validators[0].(func(string) error)
	// wakatimeDescState is the schema descriptor for state field.
	wakatimeDescState := wakatimeFields[4].Descriptor()
	// wakatime.StateValidator is a validator for the "state" field. It is called by the builders before save.
	wakatime.StateValidator = wakatimeDescState.Validators[0].(func(string) error)
	// wakatimeDescCreateTime is the schema descriptor for create_time field.
	wakatimeDescCreateTime := wakatimeFields[5].Descriptor()
	// wakatime.DefaultCreateTime holds the default value on creation for the create_time field.
	wakatime.DefaultCreateTime = timeutil.TimeStamp(wakatimeDescCreateTime.Default.(int64))
	// wakatimeDescUpdateTime is the schema descriptor for update_time field.
	wakatimeDescUpdateTime := wakatimeFields[6].Descriptor()
	// wakatime.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	wakatime.UpdateDefaultUpdateTime = wakatimeDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	wakatimecategoryFields := schema.WakatimeCategory{}.Fields()
	_ = wakatimecategoryFields
	// wakatimecategoryDescName is the schema descriptor for name field.
	wakatimecategoryDescName := wakatimecategoryFields[3].Descriptor()
	// wakatimecategory.DefaultName holds the default value on creation for the name field.
	wakatimecategory.DefaultName = wakatimecategoryDescName.Default.(string)
	// wakatimecategory.NameValidator is a validator for the "name" field. It is called by the builders before save.
	wakatimecategory.NameValidator = wakatimecategoryDescName.Validators[0].(func(string) error)
	// wakatimecategoryDescTotalSeconds is the schema descriptor for total_seconds field.
	wakatimecategoryDescTotalSeconds := wakatimecategoryFields[4].Descriptor()
	// wakatimecategory.DefaultTotalSeconds holds the default value on creation for the total_seconds field.
	wakatimecategory.DefaultTotalSeconds = wakatimecategoryDescTotalSeconds.Default.(int64)
	// wakatimecategoryDescCreateTime is the schema descriptor for create_time field.
	wakatimecategoryDescCreateTime := wakatimecategoryFields[5].Descriptor()
	// wakatimecategory.DefaultCreateTime holds the default value on creation for the create_time field.
	wakatimecategory.DefaultCreateTime = timeutil.TimeStamp(wakatimecategoryDescCreateTime.Default.(int64))
	// wakatimecategoryDescUpdateTime is the schema descriptor for update_time field.
	wakatimecategoryDescUpdateTime := wakatimecategoryFields[6].Descriptor()
	// wakatimecategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	wakatimecategory.UpdateDefaultUpdateTime = wakatimecategoryDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	wakatimedependencyFields := schema.WakatimeDependency{}.Fields()
	_ = wakatimedependencyFields
	// wakatimedependencyDescName is the schema descriptor for name field.
	wakatimedependencyDescName := wakatimedependencyFields[3].Descriptor()
	// wakatimedependency.DefaultName holds the default value on creation for the name field.
	wakatimedependency.DefaultName = wakatimedependencyDescName.Default.(string)
	// wakatimedependency.NameValidator is a validator for the "name" field. It is called by the builders before save.
	wakatimedependency.NameValidator = wakatimedependencyDescName.Validators[0].(func(string) error)
	// wakatimedependencyDescTotalSeconds is the schema descriptor for total_seconds field.
	wakatimedependencyDescTotalSeconds := wakatimedependencyFields[4].Descriptor()
	// wakatimedependency.DefaultTotalSeconds holds the default value on creation for the total_seconds field.
	wakatimedependency.DefaultTotalSeconds = wakatimedependencyDescTotalSeconds.Default.(int64)
	// wakatimedependencyDescCreateTime is the schema descriptor for create_time field.
	wakatimedependencyDescCreateTime := wakatimedependencyFields[5].Descriptor()
	// wakatimedependency.DefaultCreateTime holds the default value on creation for the create_time field.
	wakatimedependency.DefaultCreateTime = timeutil.TimeStamp(wakatimedependencyDescCreateTime.Default.(int64))
	// wakatimedependencyDescUpdateTime is the schema descriptor for update_time field.
	wakatimedependencyDescUpdateTime := wakatimedependencyFields[6].Descriptor()
	// wakatimedependency.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	wakatimedependency.UpdateDefaultUpdateTime = wakatimedependencyDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
	webauthncredentialFields := schema.WebAuthnCredential{}.Fields()
	_ = webauthncredentialFields
	// webauthncredentialDescCredentialID is the schema descriptor for credential_id field.
	webauthncredentialDescCredentialID := webauthncredentialFields[4].Descriptor()
	// webauthncredential.CredentialIDValidator is a validator for the "credential_id" field. It is called by the builders before save.
	webauthncredential.CredentialIDValidator = webauthncredentialDescCredentialID.Validators[0].(func([]byte) error)
	// webauthncredentialDescCreateTime is the schema descriptor for create_time field.
	webauthncredentialDescCreateTime := webauthncredentialFields[10].Descriptor()
	// webauthncredential.DefaultCreateTime holds the default value on creation for the create_time field.
	webauthncredential.DefaultCreateTime = timeutil.TimeStamp(webauthncredentialDescCreateTime.Default.(int64))
	// webauthncredentialDescUpdateTime is the schema descriptor for update_time field.
	webauthncredentialDescUpdateTime := webauthncredentialFields[11].Descriptor()
	// webauthncredential.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	webauthncredential.UpdateDefaultUpdateTime = webauthncredentialDescUpdateTime.UpdateDefault.(func() timeutil.TimeStamp)
}
