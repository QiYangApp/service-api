// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/memberrolerelatedpermission"
	"ent/models/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberRoleRelatedPermissionDelete is the builder for deleting a MemberRoleRelatedPermission entity.
type MemberRoleRelatedPermissionDelete struct {
	config
	hooks    []Hook
	mutation *MemberRoleRelatedPermissionMutation
}

// Where appends a list predicates to the MemberRoleRelatedPermissionDelete builder.
func (mrrpd *MemberRoleRelatedPermissionDelete) Where(ps ...predicate.MemberRoleRelatedPermission) *MemberRoleRelatedPermissionDelete {
	mrrpd.mutation.Where(ps...)
	return mrrpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mrrpd *MemberRoleRelatedPermissionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mrrpd.sqlExec, mrrpd.mutation, mrrpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mrrpd *MemberRoleRelatedPermissionDelete) ExecX(ctx context.Context) int {
	n, err := mrrpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mrrpd *MemberRoleRelatedPermissionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(memberrolerelatedpermission.Table, sqlgraph.NewFieldSpec(memberrolerelatedpermission.FieldID, field.TypeInt64))
	if ps := mrrpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mrrpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mrrpd.mutation.done = true
	return affected, err
}

// MemberRoleRelatedPermissionDeleteOne is the builder for deleting a single MemberRoleRelatedPermission entity.
type MemberRoleRelatedPermissionDeleteOne struct {
	mrrpd *MemberRoleRelatedPermissionDelete
}

// Where appends a list predicates to the MemberRoleRelatedPermissionDelete builder.
func (mrrpdo *MemberRoleRelatedPermissionDeleteOne) Where(ps ...predicate.MemberRoleRelatedPermission) *MemberRoleRelatedPermissionDeleteOne {
	mrrpdo.mrrpd.mutation.Where(ps...)
	return mrrpdo
}

// Exec executes the deletion query.
func (mrrpdo *MemberRoleRelatedPermissionDeleteOne) Exec(ctx context.Context) error {
	n, err := mrrpdo.mrrpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{memberrolerelatedpermission.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mrrpdo *MemberRoleRelatedPermissionDeleteOne) ExecX(ctx context.Context) {
	if err := mrrpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
