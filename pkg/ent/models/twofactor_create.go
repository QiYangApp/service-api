// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/twofactor"
	"ent/utils/timeutil"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TwoFactorCreate is the builder for creating a TwoFactor entity.
type TwoFactorCreate struct {
	config
	mutation *TwoFactorMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (tfc *TwoFactorCreate) SetUserID(i int64) *TwoFactorCreate {
	tfc.mutation.SetUserID(i)
	return tfc
}

// SetSecret sets the "secret" field.
func (tfc *TwoFactorCreate) SetSecret(s string) *TwoFactorCreate {
	tfc.mutation.SetSecret(s)
	return tfc
}

// SetScratchSalt sets the "scratch_salt" field.
func (tfc *TwoFactorCreate) SetScratchSalt(s string) *TwoFactorCreate {
	tfc.mutation.SetScratchSalt(s)
	return tfc
}

// SetScratchHash sets the "scratch_hash" field.
func (tfc *TwoFactorCreate) SetScratchHash(s string) *TwoFactorCreate {
	tfc.mutation.SetScratchHash(s)
	return tfc
}

// SetLastUsedPasscode sets the "last_used_passcode" field.
func (tfc *TwoFactorCreate) SetLastUsedPasscode(s string) *TwoFactorCreate {
	tfc.mutation.SetLastUsedPasscode(s)
	return tfc
}

// SetCreateTime sets the "create_time" field.
func (tfc *TwoFactorCreate) SetCreateTime(ts timeutil.TimeStamp) *TwoFactorCreate {
	tfc.mutation.SetCreateTime(ts)
	return tfc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tfc *TwoFactorCreate) SetNillableCreateTime(ts *timeutil.TimeStamp) *TwoFactorCreate {
	if ts != nil {
		tfc.SetCreateTime(*ts)
	}
	return tfc
}

// SetUpdateTime sets the "update_time" field.
func (tfc *TwoFactorCreate) SetUpdateTime(ts timeutil.TimeStamp) *TwoFactorCreate {
	tfc.mutation.SetUpdateTime(ts)
	return tfc
}

// SetID sets the "id" field.
func (tfc *TwoFactorCreate) SetID(i int64) *TwoFactorCreate {
	tfc.mutation.SetID(i)
	return tfc
}

// Mutation returns the TwoFactorMutation object of the builder.
func (tfc *TwoFactorCreate) Mutation() *TwoFactorMutation {
	return tfc.mutation
}

// Save creates the TwoFactor in the database.
func (tfc *TwoFactorCreate) Save(ctx context.Context) (*TwoFactor, error) {
	tfc.defaults()
	return withHooks(ctx, tfc.sqlSave, tfc.mutation, tfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tfc *TwoFactorCreate) SaveX(ctx context.Context) *TwoFactor {
	v, err := tfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfc *TwoFactorCreate) Exec(ctx context.Context) error {
	_, err := tfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfc *TwoFactorCreate) ExecX(ctx context.Context) {
	if err := tfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfc *TwoFactorCreate) defaults() {
	if _, ok := tfc.mutation.CreateTime(); !ok {
		v := twofactor.DefaultCreateTime
		tfc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfc *TwoFactorCreate) check() error {
	if _, ok := tfc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`models: missing required field "TwoFactor.user_id"`)}
	}
	if _, ok := tfc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`models: missing required field "TwoFactor.secret"`)}
	}
	if _, ok := tfc.mutation.ScratchSalt(); !ok {
		return &ValidationError{Name: "scratch_salt", err: errors.New(`models: missing required field "TwoFactor.scratch_salt"`)}
	}
	if _, ok := tfc.mutation.ScratchHash(); !ok {
		return &ValidationError{Name: "scratch_hash", err: errors.New(`models: missing required field "TwoFactor.scratch_hash"`)}
	}
	if _, ok := tfc.mutation.LastUsedPasscode(); !ok {
		return &ValidationError{Name: "last_used_passcode", err: errors.New(`models: missing required field "TwoFactor.last_used_passcode"`)}
	}
	if _, ok := tfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`models: missing required field "TwoFactor.create_time"`)}
	}
	if _, ok := tfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`models: missing required field "TwoFactor.update_time"`)}
	}
	return nil
}

func (tfc *TwoFactorCreate) sqlSave(ctx context.Context) (*TwoFactor, error) {
	if err := tfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tfc.mutation.id = &_node.ID
	tfc.mutation.done = true
	return _node, nil
}

func (tfc *TwoFactorCreate) createSpec() (*TwoFactor, *sqlgraph.CreateSpec) {
	var (
		_node = &TwoFactor{config: tfc.config}
		_spec = sqlgraph.NewCreateSpec(twofactor.Table, sqlgraph.NewFieldSpec(twofactor.FieldID, field.TypeInt64))
	)
	if id, ok := tfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tfc.mutation.UserID(); ok {
		_spec.SetField(twofactor.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := tfc.mutation.Secret(); ok {
		_spec.SetField(twofactor.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := tfc.mutation.ScratchSalt(); ok {
		_spec.SetField(twofactor.FieldScratchSalt, field.TypeString, value)
		_node.ScratchSalt = value
	}
	if value, ok := tfc.mutation.ScratchHash(); ok {
		_spec.SetField(twofactor.FieldScratchHash, field.TypeString, value)
		_node.ScratchHash = value
	}
	if value, ok := tfc.mutation.LastUsedPasscode(); ok {
		_spec.SetField(twofactor.FieldLastUsedPasscode, field.TypeString, value)
		_node.LastUsedPasscode = value
	}
	if value, ok := tfc.mutation.CreateTime(); ok {
		_spec.SetField(twofactor.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = value
	}
	if value, ok := tfc.mutation.UpdateTime(); ok {
		_spec.SetField(twofactor.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// TwoFactorCreateBulk is the builder for creating many TwoFactor entities in bulk.
type TwoFactorCreateBulk struct {
	config
	err      error
	builders []*TwoFactorCreate
}

// Save creates the TwoFactor entities in the database.
func (tfcb *TwoFactorCreateBulk) Save(ctx context.Context) ([]*TwoFactor, error) {
	if tfcb.err != nil {
		return nil, tfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tfcb.builders))
	nodes := make([]*TwoFactor, len(tfcb.builders))
	mutators := make([]Mutator, len(tfcb.builders))
	for i := range tfcb.builders {
		func(i int, root context.Context) {
			builder := tfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwoFactorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tfcb *TwoFactorCreateBulk) SaveX(ctx context.Context) []*TwoFactor {
	v, err := tfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfcb *TwoFactorCreateBulk) Exec(ctx context.Context) error {
	_, err := tfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfcb *TwoFactorCreateBulk) ExecX(ctx context.Context) {
	if err := tfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
