// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/wakatimesystem"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WakatimeSystemUpdate is the builder for updating WakatimeSystem entities.
type WakatimeSystemUpdate struct {
	config
	hooks    []Hook
	mutation *WakatimeSystemMutation
}

// Where appends a list predicates to the WakatimeSystemUpdate builder.
func (wsu *WakatimeSystemUpdate) Where(ps ...predicate.WakatimeSystem) *WakatimeSystemUpdate {
	wsu.mutation.Where(ps...)
	return wsu
}

// Mutation returns the WakatimeSystemMutation object of the builder.
func (wsu *WakatimeSystemUpdate) Mutation() *WakatimeSystemMutation {
	return wsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsu *WakatimeSystemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wsu.sqlSave, wsu.mutation, wsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsu *WakatimeSystemUpdate) SaveX(ctx context.Context) int {
	affected, err := wsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsu *WakatimeSystemUpdate) Exec(ctx context.Context) error {
	_, err := wsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsu *WakatimeSystemUpdate) ExecX(ctx context.Context) {
	if err := wsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wsu *WakatimeSystemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wakatimesystem.Table, wakatimesystem.Columns, sqlgraph.NewFieldSpec(wakatimesystem.FieldID, field.TypeInt64))
	if ps := wsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wakatimesystem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsu.mutation.done = true
	return n, nil
}

// WakatimeSystemUpdateOne is the builder for updating a single WakatimeSystem entity.
type WakatimeSystemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WakatimeSystemMutation
}

// Mutation returns the WakatimeSystemMutation object of the builder.
func (wsuo *WakatimeSystemUpdateOne) Mutation() *WakatimeSystemMutation {
	return wsuo.mutation
}

// Where appends a list predicates to the WakatimeSystemUpdate builder.
func (wsuo *WakatimeSystemUpdateOne) Where(ps ...predicate.WakatimeSystem) *WakatimeSystemUpdateOne {
	wsuo.mutation.Where(ps...)
	return wsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsuo *WakatimeSystemUpdateOne) Select(field string, fields ...string) *WakatimeSystemUpdateOne {
	wsuo.fields = append([]string{field}, fields...)
	return wsuo
}

// Save executes the query and returns the updated WakatimeSystem entity.
func (wsuo *WakatimeSystemUpdateOne) Save(ctx context.Context) (*WakatimeSystem, error) {
	return withHooks(ctx, wsuo.sqlSave, wsuo.mutation, wsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsuo *WakatimeSystemUpdateOne) SaveX(ctx context.Context) *WakatimeSystem {
	node, err := wsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsuo *WakatimeSystemUpdateOne) Exec(ctx context.Context) error {
	_, err := wsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsuo *WakatimeSystemUpdateOne) ExecX(ctx context.Context) {
	if err := wsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wsuo *WakatimeSystemUpdateOne) sqlSave(ctx context.Context) (_node *WakatimeSystem, err error) {
	_spec := sqlgraph.NewUpdateSpec(wakatimesystem.Table, wakatimesystem.Columns, sqlgraph.NewFieldSpec(wakatimesystem.FieldID, field.TypeInt64))
	id, ok := wsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "WakatimeSystem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wakatimesystem.FieldID)
		for _, f := range fields {
			if !wakatimesystem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != wakatimesystem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &WakatimeSystem{config: wsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wakatimesystem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsuo.mutation.done = true
	return _node, nil
}
