// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"ent/models/predicate"
	"ent/models/wakatimegrandtotal"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WakatimeGrandTotalUpdate is the builder for updating WakatimeGrandTotal entities.
type WakatimeGrandTotalUpdate struct {
	config
	hooks    []Hook
	mutation *WakatimeGrandTotalMutation
}

// Where appends a list predicates to the WakatimeGrandTotalUpdate builder.
func (wgtu *WakatimeGrandTotalUpdate) Where(ps ...predicate.WakatimeGrandTotal) *WakatimeGrandTotalUpdate {
	wgtu.mutation.Where(ps...)
	return wgtu
}

// Mutation returns the WakatimeGrandTotalMutation object of the builder.
func (wgtu *WakatimeGrandTotalUpdate) Mutation() *WakatimeGrandTotalMutation {
	return wgtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wgtu *WakatimeGrandTotalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wgtu.sqlSave, wgtu.mutation, wgtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wgtu *WakatimeGrandTotalUpdate) SaveX(ctx context.Context) int {
	affected, err := wgtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wgtu *WakatimeGrandTotalUpdate) Exec(ctx context.Context) error {
	_, err := wgtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgtu *WakatimeGrandTotalUpdate) ExecX(ctx context.Context) {
	if err := wgtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wgtu *WakatimeGrandTotalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wakatimegrandtotal.Table, wakatimegrandtotal.Columns, sqlgraph.NewFieldSpec(wakatimegrandtotal.FieldID, field.TypeInt))
	if ps := wgtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wgtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wakatimegrandtotal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wgtu.mutation.done = true
	return n, nil
}

// WakatimeGrandTotalUpdateOne is the builder for updating a single WakatimeGrandTotal entity.
type WakatimeGrandTotalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WakatimeGrandTotalMutation
}

// Mutation returns the WakatimeGrandTotalMutation object of the builder.
func (wgtuo *WakatimeGrandTotalUpdateOne) Mutation() *WakatimeGrandTotalMutation {
	return wgtuo.mutation
}

// Where appends a list predicates to the WakatimeGrandTotalUpdate builder.
func (wgtuo *WakatimeGrandTotalUpdateOne) Where(ps ...predicate.WakatimeGrandTotal) *WakatimeGrandTotalUpdateOne {
	wgtuo.mutation.Where(ps...)
	return wgtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wgtuo *WakatimeGrandTotalUpdateOne) Select(field string, fields ...string) *WakatimeGrandTotalUpdateOne {
	wgtuo.fields = append([]string{field}, fields...)
	return wgtuo
}

// Save executes the query and returns the updated WakatimeGrandTotal entity.
func (wgtuo *WakatimeGrandTotalUpdateOne) Save(ctx context.Context) (*WakatimeGrandTotal, error) {
	return withHooks(ctx, wgtuo.sqlSave, wgtuo.mutation, wgtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wgtuo *WakatimeGrandTotalUpdateOne) SaveX(ctx context.Context) *WakatimeGrandTotal {
	node, err := wgtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wgtuo *WakatimeGrandTotalUpdateOne) Exec(ctx context.Context) error {
	_, err := wgtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgtuo *WakatimeGrandTotalUpdateOne) ExecX(ctx context.Context) {
	if err := wgtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wgtuo *WakatimeGrandTotalUpdateOne) sqlSave(ctx context.Context) (_node *WakatimeGrandTotal, err error) {
	_spec := sqlgraph.NewUpdateSpec(wakatimegrandtotal.Table, wakatimegrandtotal.Columns, sqlgraph.NewFieldSpec(wakatimegrandtotal.FieldID, field.TypeInt))
	id, ok := wgtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "WakatimeGrandTotal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wgtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wakatimegrandtotal.FieldID)
		for _, f := range fields {
			if !wakatimegrandtotal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != wakatimegrandtotal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wgtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &WakatimeGrandTotal{config: wgtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wgtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wakatimegrandtotal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wgtuo.mutation.done = true
	return _node, nil
}
