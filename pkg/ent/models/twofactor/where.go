// Code generated by ent, DO NOT EDIT.

package twofactor

import (
	"ent/models/predicate"
	"ent/utils/timeutil"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldUserID, v))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldSecret, v))
}

// ScratchSalt applies equality check predicate on the "scratch_salt" field. It's identical to ScratchSaltEQ.
func ScratchSalt(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldScratchSalt, v))
}

// ScratchHash applies equality check predicate on the "scratch_hash" field. It's identical to ScratchHashEQ.
func ScratchHash(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldScratchHash, v))
}

// LastUsedPasscode applies equality check predicate on the "last_used_passcode" field. It's identical to LastUsedPasscodeEQ.
func LastUsedPasscode(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldLastUsedPasscode, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldEQ(FieldCreateTime, vc))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldEQ(FieldUpdateTime, vc))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLTE(FieldUserID, v))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNEQ(FieldSecret, v))
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldIn(FieldSecret, vs...))
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNotIn(FieldSecret, vs...))
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGT(FieldSecret, v))
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGTE(FieldSecret, v))
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLT(FieldSecret, v))
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLTE(FieldSecret, v))
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldContains(FieldSecret, v))
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldHasPrefix(FieldSecret, v))
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldHasSuffix(FieldSecret, v))
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEqualFold(FieldSecret, v))
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldContainsFold(FieldSecret, v))
}

// ScratchSaltEQ applies the EQ predicate on the "scratch_salt" field.
func ScratchSaltEQ(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldScratchSalt, v))
}

// ScratchSaltNEQ applies the NEQ predicate on the "scratch_salt" field.
func ScratchSaltNEQ(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNEQ(FieldScratchSalt, v))
}

// ScratchSaltIn applies the In predicate on the "scratch_salt" field.
func ScratchSaltIn(vs ...string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldIn(FieldScratchSalt, vs...))
}

// ScratchSaltNotIn applies the NotIn predicate on the "scratch_salt" field.
func ScratchSaltNotIn(vs ...string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNotIn(FieldScratchSalt, vs...))
}

// ScratchSaltGT applies the GT predicate on the "scratch_salt" field.
func ScratchSaltGT(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGT(FieldScratchSalt, v))
}

// ScratchSaltGTE applies the GTE predicate on the "scratch_salt" field.
func ScratchSaltGTE(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGTE(FieldScratchSalt, v))
}

// ScratchSaltLT applies the LT predicate on the "scratch_salt" field.
func ScratchSaltLT(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLT(FieldScratchSalt, v))
}

// ScratchSaltLTE applies the LTE predicate on the "scratch_salt" field.
func ScratchSaltLTE(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLTE(FieldScratchSalt, v))
}

// ScratchSaltContains applies the Contains predicate on the "scratch_salt" field.
func ScratchSaltContains(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldContains(FieldScratchSalt, v))
}

// ScratchSaltHasPrefix applies the HasPrefix predicate on the "scratch_salt" field.
func ScratchSaltHasPrefix(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldHasPrefix(FieldScratchSalt, v))
}

// ScratchSaltHasSuffix applies the HasSuffix predicate on the "scratch_salt" field.
func ScratchSaltHasSuffix(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldHasSuffix(FieldScratchSalt, v))
}

// ScratchSaltEqualFold applies the EqualFold predicate on the "scratch_salt" field.
func ScratchSaltEqualFold(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEqualFold(FieldScratchSalt, v))
}

// ScratchSaltContainsFold applies the ContainsFold predicate on the "scratch_salt" field.
func ScratchSaltContainsFold(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldContainsFold(FieldScratchSalt, v))
}

// ScratchHashEQ applies the EQ predicate on the "scratch_hash" field.
func ScratchHashEQ(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldScratchHash, v))
}

// ScratchHashNEQ applies the NEQ predicate on the "scratch_hash" field.
func ScratchHashNEQ(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNEQ(FieldScratchHash, v))
}

// ScratchHashIn applies the In predicate on the "scratch_hash" field.
func ScratchHashIn(vs ...string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldIn(FieldScratchHash, vs...))
}

// ScratchHashNotIn applies the NotIn predicate on the "scratch_hash" field.
func ScratchHashNotIn(vs ...string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNotIn(FieldScratchHash, vs...))
}

// ScratchHashGT applies the GT predicate on the "scratch_hash" field.
func ScratchHashGT(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGT(FieldScratchHash, v))
}

// ScratchHashGTE applies the GTE predicate on the "scratch_hash" field.
func ScratchHashGTE(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGTE(FieldScratchHash, v))
}

// ScratchHashLT applies the LT predicate on the "scratch_hash" field.
func ScratchHashLT(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLT(FieldScratchHash, v))
}

// ScratchHashLTE applies the LTE predicate on the "scratch_hash" field.
func ScratchHashLTE(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLTE(FieldScratchHash, v))
}

// ScratchHashContains applies the Contains predicate on the "scratch_hash" field.
func ScratchHashContains(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldContains(FieldScratchHash, v))
}

// ScratchHashHasPrefix applies the HasPrefix predicate on the "scratch_hash" field.
func ScratchHashHasPrefix(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldHasPrefix(FieldScratchHash, v))
}

// ScratchHashHasSuffix applies the HasSuffix predicate on the "scratch_hash" field.
func ScratchHashHasSuffix(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldHasSuffix(FieldScratchHash, v))
}

// ScratchHashEqualFold applies the EqualFold predicate on the "scratch_hash" field.
func ScratchHashEqualFold(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEqualFold(FieldScratchHash, v))
}

// ScratchHashContainsFold applies the ContainsFold predicate on the "scratch_hash" field.
func ScratchHashContainsFold(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldContainsFold(FieldScratchHash, v))
}

// LastUsedPasscodeEQ applies the EQ predicate on the "last_used_passcode" field.
func LastUsedPasscodeEQ(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEQ(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeNEQ applies the NEQ predicate on the "last_used_passcode" field.
func LastUsedPasscodeNEQ(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNEQ(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeIn applies the In predicate on the "last_used_passcode" field.
func LastUsedPasscodeIn(vs ...string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldIn(FieldLastUsedPasscode, vs...))
}

// LastUsedPasscodeNotIn applies the NotIn predicate on the "last_used_passcode" field.
func LastUsedPasscodeNotIn(vs ...string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldNotIn(FieldLastUsedPasscode, vs...))
}

// LastUsedPasscodeGT applies the GT predicate on the "last_used_passcode" field.
func LastUsedPasscodeGT(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGT(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeGTE applies the GTE predicate on the "last_used_passcode" field.
func LastUsedPasscodeGTE(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldGTE(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeLT applies the LT predicate on the "last_used_passcode" field.
func LastUsedPasscodeLT(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLT(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeLTE applies the LTE predicate on the "last_used_passcode" field.
func LastUsedPasscodeLTE(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldLTE(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeContains applies the Contains predicate on the "last_used_passcode" field.
func LastUsedPasscodeContains(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldContains(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeHasPrefix applies the HasPrefix predicate on the "last_used_passcode" field.
func LastUsedPasscodeHasPrefix(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldHasPrefix(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeHasSuffix applies the HasSuffix predicate on the "last_used_passcode" field.
func LastUsedPasscodeHasSuffix(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldHasSuffix(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeEqualFold applies the EqualFold predicate on the "last_used_passcode" field.
func LastUsedPasscodeEqualFold(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldEqualFold(FieldLastUsedPasscode, v))
}

// LastUsedPasscodeContainsFold applies the ContainsFold predicate on the "last_used_passcode" field.
func LastUsedPasscodeContainsFold(v string) predicate.TwoFactor {
	return predicate.TwoFactor(sql.FieldContainsFold(FieldLastUsedPasscode, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldEQ(FieldCreateTime, vc))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldNEQ(FieldCreateTime, vc))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...timeutil.TimeStamp) predicate.TwoFactor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.TwoFactor(sql.FieldIn(FieldCreateTime, v...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...timeutil.TimeStamp) predicate.TwoFactor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.TwoFactor(sql.FieldNotIn(FieldCreateTime, v...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldGT(FieldCreateTime, vc))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldGTE(FieldCreateTime, vc))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldLT(FieldCreateTime, vc))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldLTE(FieldCreateTime, vc))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldEQ(FieldUpdateTime, vc))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldNEQ(FieldUpdateTime, vc))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...timeutil.TimeStamp) predicate.TwoFactor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.TwoFactor(sql.FieldIn(FieldUpdateTime, v...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...timeutil.TimeStamp) predicate.TwoFactor {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.TwoFactor(sql.FieldNotIn(FieldUpdateTime, v...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldGT(FieldUpdateTime, vc))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldGTE(FieldUpdateTime, vc))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldLT(FieldUpdateTime, vc))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v timeutil.TimeStamp) predicate.TwoFactor {
	vc := int64(v)
	return predicate.TwoFactor(sql.FieldLTE(FieldUpdateTime, vc))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TwoFactor) predicate.TwoFactor {
	return predicate.TwoFactor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TwoFactor) predicate.TwoFactor {
	return predicate.TwoFactor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TwoFactor) predicate.TwoFactor {
	return predicate.TwoFactor(sql.NotPredicates(p))
}
